{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/unbound-method */\n\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-floating-promises */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BittrexClient = void 0;\n\nconst moment = require(\"moment\");\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Candle_1 = require(\"../Candle\");\n\nconst CandlePeriod_1 = require(\"../CandlePeriod\");\n\nconst Throttle_1 = require(\"../flowcontrol/Throttle\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst SmartWss_1 = require(\"../SmartWss\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nconst Util_1 = require(\"../Util\");\n\nconst https = __importStar(require(\"../Https\"));\n\nconst zlib = __importStar(require(\"../ZlibUtils\"));\n/**\n * Implements the v3 API:\n * https://bittrex.github.io/api/v3#topic-Synchronizing\n * https://bittrex.github.io/guides/v3/upgrade\n *\n * This client uses SignalR and requires a custom connection strategy to\n * obtain a socket. Otherwise, things are relatively the same vs a\n * standard client.\n */\n\n\nclass BittrexClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath,\n      watcherMs = 15000,\n      throttleL2Snapshot = 100\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"Bittrex\", undefined, watcherMs);\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasCandles = true;\n    this.hasLevel2Snapshots = false;\n    this.hasLevel2Updates = true;\n    this.hasLevel3Snapshots = false;\n    this.hasLevel3Updates = false;\n    this.candlePeriod = CandlePeriod_1.CandlePeriod._1m;\n    this.orderBookDepth = 500;\n    this.connectInitTimeoutMs = 5000;\n    this._subbedTickers = false;\n    this._messageId = 0;\n    this._processTickers = this._processTickers.bind(this);\n    this._processTrades = this._processTrades.bind(this);\n    this._processCandles = this._processCandles.bind(this);\n    this._processLevel2Update = this._processLevel2Update.bind(this);\n    this._requestLevel2Snapshot = (0, Throttle_1.throttle)(this.__requestLevel2Snapshot.bind(this), throttleL2Snapshot);\n  } ////////////////////////////////////\n  // PROTECTED\n\n\n  _beforeConnect() {\n    this._wss.on(\"connected\", () => this._sendHeartbeat());\n  }\n\n  _beforeClose() {\n    this._subbedTickers = false;\n\n    this._requestLevel2Snapshot.cancel();\n  }\n\n  _sendHeartbeat() {\n    this._wss.send(JSON.stringify({\n      H: \"c3\",\n      M: \"Subscribe\",\n      A: [[\"heartbeat\"]],\n      I: ++this._messageId\n    }));\n  }\n\n  _sendSubTicker() {\n    if (this._subbedTickers) return;\n    this._subbedTickers = true;\n\n    this._wss.send(JSON.stringify({\n      H: \"c3\",\n      M: \"Subscribe\",\n      A: [[\"market_summaries\"]],\n      I: ++this._messageId\n    }));\n  }\n\n  _sendUnsubTicker() {// no-op\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      H: \"c3\",\n      M: \"Subscribe\",\n      A: [[`trade_${remote_id}`]],\n      I: ++this._messageId\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      H: \"c3\",\n      M: \"Unsubscribe\",\n      A: [[`trade_${remote_id}`]],\n      I: ++this._messageId\n    }));\n  }\n\n  _sendSubCandles(remote_id) {\n    this._wss.send(JSON.stringify({\n      H: \"c3\",\n      M: \"Subscribe\",\n      A: [[`candle_${remote_id}_${candlePeriod(this.candlePeriod)}`]],\n      I: ++this._messageId\n    }));\n  }\n\n  _sendUnsubCandles(remote_id) {\n    this._wss.send(JSON.stringify({\n      H: \"c3\",\n      M: \"Unsubscribe\",\n      A: [[`candle_${remote_id}_${candlePeriod(this.candlePeriod)}`]],\n      I: ++this._messageId\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id, market) {\n    this._requestLevel2Snapshot(market);\n\n    this._wss.send(JSON.stringify({\n      H: \"c3\",\n      M: \"Subscribe\",\n      A: [[`orderbook_${remote_id}_${this.orderBookDepth}`]],\n      I: ++this._messageId\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      H: \"c3\",\n      M: \"Subscribe\",\n      A: [[`orderbook_${remote_id}_${this.orderBookDepth}`]],\n      I: ++this._messageId\n    }));\n  }\n  /**\n   * Requires connecting to SignalR which has a whole BS negotiation\n   * to obtain a token, similar to Kucoin actually.\n   */\n\n\n  _connect() {\n    if (!this._wss) {\n      this._wss = {\n        status: \"connecting\"\n      };\n\n      this._connectAsync();\n    }\n  }\n  /**\n   * Asynchronously connect to a socket. This method will retrieve a token\n   * from an HTTP request and then construct a websocket. If the HTTP\n   * request fails, it will retry until successful.\n   */\n\n\n  async _connectAsync() {\n    let wssPath = this.wssPath; // Retry HTTP requests until we are successful\n\n    while (!wssPath) {\n      try {\n        const data = JSON.stringify([{\n          name: \"c3\"\n        }]);\n        const negotiations = await https.get(`https://socket-v3.bittrex.com/signalr/negotiate?connectionData=${data}&clientProtocol=1.5`);\n        const token = encodeURIComponent(negotiations.ConnectionToken);\n        wssPath = `wss://socket-v3.bittrex.com/signalr/connect?clientProtocol=1.5&transport=webSockets&connectionToken=${token}&connectionData=${data}&tid=10`;\n      } catch (ex) {\n        await (0, Util_1.wait)(this.connectInitTimeoutMs);\n\n        this._onError(ex);\n      }\n    } // Construct a socket and bind all events\n\n\n    const wss = new SmartWss_1.SmartWss(wssPath);\n    this._wss = wss;\n\n    this._wss.on(\"error\", this._onError.bind(this));\n\n    this._wss.on(\"connecting\", this._onConnecting.bind(this));\n\n    this._wss.on(\"connected\", this._onConnected.bind(this));\n\n    this._wss.on(\"disconnected\", this._onDisconnected.bind(this));\n\n    this._wss.on(\"closing\", this._onClosing.bind(this));\n\n    this._wss.on(\"closed\", this._onClosed.bind(this));\n\n    this._wss.on(\"message\", msg => {\n      try {\n        this._onMessage(msg);\n      } catch (ex) {\n        this._onError(ex);\n      }\n    });\n\n    if (this._beforeConnect) this._beforeConnect();\n\n    this._wss.connect();\n  }\n\n  _onMessage(raw) {\n    const fullMsg = JSON.parse(raw); // Handle responses\n    // {\"R\":[{\"Success\":true,\"ErrorCode\":null},{\"Success\":true,\"ErrorCode\":null}],\"I\":1}\n\n    if (fullMsg.R) {\n      for (const msg of fullMsg.R) {\n        if (!msg.Success) {\n          this.emit(\"error\", new Error(\"Subscription failed with error \" + msg.ErrorCode));\n        }\n      }\n    } // Handle messages\n\n\n    if (!fullMsg.M) return;\n\n    for (const msg of fullMsg.M) {\n      if (msg.M === \"heartbeat\") {\n        this._watcher.markAlive();\n      }\n\n      if (msg.M === \"marketSummaries\") {\n        for (const a of msg.A) {\n          zlib.inflateRaw(Buffer.from(a, \"base64\"), this._processTickers);\n        }\n      }\n\n      if (msg.M === \"trade\") {\n        for (const a of msg.A) {\n          zlib.inflateRaw(Buffer.from(a, \"base64\"), this._processTrades);\n        }\n      }\n\n      if (msg.M === \"candle\") {\n        for (const a of msg.A) {\n          zlib.inflateRaw(Buffer.from(a, \"base64\"), this._processCandles);\n        }\n      }\n\n      if (msg.M === \"orderBook\") {\n        for (const a of msg.A) {\n          zlib.inflateRaw(Buffer.from(a, \"base64\"), this._processLevel2Update);\n        }\n      }\n    }\n  }\n  /**\n  {\n    \"sequence\": 3584000,\n    \"deltas\": [\n      {\n        symbol: 'BTC-USDT',\n        high: '12448.02615735',\n        low: '11773.32163568',\n        volume: '640.86060471',\n        quoteVolume: '7714634.67704918',\n        percentChange: '3.98',\n        updatedAt: '2020-08-17T20:16:27.617Z'\n      }\n    ]\n  }\n  */\n\n\n  _processTickers(err, raw) {\n    if (err) {\n      this.emit(\"error\", err);\n      return;\n    }\n\n    let msg;\n\n    try {\n      msg = JSON.parse(raw);\n    } catch (ex) {\n      this.emit(\"error\", ex);\n      return;\n    }\n\n    for (const datum of msg.deltas) {\n      const market = this._tickerSubs.get(datum.symbol);\n\n      if (!market) continue;\n\n      const ticker = this._constructTicker(datum, market);\n\n      this.emit(\"ticker\", ticker, market);\n    }\n  }\n\n  _constructTicker(msg, market) {\n    const {\n      high,\n      low,\n      volume,\n      quoteVolume,\n      percentChange,\n      updatedAt\n    } = msg;\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: moment.utc(updatedAt).valueOf(),\n      last: undefined,\n      open: undefined,\n      high: high,\n      low: low,\n      volume: volume,\n      quoteVolume: quoteVolume,\n      change: undefined,\n      changePercent: percentChange,\n      bid: undefined,\n      ask: undefined\n    });\n  }\n  /**\n  {\n    deltas: [\n      {\n        id: 'edacd990-7c5f-4c75-8a66-ce0a71093b3c',\n        executedAt: '2020-08-17T20:36:39.96Z',\n        quantity: '0.00714818',\n        rate: '12301.34800000',\n        takerSide: 'BUY'\n      }\n    ],\n    sequence: 18344,\n    marketSymbol: 'BTC-USDT'\n  }\n  */\n\n\n  _processTrades(err, raw) {\n    if (err) {\n      this.emit(\"error\", err);\n      return;\n    }\n\n    let msg;\n\n    try {\n      msg = JSON.parse(raw);\n    } catch (ex) {\n      this.emit(\"error\", ex);\n      return;\n    }\n\n    const market = this._tradeSubs.get(msg.marketSymbol);\n\n    if (!market) return;\n\n    for (const datum of msg.deltas) {\n      const trade = this._constructTrade(datum, market);\n\n      this.emit(\"trade\", trade, market);\n    }\n  }\n\n  _constructTrade(msg, market) {\n    const tradeId = msg.id;\n    const unix = moment.utc(msg.executedAt).valueOf();\n    const price = msg.rate;\n    const amount = msg.quantity;\n    const side = msg.takerSide === \"BUY\" ? \"buy\" : \"sell\";\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId,\n      unix,\n      side,\n      price,\n      amount\n    });\n  }\n  /**\n  {\n    sequence: 10808,\n    marketSymbol: 'BTC-USDT',\n    interval: 'MINUTE_1',\n    delta: {\n      startsAt: '2020-08-17T20:47:00Z',\n      open: '12311.59599999',\n      high: '12311.59599999',\n      low: '12301.57150000',\n      close: '12301.57150000',\n      volume: '1.65120614',\n      quoteVolume: '20319.96359337'\n    }\n  }\n  */\n\n\n  _processCandles(err, raw) {\n    if (err) {\n      this.emit(\"error\", err);\n      return;\n    }\n\n    let msg;\n\n    try {\n      msg = JSON.parse(raw);\n    } catch (ex) {\n      this.emit(\"error\", ex);\n      return;\n    }\n\n    const market = this._candleSubs.get(msg.marketSymbol);\n\n    if (!market) return;\n\n    const candle = this._constructCandle(msg.delta);\n\n    this.emit(\"candle\", candle, market);\n  }\n\n  _constructCandle(msg) {\n    return new Candle_1.Candle(moment.utc(msg.startsAt).valueOf(), msg.open, msg.high, msg.low, msg.close, msg.volume);\n  }\n  /**\n  {\n    marketSymbol: 'BTC-USDT',\n    depth: 500,\n    sequence: 545851,\n    bidDeltas: [\n      { quantity: '0', rate: '12338.47320003' },\n      { quantity: '0.01654433', rate: '10800.62000000' }\n    ],\n    askDeltas: []\n  }\n  */\n\n\n  _processLevel2Update(err, raw) {\n    if (err) {\n      this.emit(\"error\", err);\n      return;\n    }\n\n    let msg;\n\n    try {\n      msg = JSON.parse(raw);\n    } catch (ex) {\n      this.emit(\"error\", ex);\n      return;\n    }\n\n    const market = this._level2UpdateSubs.get(msg.marketSymbol);\n\n    if (!market) return;\n\n    const update = this._constructLevel2Update(msg, market);\n\n    this.emit(\"l2update\", update, market);\n  }\n\n  _constructLevel2Update(msg, market) {\n    const sequenceId = msg.sequence;\n    const depth = msg.depth;\n    const bids = msg.bidDeltas.map(p => new Level2Point_1.Level2Point(p.rate, p.quantity, undefined, {\n      depth\n    }));\n    const asks = msg.askDeltas.map(p => new Level2Point_1.Level2Point(p.rate, p.quantity, undefined, {\n      depth\n    }));\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      asks,\n      bids\n    });\n  }\n\n  async __requestLevel2Snapshot(market) {\n    let failed;\n\n    try {\n      const remote_id = market.id;\n      const uri = `https://api.bittrex.com/v3/markets/${remote_id}/orderbook?depth=${this.orderBookDepth}`;\n      const {\n        data,\n        response\n      } = await https.getResponse(uri);\n      const raw = data;\n      const sequence = +response.headers.sequence;\n      const asks = raw.ask.map(p => new Level2Point_1.Level2Point(p.rate, p.quantity));\n      const bids = raw.bid.map(p => new Level2Point_1.Level2Point(p.rate, p.quantity));\n      const snapshot = new Level2Snapshots_1.Level2Snapshot({\n        exchange: this.name,\n        base: market.base,\n        quote: market.quote,\n        sequenceId: sequence,\n        asks,\n        bids\n      });\n      this.emit(\"l2snapshot\", snapshot, market);\n    } catch (ex) {\n      const err = new Error(\"L2Snapshot failed\");\n      err.inner = ex.message;\n      err.market = market;\n      this.emit(\"error\", err);\n      failed = err;\n    } finally {\n      if (failed && failed.inner.indexOf(\"MARKET_DOES_NOT_EXIST\") === -1) {\n        this._requestLevel2Snapshot(market);\n      }\n    }\n  }\n\n}\n\nexports.BittrexClient = BittrexClient;\n\nfunction candlePeriod(period) {\n  switch (period) {\n    case CandlePeriod_1.CandlePeriod._1m:\n      return \"MINUTE_1\";\n\n    case CandlePeriod_1.CandlePeriod._5m:\n      return \"MINUTE_5\";\n\n    case CandlePeriod_1.CandlePeriod._1h:\n      return \"HOUR_1\";\n\n    case CandlePeriod_1.CandlePeriod._1d:\n      return \"DAY_1\";\n  }\n}","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/BittrexClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/unbound-method */\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nimport moment = require(\"moment\");\nimport { BasicClient } from \"../BasicClient\";\nimport { Candle } from \"../Candle\";\nimport { CandlePeriod } from \"../CandlePeriod\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { CancelableFn } from \"../flowcontrol/Fn\";\nimport { throttle } from \"../flowcontrol/Throttle\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { SmartWss } from \"../SmartWss\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\nimport { wait } from \"../Util\";\nimport * as https from \"../Https\";\nimport * as zlib from \"../ZlibUtils\";\n\n/**\n * Implements the v3 API:\n * https://bittrex.github.io/api/v3#topic-Synchronizing\n * https://bittrex.github.io/guides/v3/upgrade\n *\n * This client uses SignalR and requires a custom connection strategy to\n * obtain a socket. Otherwise, things are relatively the same vs a\n * standard client.\n */\nexport class BittrexClient extends BasicClient {\n    public candlePeriod: CandlePeriod;\n    public orderBookDepth: number;\n    public connectInitTimeoutMs: number;\n\n    protected _subbedTickers: boolean;\n    protected _messageId: number;\n    protected _requestLevel2Snapshot: CancelableFn;\n\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    constructor({ wssPath, watcherMs = 15000, throttleL2Snapshot = 100 }: ClientOptions = {}) {\n        super(wssPath, \"Bittrex\", undefined, watcherMs);\n\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasCandles = true;\n        this.hasLevel2Snapshots = false;\n        this.hasLevel2Updates = true;\n        this.hasLevel3Snapshots = false;\n        this.hasLevel3Updates = false;\n        this.candlePeriod = CandlePeriod._1m;\n        this.orderBookDepth = 500;\n        this.connectInitTimeoutMs = 5000;\n\n        this._subbedTickers = false;\n        this._messageId = 0;\n        this._processTickers = this._processTickers.bind(this);\n        this._processTrades = this._processTrades.bind(this);\n        this._processCandles = this._processCandles.bind(this);\n        this._processLevel2Update = this._processLevel2Update.bind(this);\n        this._requestLevel2Snapshot = throttle(\n            this.__requestLevel2Snapshot.bind(this),\n            throttleL2Snapshot,\n        );\n    }\n\n    ////////////////////////////////////\n    // PROTECTED\n\n    protected _beforeConnect() {\n        this._wss.on(\"connected\", () => this._sendHeartbeat());\n    }\n\n    protected _beforeClose() {\n        this._subbedTickers = false;\n        this._requestLevel2Snapshot.cancel();\n    }\n\n    protected _sendHeartbeat() {\n        this._wss.send(\n            JSON.stringify({\n                H: \"c3\",\n                M: \"Subscribe\",\n                A: [[\"heartbeat\"]],\n                I: ++this._messageId,\n            }),\n        );\n    }\n\n    protected _sendSubTicker() {\n        if (this._subbedTickers) return;\n        this._subbedTickers = true;\n        this._wss.send(\n            JSON.stringify({\n                H: \"c3\",\n                M: \"Subscribe\",\n                A: [[\"market_summaries\"]],\n                I: ++this._messageId,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker() {\n        // no-op\n    }\n\n    protected _sendSubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                H: \"c3\",\n                M: \"Subscribe\",\n                A: [[`trade_${remote_id}`]],\n                I: ++this._messageId,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                H: \"c3\",\n                M: \"Unsubscribe\",\n                A: [[`trade_${remote_id}`]],\n                I: ++this._messageId,\n            }),\n        );\n    }\n\n    protected _sendSubCandles(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                H: \"c3\",\n                M: \"Subscribe\",\n                A: [[`candle_${remote_id}_${candlePeriod(this.candlePeriod)}`]],\n                I: ++this._messageId,\n            }),\n        );\n    }\n\n    protected _sendUnsubCandles(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                H: \"c3\",\n                M: \"Unsubscribe\",\n                A: [[`candle_${remote_id}_${candlePeriod(this.candlePeriod)}`]],\n                I: ++this._messageId,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id, market) {\n        this._requestLevel2Snapshot(market);\n        this._wss.send(\n            JSON.stringify({\n                H: \"c3\",\n                M: \"Subscribe\",\n                A: [[`orderbook_${remote_id}_${this.orderBookDepth}`]],\n                I: ++this._messageId,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                H: \"c3\",\n                M: \"Subscribe\",\n                A: [[`orderbook_${remote_id}_${this.orderBookDepth}`]],\n                I: ++this._messageId,\n            }),\n        );\n    }\n\n    /**\n     * Requires connecting to SignalR which has a whole BS negotiation\n     * to obtain a token, similar to Kucoin actually.\n     */\n    protected _connect() {\n        if (!this._wss) {\n            this._wss = { status: \"connecting\" } as any;\n            this._connectAsync();\n        }\n    }\n\n    /**\n     * Asynchronously connect to a socket. This method will retrieve a token\n     * from an HTTP request and then construct a websocket. If the HTTP\n     * request fails, it will retry until successful.\n     */\n    protected async _connectAsync() {\n        let wssPath = this.wssPath;\n\n        // Retry HTTP requests until we are successful\n        while (!wssPath) {\n            try {\n                const data = JSON.stringify([{ name: \"c3\" }]);\n                const negotiations: any = await https.get(\n                    `https://socket-v3.bittrex.com/signalr/negotiate?connectionData=${data}&clientProtocol=1.5`,\n                );\n                const token = encodeURIComponent(negotiations.ConnectionToken);\n                wssPath = `wss://socket-v3.bittrex.com/signalr/connect?clientProtocol=1.5&transport=webSockets&connectionToken=${token}&connectionData=${data}&tid=10`;\n            } catch (ex) {\n                await wait(this.connectInitTimeoutMs);\n                this._onError(ex);\n            }\n        }\n\n        // Construct a socket and bind all events\n        const wss = new SmartWss(wssPath);\n        this._wss = wss;\n        this._wss.on(\"error\", this._onError.bind(this));\n        this._wss.on(\"connecting\", this._onConnecting.bind(this));\n        this._wss.on(\"connected\", this._onConnected.bind(this));\n        this._wss.on(\"disconnected\", this._onDisconnected.bind(this));\n        this._wss.on(\"closing\", this._onClosing.bind(this));\n        this._wss.on(\"closed\", this._onClosed.bind(this));\n        this._wss.on(\"message\", msg => {\n            try {\n                this._onMessage(msg);\n            } catch (ex) {\n                this._onError(ex);\n            }\n        });\n        if (this._beforeConnect) this._beforeConnect();\n        this._wss.connect();\n    }\n\n    protected _onMessage(raw) {\n        const fullMsg = JSON.parse(raw);\n\n        // Handle responses\n        // {\"R\":[{\"Success\":true,\"ErrorCode\":null},{\"Success\":true,\"ErrorCode\":null}],\"I\":1}\n        if (fullMsg.R) {\n            for (const msg of fullMsg.R) {\n                if (!msg.Success) {\n                    this.emit(\n                        \"error\",\n                        new Error(\"Subscription failed with error \" + msg.ErrorCode),\n                    );\n                }\n            }\n        }\n\n        // Handle messages\n        if (!fullMsg.M) return;\n        for (const msg of fullMsg.M) {\n            if (msg.M === \"heartbeat\") {\n                this._watcher.markAlive();\n            }\n\n            if (msg.M === \"marketSummaries\") {\n                for (const a of msg.A) {\n                    zlib.inflateRaw(Buffer.from(a, \"base64\"), this._processTickers);\n                }\n            }\n\n            if (msg.M === \"trade\") {\n                for (const a of msg.A) {\n                    zlib.inflateRaw(Buffer.from(a, \"base64\"), this._processTrades);\n                }\n            }\n\n            if (msg.M === \"candle\") {\n                for (const a of msg.A) {\n                    zlib.inflateRaw(Buffer.from(a, \"base64\"), this._processCandles);\n                }\n            }\n\n            if (msg.M === \"orderBook\") {\n                for (const a of msg.A) {\n                    zlib.inflateRaw(Buffer.from(a, \"base64\"), this._processLevel2Update);\n                }\n            }\n        }\n    }\n\n    /**\n   {\n      \"sequence\": 3584000,\n      \"deltas\": [\n        {\n          symbol: 'BTC-USDT',\n          high: '12448.02615735',\n          low: '11773.32163568',\n          volume: '640.86060471',\n          quoteVolume: '7714634.67704918',\n          percentChange: '3.98',\n          updatedAt: '2020-08-17T20:16:27.617Z'\n        }\n      ]\n    }\n   */\n    protected _processTickers(err, raw) {\n        if (err) {\n            this.emit(\"error\", err);\n            return;\n        }\n\n        let msg;\n        try {\n            msg = JSON.parse(raw);\n        } catch (ex) {\n            this.emit(\"error\", ex);\n            return;\n        }\n\n        for (const datum of msg.deltas) {\n            const market = this._tickerSubs.get(datum.symbol);\n            if (!market) continue;\n\n            const ticker = this._constructTicker(datum, market);\n            this.emit(\"ticker\", ticker, market);\n        }\n    }\n\n    protected _constructTicker(msg, market) {\n        const { high, low, volume, quoteVolume, percentChange, updatedAt } = msg;\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: moment.utc(updatedAt).valueOf(),\n            last: undefined,\n            open: undefined,\n            high: high,\n            low: low,\n            volume: volume,\n            quoteVolume: quoteVolume,\n            change: undefined,\n            changePercent: percentChange,\n            bid: undefined,\n            ask: undefined,\n        });\n    }\n\n    /**\n   {\n      deltas: [\n        {\n          id: 'edacd990-7c5f-4c75-8a66-ce0a71093b3c',\n          executedAt: '2020-08-17T20:36:39.96Z',\n          quantity: '0.00714818',\n          rate: '12301.34800000',\n          takerSide: 'BUY'\n        }\n      ],\n      sequence: 18344,\n      marketSymbol: 'BTC-USDT'\n    }\n   */\n    protected _processTrades(err, raw) {\n        if (err) {\n            this.emit(\"error\", err);\n            return;\n        }\n\n        let msg;\n        try {\n            msg = JSON.parse(raw);\n        } catch (ex) {\n            this.emit(\"error\", ex);\n            return;\n        }\n\n        const market = this._tradeSubs.get(msg.marketSymbol);\n        if (!market) return;\n\n        for (const datum of msg.deltas) {\n            const trade = this._constructTrade(datum, market);\n            this.emit(\"trade\", trade, market);\n        }\n    }\n\n    protected _constructTrade(msg, market) {\n        const tradeId = msg.id;\n        const unix = moment.utc(msg.executedAt).valueOf();\n        const price = msg.rate;\n        const amount = msg.quantity;\n        const side = msg.takerSide === \"BUY\" ? \"buy\" : \"sell\";\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId,\n            unix,\n            side,\n            price,\n            amount,\n        });\n    }\n\n    /**\n   {\n      sequence: 10808,\n      marketSymbol: 'BTC-USDT',\n      interval: 'MINUTE_1',\n      delta: {\n        startsAt: '2020-08-17T20:47:00Z',\n        open: '12311.59599999',\n        high: '12311.59599999',\n        low: '12301.57150000',\n        close: '12301.57150000',\n        volume: '1.65120614',\n        quoteVolume: '20319.96359337'\n      }\n    }\n   */\n    protected _processCandles(err, raw) {\n        if (err) {\n            this.emit(\"error\", err);\n            return;\n        }\n\n        let msg;\n        try {\n            msg = JSON.parse(raw);\n        } catch (ex) {\n            this.emit(\"error\", ex);\n            return;\n        }\n\n        const market = this._candleSubs.get(msg.marketSymbol);\n        if (!market) return;\n\n        const candle = this._constructCandle(msg.delta);\n        this.emit(\"candle\", candle, market);\n    }\n\n    protected _constructCandle(msg) {\n        return new Candle(\n            moment.utc(msg.startsAt).valueOf(),\n            msg.open,\n            msg.high,\n            msg.low,\n            msg.close,\n            msg.volume,\n        );\n    }\n\n    /**\n   {\n      marketSymbol: 'BTC-USDT',\n      depth: 500,\n      sequence: 545851,\n      bidDeltas: [\n        { quantity: '0', rate: '12338.47320003' },\n        { quantity: '0.01654433', rate: '10800.62000000' }\n      ],\n      askDeltas: []\n    }\n   */\n    protected _processLevel2Update(err, raw) {\n        if (err) {\n            this.emit(\"error\", err);\n            return;\n        }\n\n        let msg;\n        try {\n            msg = JSON.parse(raw);\n        } catch (ex) {\n            this.emit(\"error\", ex);\n            return;\n        }\n\n        const market = this._level2UpdateSubs.get(msg.marketSymbol);\n        if (!market) return;\n\n        const update = this._constructLevel2Update(msg, market);\n        this.emit(\"l2update\", update, market);\n    }\n\n    protected _constructLevel2Update(msg, market) {\n        const sequenceId = msg.sequence;\n        const depth = msg.depth;\n        const bids = msg.bidDeltas.map(\n            p => new Level2Point(p.rate, p.quantity, undefined, { depth }),\n        );\n        const asks = msg.askDeltas.map(\n            p => new Level2Point(p.rate, p.quantity, undefined, { depth }),\n        );\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            asks,\n            bids,\n        });\n    }\n\n    protected async __requestLevel2Snapshot(market) {\n        let failed: any;\n        try {\n            const remote_id = market.id;\n            const uri = `https://api.bittrex.com/v3/markets/${remote_id}/orderbook?depth=${this.orderBookDepth}`;\n            const { data, response } = await https.getResponse<any>(uri);\n            const raw = data;\n            const sequence = +response.headers.sequence;\n            const asks = raw.ask.map(p => new Level2Point(p.rate, p.quantity));\n            const bids = raw.bid.map(p => new Level2Point(p.rate, p.quantity));\n            const snapshot = new Level2Snapshot({\n                exchange: this.name,\n                base: market.base,\n                quote: market.quote,\n                sequenceId: sequence,\n                asks,\n                bids,\n            });\n            this.emit(\"l2snapshot\", snapshot, market);\n        } catch (ex) {\n            const err = new Error(\"L2Snapshot failed\") as any;\n            err.inner = ex.message;\n            err.market = market;\n            this.emit(\"error\", err);\n            failed = err;\n        } finally {\n            if (failed && failed.inner.indexOf(\"MARKET_DOES_NOT_EXIST\") === -1) {\n                this._requestLevel2Snapshot(market);\n            }\n        }\n    }\n}\n\nfunction candlePeriod(period) {\n    switch (period) {\n        case CandlePeriod._1m:\n            return \"MINUTE_1\";\n        case CandlePeriod._5m:\n            return \"MINUTE_5\";\n        case CandlePeriod._1h:\n            return \"HOUR_1\";\n        case CandlePeriod._1d:\n            return \"DAY_1\";\n    }\n}\n"]},"metadata":{},"sourceType":"script"}