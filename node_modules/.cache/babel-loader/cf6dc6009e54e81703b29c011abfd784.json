{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOrJoinSocket = void 0;\n\nvar globals_1 = require(\"./globals\");\n\nvar constants_1 = require(\"./constants\");\n\nvar attach_listener_1 = require(\"./attach-listener\");\n\nvar attach_shared_listeners_1 = require(\"./attach-shared-listeners\");\n\nvar manage_subscribers_1 = require(\"./manage-subscribers\"); //TODO ensure that all onClose callbacks are called\n\n\nvar cleanSubscribers = function (url, subscriber, optionsRef, setReadyState, clearSocketIoPingInterval) {\n  return function () {\n    manage_subscribers_1.removeSubscriber(url, subscriber);\n\n    if (!manage_subscribers_1.hasSubscribers(url)) {\n      try {\n        var socketLike = globals_1.sharedWebSockets[url];\n\n        if (socketLike instanceof WebSocket) {\n          socketLike.onclose = function (event) {\n            if (optionsRef.current.onClose) {\n              optionsRef.current.onClose(event);\n            }\n\n            setReadyState(constants_1.ReadyState.CLOSED);\n          };\n        }\n\n        socketLike.close();\n      } catch (e) {}\n\n      if (clearSocketIoPingInterval) clearSocketIoPingInterval();\n      delete globals_1.sharedWebSockets[url];\n    }\n  };\n};\n\nexports.createOrJoinSocket = function (webSocketRef, url, setReadyState, optionsRef, setLastMessage, startRef, reconnectCount, sendMessage) {\n  if (!constants_1.isEventSourceSupported && optionsRef.current.eventSourceOptions) {\n    if (constants_1.isReactNative) {\n      throw new Error('EventSource is not supported in ReactNative');\n    } else {\n      throw new Error('EventSource is not supported');\n    }\n  }\n\n  if (optionsRef.current.share) {\n    var clearSocketIoPingInterval = null;\n\n    if (globals_1.sharedWebSockets[url] === undefined) {\n      globals_1.sharedWebSockets[url] = optionsRef.current.eventSourceOptions ? new EventSource(url, optionsRef.current.eventSourceOptions) : new WebSocket(url, optionsRef.current.protocols);\n      webSocketRef.current = globals_1.sharedWebSockets[url];\n      setReadyState(constants_1.ReadyState.CONNECTING);\n      clearSocketIoPingInterval = attach_shared_listeners_1.attachSharedListeners(globals_1.sharedWebSockets[url], url, optionsRef, sendMessage);\n    } else {\n      webSocketRef.current = globals_1.sharedWebSockets[url];\n      setReadyState(globals_1.sharedWebSockets[url].readyState);\n    }\n\n    var subscriber = {\n      setLastMessage: setLastMessage,\n      setReadyState: setReadyState,\n      optionsRef: optionsRef,\n      reconnectCount: reconnectCount,\n      reconnect: startRef\n    };\n    manage_subscribers_1.addSubscriber(url, subscriber);\n    return cleanSubscribers(url, subscriber, optionsRef, setReadyState, clearSocketIoPingInterval);\n  } else {\n    webSocketRef.current = optionsRef.current.eventSourceOptions ? new EventSource(url, optionsRef.current.eventSourceOptions) : new WebSocket(url, optionsRef.current.protocols);\n    setReadyState(constants_1.ReadyState.CONNECTING);\n\n    if (!webSocketRef.current) {\n      throw new Error('WebSocket failed to be created');\n    }\n\n    return attach_listener_1.attachListeners(webSocketRef.current, {\n      setLastMessage: setLastMessage,\n      setReadyState: setReadyState\n    }, optionsRef, startRef.current, reconnectCount, sendMessage);\n  }\n};","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer-wip/node_modules/react-use-websocket/src/lib/create-or-join.ts"],"names":[],"mappings":"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","sourcesContent":["import { MutableRefObject } from 'react';\nimport { sharedWebSockets } from './globals';\nimport { Options, SendMessage, Subscriber, WebSocketLike } from './types';\nimport { isEventSourceSupported, ReadyState, isReactNative } from './constants';\nimport { attachListeners } from './attach-listener';\nimport { attachSharedListeners } from './attach-shared-listeners';\nimport { addSubscriber, removeSubscriber, hasSubscribers } from './manage-subscribers';\n\n//TODO ensure that all onClose callbacks are called\n\nconst cleanSubscribers = (\n  url: string,\n  subscriber: Subscriber,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: (readyState: ReadyState) => void,\n  clearSocketIoPingInterval: (() => void) | null,\n) => {\n  return () => {\n    removeSubscriber(url, subscriber);\n    if (!hasSubscribers(url)) {\n      try {\n        const socketLike = sharedWebSockets[url];\n        if (socketLike instanceof WebSocket) {\n          socketLike.onclose = (event: WebSocketEventMap['close']) => {\n            if (optionsRef.current.onClose) {\n              optionsRef.current.onClose(event);\n            }\n            setReadyState(ReadyState.CLOSED);\n          };\n        }\n        socketLike.close();\n      } catch (e) {\n\n      }\n      if (clearSocketIoPingInterval) clearSocketIoPingInterval();\n\n      delete sharedWebSockets[url];\n    }\n  }\n};\n\nexport const createOrJoinSocket = (\n  webSocketRef: MutableRefObject<WebSocketLike | null>,\n  url: string,\n  setReadyState: (readyState: ReadyState) => void,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: (message: WebSocketEventMap['message']) => void,\n  startRef: MutableRefObject<() => void>,\n  reconnectCount: MutableRefObject<number>,\n  sendMessage: SendMessage,\n): (() => void) => {\n  if (!isEventSourceSupported && optionsRef.current.eventSourceOptions) {\n    if (isReactNative) {\n      throw new Error('EventSource is not supported in ReactNative');\n    } else {\n      throw new Error('EventSource is not supported');\n    }\n  }\n\n  if (optionsRef.current.share) {\n    let clearSocketIoPingInterval: ((() => void) | null) = null;\n    if (sharedWebSockets[url] === undefined) {\n      sharedWebSockets[url] = optionsRef.current.eventSourceOptions ?\n        new EventSource(url, optionsRef.current.eventSourceOptions) :\n        new WebSocket(url, optionsRef.current.protocols);\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(ReadyState.CONNECTING);\n      clearSocketIoPingInterval = attachSharedListeners(\n        sharedWebSockets[url],\n        url,\n        optionsRef,\n        sendMessage,\n      );\n    } else {\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(sharedWebSockets[url].readyState);\n    }\n\n    const subscriber: Subscriber = {\n      setLastMessage,\n      setReadyState,\n      optionsRef,\n      reconnectCount,\n      reconnect: startRef,\n    };\n  \n    addSubscriber(url, subscriber);\n\n    return cleanSubscribers(\n      url,\n      subscriber,\n      optionsRef,\n      setReadyState,\n      clearSocketIoPingInterval,\n    );\n  } else {\n    webSocketRef.current = optionsRef.current.eventSourceOptions ?\n      new EventSource(url, optionsRef.current.eventSourceOptions) :\n      new WebSocket(url, optionsRef.current.protocols);\n    setReadyState(ReadyState.CONNECTING);\n    if (!webSocketRef.current) {\n      throw new Error('WebSocket failed to be created');\n    }\n\n    return attachListeners(\n      webSocketRef.current,\n      {\n        setLastMessage,\n        setReadyState\n      },\n      optionsRef,\n      startRef.current,\n      reconnectCount,\n      sendMessage,\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"script"}