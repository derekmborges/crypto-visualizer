{"ast":null,"code":"var _jsxFileName = \"/Users/Derek/workspace/crypto-visualizer-wip/src/components/TransactionBubble/TransactionBubble.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './TransactionBubble.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sizeMap = {\n  0.000499: {\n    size: 100\n  },\n  0.000999: {\n    size: 300\n  },\n  0.00499: {\n    size: 400\n  },\n  0.00999: {\n    size: 800\n  },\n  0.09: {\n    size: 1200\n  },\n  0.3: {\n    size: 1800\n  },\n  100: {\n    size: 2500\n  }\n};\n\nfunction TransactionBubble(_ref) {\n  _s();\n\n  let {\n    amount = 0\n  } = _ref;\n  // const bubbleRef = useRef()\n  // const [canvasWidth, setCanvasWidth] = useState(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n  const [canvasWidth, setCanvasWidth] = useState(900); // const [canvasHeight, setCanvasHeight] = useState(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n\n  const [bubbleSize, setBubbleSize] = useState(0);\n  const [random, setRandom] = useState(Math.random());\n  const [position, setPosition] = useState(random * canvasWidth);\n  useEffect(() => {\n    // Determine size of bubble\n    console.log(Object.keys(sizeMap));\n\n    for (let cutoffString of Object.keys(sizeMap)) {\n      const cutoffAmount = Number.parseFloat(cutoffString);\n      console.log(cutoffAmount);\n\n      if (amount <= cutoffAmount) {\n        setBubbleSize(sizeMap[cutoffAmount].size);\n        console.log('FOUND SIZE:', bubbleSize);\n        break;\n      }\n    }\n  }, []);\n  console.log('Position:', position); // const min = 0.0001\n  // const max = 0.05\n  // const maxPixels = 1000\n  // const ratio = Number.parseFloat((Math.max(size, min) / (min + (max - min))).toFixed(1))\n  // setBubbleSize(100 + ratio * maxPixels)\n  // const getWindowSize = () => {\n  //     setCanvasWidth(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n  //     setCanvasHeight(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n  // }\n  // useEffect(() => {\n  //     window.addEventListener('resize', getWindowSize)\n  //     // return () => window.removeEventListener('resize', getWindowSize)\n  // }, [])\n  // Position bubble within canvas\n  // useEffect(() => {\n  //     console.log('canvas:', canvasWidth, 'x', canvasHeight)\n  //     const availablePixels = canvasWidth - bubbleSize\n  //     console.log('Position:', random * availablePixels)\n  //     setPosition(random * availablePixels)\n  // }, [canvasWidth, canvasHeight, bubbleSize, random])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bubble flex flex-col place-items-center justify-center\",\n    style: {\n      left: `${position}px`,\n      width: `${bubbleSize}px`,\n      height: `${bubbleSize}px`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"transaction-amount mb-2 text-2xl\",\n      children: \"#.###### BTC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"transaction-price mt-2 text-xl\",\n      children: \"$#####.##\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionBubble, \"r3z3Ouo7LactmnFIkgqPrlF3DI0=\");\n\n_c = TransactionBubble;\nexport default TransactionBubble;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionBubble\");","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer-wip/src/components/TransactionBubble/TransactionBubble.tsx"],"names":["React","useEffect","useState","sizeMap","size","TransactionBubble","amount","canvasWidth","setCanvasWidth","bubbleSize","setBubbleSize","random","setRandom","Math","position","setPosition","console","log","Object","keys","cutoffString","cutoffAmount","Number","parseFloat","left","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAO,yBAAP;;AAMA,MAAMC,OAAuC,GAAG;AAC5C,YAAU;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADkC;AAE5C,YAAU;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFkC;AAG5C,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAHmC;AAI5C,WAAS;AAACA,IAAAA,IAAI,EAAE;AAAP,GAJmC;AAK5C,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GALsC;AAM5C,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR,GANuC;AAO5C,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR;AAPuC,CAAhD;;AAUA,SAASC,iBAAT,OAA2C;AAAA;;AAAA,MAAhB;AAAEC,IAAAA,MAAM,GAAG;AAAX,GAAgB;AACvC;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,GAAD,CAA9C,CAHuC,CAIvC;;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAACW,IAAI,CAACF,MAAL,EAAD,CAApC;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAACS,MAAM,GAAGJ,WAAV,CAAxC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYhB,OAAZ,CAAZ;;AACA,SAAK,IAAIiB,YAAT,IAAyBF,MAAM,CAACC,IAAP,CAAYhB,OAAZ,CAAzB,EAA+C;AAC3C,YAAMkB,YAAY,GAAGC,MAAM,CAACC,UAAP,CAAkBH,YAAlB,CAArB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYI,YAAZ;;AACA,UAAIf,MAAM,IAAIe,YAAd,EAA4B;AACxBX,QAAAA,aAAa,CAACP,OAAO,CAACkB,YAAD,CAAP,CAAsBjB,IAAvB,CAAb;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BR,UAA3B;AACA;AACH;AACJ;AACJ,GAZQ,EAYN,EAZM,CAAT;AAgBAO,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,QAAzB,EAzBuC,CA2BvC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,wDAAf;AACI,IAAA,KAAK,EAAE;AACHU,MAAAA,IAAI,EAAG,GAAEV,QAAS,IADf;AAEHW,MAAAA,KAAK,EAAG,GAAEhB,UAAW,IAFlB;AAGHiB,MAAAA,MAAM,EAAG,GAAEjB,UAAW;AAHnB,KADX;AAAA,4BAMI;AAAM,MAAA,SAAS,EAAC,kCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAM,MAAA,SAAS,EAAC,gCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA/DQJ,iB;;KAAAA,iB;AAiET,eAAeA,iBAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { TransactionSize } from '../../models/transaction'\nimport './TransactionBubble.css';\n\ninterface BubbleStyle {\n    size: number;\n}\n\nconst sizeMap: { [key: number]: BubbleStyle } = {\n    0.000499: { size: 100 },\n    0.000999: { size: 300 },\n    0.00499: { size: 400 },\n    0.00999: {size: 800 },\n    0.09: { size: 1200 },\n    0.3: { size: 1800 },\n    100: { size: 2500 }\n}\n\nfunction TransactionBubble({ amount = 0 }) {\n    // const bubbleRef = useRef()\n    // const [canvasWidth, setCanvasWidth] = useState(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n    const [canvasWidth, setCanvasWidth] = useState(900)\n    // const [canvasHeight, setCanvasHeight] = useState(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n    const [bubbleSize, setBubbleSize] = useState(0)\n    const [random, setRandom] = useState(Math.random())\n    const [position, setPosition] = useState(random * canvasWidth)\n\n    useEffect(() => {\n        // Determine size of bubble\n        console.log(Object.keys(sizeMap))\n        for (let cutoffString of Object.keys(sizeMap)) {\n            const cutoffAmount = Number.parseFloat(cutoffString)\n            console.log(cutoffAmount)\n            if (amount <= cutoffAmount) {\n                setBubbleSize(sizeMap[cutoffAmount].size)\n                console.log('FOUND SIZE:', bubbleSize)\n                break;\n            }\n        }\n    }, [])\n\n    \n\n    console.log('Position:', position)\n\n    // const min = 0.0001\n    // const max = 0.05\n    // const maxPixels = 1000\n    // const ratio = Number.parseFloat((Math.max(size, min) / (min + (max - min))).toFixed(1))\n    // setBubbleSize(100 + ratio * maxPixels)\n\n    // const getWindowSize = () => {\n    //     setCanvasWidth(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n    //     setCanvasHeight(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n    // }\n\n    // useEffect(() => {\n    //     window.addEventListener('resize', getWindowSize)\n    //     // return () => window.removeEventListener('resize', getWindowSize)\n    // }, [])\n\n    // Position bubble within canvas\n    // useEffect(() => {\n    //     console.log('canvas:', canvasWidth, 'x', canvasHeight)\n\n    //     const availablePixels = canvasWidth - bubbleSize\n    //     console.log('Position:', random * availablePixels)\n    //     setPosition(random * availablePixels)\n    // }, [canvasWidth, canvasHeight, bubbleSize, random])\n\n    return (\n        <div className=\"bubble flex flex-col place-items-center justify-center\"\n            style={{\n                left: `${position}px`,\n                width: `${bubbleSize}px`,\n                height: `${bubbleSize}px`,\n            }}>\n            <span className='transaction-amount mb-2 text-2xl'>#.###### BTC</span>\n            <span className='transaction-price mt-2 text-xl'>$#####.##</span>\n        </div>\n    );\n}\n\nexport default TransactionBubble;"]},"metadata":{},"sourceType":"module"}