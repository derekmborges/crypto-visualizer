{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ZbClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nclass ZbClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://api.zb.work/websocket\",\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"ZB\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasLevel2Snapshots = true;\n    this.remoteIdMap = new Map();\n  }\n\n  _sendSubTicker(remote_id) {\n    const wss_remote_id = remote_id.replace(/_/, \"\");\n    this.remoteIdMap.set(wss_remote_id, remote_id);\n\n    this._wss.send(JSON.stringify({\n      event: \"addChannel\",\n      channel: `${wss_remote_id}_ticker`\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    const wss_remote_id = remote_id.replace(/_/, \"\");\n    this.remoteIdMap.set(wss_remote_id, remote_id);\n\n    this._wss.send(JSON.stringify({\n      event: \"removeChannel\",\n      channel: `${wss_remote_id}_ticker`\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    const wss_remote_id = remote_id.replace(/_/, \"\");\n    this.remoteIdMap.set(wss_remote_id, remote_id);\n\n    this._wss.send(JSON.stringify({\n      event: \"addChannel\",\n      channel: `${wss_remote_id}_trades`\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    const wss_remote_id = remote_id.replace(/_/, \"\");\n    this.remoteIdMap.set(wss_remote_id, remote_id);\n\n    this._wss.send(JSON.stringify({\n      event: \"removeChannel\",\n      channel: `${wss_remote_id}_trades`\n    }));\n  }\n\n  _sendSubLevel2Snapshots(remote_id) {\n    const wss_remote_id = remote_id.replace(/_/, \"\");\n    this.remoteIdMap.set(wss_remote_id, remote_id);\n\n    this._wss.send(JSON.stringify({\n      event: \"addChannel\",\n      channel: `${wss_remote_id}_depth`\n    }));\n  }\n\n  _sendUnsubLevel2Snapshots(remote_id) {\n    const wss_remote_id = remote_id.replace(/_/, \"\");\n    this.remoteIdMap.set(wss_remote_id, remote_id);\n\n    this._wss.send(JSON.stringify({\n      event: \"removeChannel\",\n      channel: `${wss_remote_id}_depth`\n    }));\n  }\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw);\n    const [wssRemoteId, type] = msg.channel.split(\"_\");\n    const remoteId = this.remoteIdMap.get(wssRemoteId); // prevent errors from crashing the party\n\n    if (msg.success === false) {\n      return;\n    } // tickers\n\n\n    if (type === \"ticker\") {\n      const market = this._tickerSubs.get(remoteId);\n\n      if (!market) return;\n\n      const ticker = this._constructTicker(msg, market);\n\n      this.emit(\"ticker\", ticker, market);\n      return;\n    } // trades\n\n\n    if (type === \"trades\") {\n      for (const datum of msg.data) {\n        const market = this._tradeSubs.get(remoteId);\n\n        if (!market) return;\n\n        const trade = this._constructTradesFromMessage(datum, market);\n\n        this.emit(\"trade\", trade, market);\n      }\n\n      return;\n    } // level2snapshots\n\n\n    if (type === \"depth\") {\n      const market = this._level2SnapshotSubs.get(remoteId);\n\n      if (!market) return;\n\n      const snapshot = this._constructLevel2Snapshot(msg, market);\n\n      this.emit(\"l2snapshot\", snapshot, market);\n      return;\n    }\n  }\n\n  _constructTicker(data, market) {\n    const timestamp = parseInt(data.date);\n    const ticker = data.ticker;\n    return new Ticker_1.Ticker({\n      exchange: \"ZB\",\n      base: market.base,\n      quote: market.quote,\n      timestamp,\n      last: ticker.last,\n      open: undefined,\n      high: ticker.high,\n      low: ticker.low,\n      volume: ticker.vol,\n      quoteVolume: undefined,\n      change: undefined,\n      changePercent: undefined,\n      bid: ticker.buy,\n      ask: ticker.sell\n    });\n  }\n\n  _constructTradesFromMessage(datum, market) {\n    const {\n      date,\n      price,\n      amount,\n      tid,\n      type\n    } = datum;\n    return new Trade_1.Trade({\n      exchange: \"ZB\",\n      base: market.base,\n      quote: market.quote,\n      tradeId: tid.toString(),\n      side: type,\n      unix: parseInt(date) * 1000,\n      price,\n      amount\n    });\n  }\n\n  _constructLevel2Snapshot(msg, market) {\n    let {\n      timestamp,\n      asks,\n      bids\n    } = msg;\n    asks = asks.map(p => new Level2Point_1.Level2Point(p[0].toFixed(8), p[1].toFixed(8))).reverse();\n    bids = bids.map(p => new Level2Point_1.Level2Point(p[0].toFixed(8), p[1].toFixed(8)));\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: \"ZB\",\n      base: market.base,\n      quote: market.quote,\n      timestampMs: timestamp * 1000,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.ZbClient = ZbClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/ZbClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\nexport class ZbClient extends BasicClient {\n    public remoteIdMap: Map<string, string>;\n\n    constructor({ wssPath = \"wss://api.zb.work/websocket\", watcherMs }: ClientOptions = {}) {\n        super(wssPath, \"ZB\", undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasLevel2Snapshots = true;\n        this.remoteIdMap = new Map();\n    }\n\n    protected _sendSubTicker(remote_id: string) {\n        const wss_remote_id = remote_id.replace(/_/, \"\");\n        this.remoteIdMap.set(wss_remote_id, remote_id);\n        this._wss.send(\n            JSON.stringify({\n                event: \"addChannel\",\n                channel: `${wss_remote_id}_ticker`,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id: string) {\n        const wss_remote_id = remote_id.replace(/_/, \"\");\n        this.remoteIdMap.set(wss_remote_id, remote_id);\n        this._wss.send(\n            JSON.stringify({\n                event: \"removeChannel\",\n                channel: `${wss_remote_id}_ticker`,\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id: string) {\n        const wss_remote_id = remote_id.replace(/_/, \"\");\n        this.remoteIdMap.set(wss_remote_id, remote_id);\n        this._wss.send(\n            JSON.stringify({\n                event: \"addChannel\",\n                channel: `${wss_remote_id}_trades`,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id: string) {\n        const wss_remote_id = remote_id.replace(/_/, \"\");\n        this.remoteIdMap.set(wss_remote_id, remote_id);\n        this._wss.send(\n            JSON.stringify({\n                event: \"removeChannel\",\n                channel: `${wss_remote_id}_trades`,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Snapshots(remote_id: string) {\n        const wss_remote_id = remote_id.replace(/_/, \"\");\n        this.remoteIdMap.set(wss_remote_id, remote_id);\n        this._wss.send(\n            JSON.stringify({\n                event: \"addChannel\",\n                channel: `${wss_remote_id}_depth`,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Snapshots(remote_id: string) {\n        const wss_remote_id = remote_id.replace(/_/, \"\");\n        this.remoteIdMap.set(wss_remote_id, remote_id);\n        this._wss.send(\n            JSON.stringify({\n                event: \"removeChannel\",\n                channel: `${wss_remote_id}_depth`,\n            }),\n        );\n    }\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Updates = NotImplementedFn;\n    protected _sendUnsubLevel2Updates = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(raw: any) {\n        const msg = JSON.parse(raw);\n        const [wssRemoteId, type] = msg.channel.split(\"_\");\n        const remoteId = this.remoteIdMap.get(wssRemoteId);\n\n        // prevent errors from crashing the party\n        if (msg.success === false) {\n            return;\n        }\n\n        // tickers\n        if (type === \"ticker\") {\n            const market = this._tickerSubs.get(remoteId);\n            if (!market) return;\n\n            const ticker = this._constructTicker(msg, market);\n            this.emit(\"ticker\", ticker, market);\n            return;\n        }\n\n        // trades\n        if (type === \"trades\") {\n            for (const datum of msg.data) {\n                const market = this._tradeSubs.get(remoteId);\n                if (!market) return;\n\n                const trade = this._constructTradesFromMessage(datum, market);\n                this.emit(\"trade\", trade, market);\n            }\n            return;\n        }\n\n        // level2snapshots\n        if (type === \"depth\") {\n            const market = this._level2SnapshotSubs.get(remoteId);\n            if (!market) return;\n\n            const snapshot = this._constructLevel2Snapshot(msg, market);\n            this.emit(\"l2snapshot\", snapshot, market);\n            return;\n        }\n    }\n\n    protected _constructTicker(data, market) {\n        const timestamp = parseInt(data.date);\n        const ticker = data.ticker;\n        return new Ticker({\n            exchange: \"ZB\",\n            base: market.base,\n            quote: market.quote,\n            timestamp,\n            last: ticker.last,\n            open: undefined,\n            high: ticker.high,\n            low: ticker.low,\n            volume: ticker.vol,\n            quoteVolume: undefined,\n            change: undefined,\n            changePercent: undefined,\n            bid: ticker.buy,\n            ask: ticker.sell,\n        });\n    }\n\n    protected _constructTradesFromMessage(datum, market) {\n        const { date, price, amount, tid, type } = datum;\n        return new Trade({\n            exchange: \"ZB\",\n            base: market.base,\n            quote: market.quote,\n            tradeId: tid.toString(),\n            side: type,\n            unix: parseInt(date) * 1000,\n            price,\n            amount,\n        });\n    }\n\n    protected _constructLevel2Snapshot(msg, market) {\n        let { timestamp, asks, bids } = msg;\n        asks = asks.map(p => new Level2Point(p[0].toFixed(8), p[1].toFixed(8))).reverse();\n        bids = bids.map(p => new Level2Point(p[0].toFixed(8), p[1].toFixed(8)));\n        return new Level2Snapshot({\n            exchange: \"ZB\",\n            base: market.base,\n            quote: market.quote,\n            timestampMs: timestamp * 1000,\n            asks,\n            bids,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}