{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitfinexClient = exports.BitfinexTradeMessageType = void 0;\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst Level3Point_1 = require(\"../Level3Point\");\n\nconst Level3Snapshot_1 = require(\"../Level3Snapshot\");\n\nconst Level3Update_1 = require(\"../Level3Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nvar BitfinexTradeMessageType;\n\n(function (BitfinexTradeMessageType) {\n  /**\n   * Receive both execution events and updates\n   */\n  BitfinexTradeMessageType[\"All\"] = \"all\";\n  /**\n   * Receive trade events immediately at the time of execution. Events\n   * do not include the database identifier, only the sequence identifier.\n   */\n\n  BitfinexTradeMessageType[\"Execution\"] = \"te\";\n  /**\n   * Receive trade events that have been written to the database. These\n   * events include both the sequence identifier as well as the database\n   * identifier. These events are delayed by 1-2 seconds after the\n   * trade event.\n   */\n\n  BitfinexTradeMessageType[\"Update\"] = \"tu\";\n})(BitfinexTradeMessageType = exports.BitfinexTradeMessageType || (exports.BitfinexTradeMessageType = {}));\n\nclass BitfinexClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://api.bitfinex.com/ws/2\",\n      watcherMs,\n      l2UpdateDepth = 250,\n      enableEmptyHeartbeatEvents = false,\n      tradeMessageType = BitfinexTradeMessageType.Update\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"Bitfinex\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedAsyncFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedAsyncFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedAsyncFn;\n    this._channels = {};\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasLevel2Updates = true;\n    this.hasLevel3Updates = true;\n    this.l2UpdateDepth = l2UpdateDepth;\n    this.enableEmptyHeartbeatEvents = enableEmptyHeartbeatEvents;\n    this.tradeMessageType = tradeMessageType;\n  }\n\n  _onConnected() {\n    // immediately send the config event to include sequence IDs in every message\n    this._sendConfiguration();\n\n    super._onConnected();\n  }\n  /**\n   * Override the default BasicClient _unsubscribe by deferring removal\n   * of from the appropriate map until the unsubscribe event has been\n   * received.\n   *\n   * If enableEmptyHeartbeatEvents (validating sequenceIds) we need to\n   * keep receiving events from a channel after we sent the unsub event\n   * until unsubscribe is confirmed. This is because every message's\n   * sequenceId must be validated, and some may arrive between sending\n   * unsub and it being confirmed. So we dont remove from the map and\n   * will continue emitting events for this channel until they stop\n   * arriving.\n   */\n\n\n  _unsubscribe(market, map, sendFn) {\n    const remote_id = market.id;\n\n    if (map.has(remote_id)) {\n      if (this._wss.isConnected) {\n        sendFn(remote_id, market);\n      }\n    }\n  }\n\n  _sendConfiguration() {\n    // see docs for \"conf\" flags. https://docs.bitfinex.com/docs/ws-general#configuration\n    // combine multiple flags by summing their values\n    // 65536 adds a sequence ID to each message\n    // 32768 adds a Timestamp in milliseconds to each received event\n    // 131072 Enable checksum for every book iteration. Checks the top 25 entries for each side of book. Checksum is a signed int. more info https://docs.bitfinex.com/docs/ws-websocket-checksum. it's sent in its own\n    // separate event so we've disabled it\n    this._wss.send(JSON.stringify({\n      event: \"conf\",\n      flags: 65536 + 32768\n    }));\n  }\n\n  _sendSubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"subscribe\",\n      channel: \"ticker\",\n      pair: remote_id\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    this._sendUnsubscribe(remote_id);\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"subscribe\",\n      channel: \"trades\",\n      pair: remote_id\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    const chanId = this._findChannel(\"trades\", remote_id);\n\n    this._sendUnsubscribe(chanId);\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"subscribe\",\n      channel: \"book\",\n      pair: remote_id,\n      len: String(this.l2UpdateDepth) // len must be of type string, even though it's a number\n\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    const chanId = this._findChannel(\"level2updates\", remote_id);\n\n    this._sendUnsubscribe(chanId);\n  }\n\n  _sendSubLevel3Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"subscribe\",\n      channel: \"book\",\n      pair: remote_id,\n      prec: \"R0\",\n      length: \"100\"\n    }));\n  }\n\n  _sendUnsubLevel3Updates(remote_id) {\n    const chanId = this._findChannel(\"level3updates\", remote_id);\n\n    this._sendUnsubscribe(chanId);\n  }\n\n  _sendUnsubscribe(chanId) {\n    if (chanId) {\n      this._wss.send(JSON.stringify({\n        event: \"unsubscribe\",\n        chanId: chanId\n      }));\n    }\n  }\n\n  _findChannel(type, remote_id) {\n    for (const raw of Object.values(this._channels)) {\n      const chan = raw;\n\n      if (chan.pair === remote_id) {\n        if (type === \"trades\" && chan.channel === \"trades\") return chan.chanId;\n        if (type === \"level2updates\" && chan.channel === \"book\" && chan.prec !== \"R0\") return chan.chanId;\n        if (type === \"level3updates\" && chan.channel === \"book\" && chan.prec === \"R0\") return chan.chanId;\n      }\n    }\n  }\n  /**\n   * Handle heartbeat messages on each channel.\n   */\n\n\n  _onHeartbeatMessage(msg, channel) {\n    if (channel.channel === \"ticker\") {\n      let market = this._tickerSubs.get(channel.pair);\n\n      if (!market) return;\n\n      this._onTickerHeartbeat(msg, market);\n\n      return;\n    } // trades\n\n\n    if (channel.channel === \"trades\") {\n      let market = this._tradeSubs.get(channel.pair);\n\n      if (!market) return;\n\n      this._onTradeMessageHeartbeat(msg, market);\n\n      return;\n    } // level3\n\n\n    if (channel.channel === \"book\" && channel.prec === \"R0\") {\n      let market = this._level3UpdateSubs.get(channel.pair);\n\n      if (!market) return;\n\n      this._onLevel3UpdateHeartbeat(msg, market);\n\n      return;\n    } // level2\n\n\n    if (channel.channel === \"book\") {\n      let market = this._level2UpdateSubs.get(channel.pair);\n\n      if (!market) return;\n\n      this._onLevel2UpdateHeartbeat(msg, market);\n\n      return;\n    }\n  }\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw); // capture channel metadata\n\n    if (msg.event === \"subscribed\") {\n      this._channels[msg.chanId] = msg;\n      return;\n    } // process unsubscribe event\n\n\n    if (msg.event === \"unsubscribed\") {\n      this._onUnsubscribeMessage(msg);\n\n      return;\n    } // lookup channel\n\n\n    const channel = this._channels[msg[0]];\n    if (!channel) return; // handle heartbeats\n\n    if (msg[1] === \"hb\") {\n      this._onHeartbeatMessage(msg, channel);\n\n      return;\n    }\n\n    if (channel.channel === \"ticker\") {\n      const market = this._tickerSubs.get(channel.pair);\n\n      if (!market) return;\n\n      this._onTicker(msg, market);\n\n      return;\n    } // trades\n\n\n    if (channel.channel === \"trades\") {\n      const market = this._tradeSubs.get(channel.pair);\n\n      if (!market) return; // handle tradeMessageType (constructor param) filtering\n      // example trade update msg: [ 359491, 'tu' or 'te', [ 560287312, 1609712228656, 0.005, 33432 ], 6 ]\n      // note: \"tu\" means it's got the tradeId, this is delayed by 1-2 seconds and includes tradeId.\n      // \"te\" is the same but available immediately and without the tradeId\n\n      const tradeEventType = msg[1];\n\n      if (this.tradeMessageType === BitfinexTradeMessageType.All || tradeEventType === this.tradeMessageType) {\n        this._onTradeMessage(msg, market);\n      }\n\n      return;\n    } // level3\n\n\n    if (channel.channel === \"book\" && channel.prec === \"R0\") {\n      const market = this._level3UpdateSubs.get(channel.pair);\n\n      if (!market) return;\n      if (Array.isArray(msg[1][0])) this._onLevel3Snapshot(msg, market);else this._onLevel3Update(msg, market);\n      return;\n    } // level2\n\n\n    if (channel.channel === \"book\") {\n      const market = this._level2UpdateSubs.get(channel.pair);\n\n      if (!market) return;\n      if (Array.isArray(msg[1][0])) this._onLevel2Snapshot(msg, market);else this._onLevel2Update(msg, market);\n      return;\n    }\n  }\n\n  _onUnsubscribeMessage(msg) {\n    const chanId = msg.chanId;\n    const channel = this._channels[chanId];\n    if (!channel) return;\n    const marketId = channel.pair; // remove channel metadata\n\n    delete this._channels[chanId]; // remove from appropriate subscription map\n\n    if (channel.channel === \"ticker\") {\n      this._tickerSubs.delete(marketId);\n    } else if (channel.channel === \"trades\") {\n      this._tradeSubs.delete(marketId);\n    } else if (channel.channel === \"book\" && channel.prec === \"R0\") {\n      this._level3UpdateSubs.delete(marketId);\n    } else if (channel.channel === \"book\") {\n      this._level2UpdateSubs.delete(marketId);\n    }\n  }\n  /**\n   * Handle heartbeat events in the ticker channel.\n   */\n\n\n  _onTickerHeartbeat(msg, market) {\n    const sequenceId = Number(msg[2]);\n    const timestampMs = msg[3];\n    if (this.enableEmptyHeartbeatEvents === false) return; // handle heartbeat by emitting empty update w/sequenceId.\n    // heartbeat msg: [ 198655, 'hb', 3, 1610920929093 ]\n\n    let ticker = new Ticker_1.Ticker({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      timestamp: timestampMs,\n      sequenceId\n    });\n    this.emit(\"ticker\", ticker, market);\n    return;\n  }\n\n  _onTicker(msg, market) {\n    const msgBody = msg[1];\n    const sequenceId = Number(msg[2]);\n    const [bid, bidSize, ask, askSize, change, changePercent, last, volume, high, low] = msgBody;\n    const open = last + change;\n    const ticker = new Ticker_1.Ticker({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      timestamp: Date.now(),\n      sequenceId,\n      last: last.toFixed(8),\n      open: open.toFixed(8),\n      high: high.toFixed(8),\n      low: low.toFixed(8),\n      volume: volume.toFixed(8),\n      change: change.toFixed(8),\n      changePercent: changePercent.toFixed(2),\n      bid: bid.toFixed(8),\n      bidVolume: bidSize.toFixed(8),\n      ask: ask.toFixed(8),\n      askVolume: askSize.toFixed(8)\n    });\n    this.emit(\"ticker\", ticker, market);\n  }\n  /**\n   * Handle heartbeat events in the trades channel.\n   */\n\n\n  _onTradeMessageHeartbeat(msg, market) {\n    const timestampMs = msg[3];\n    const sequenceId = Number(msg[2]);\n    if (this.enableEmptyHeartbeatEvents === false) return; // handle heartbeat by emitting empty update w/sequenceId.\n    // example trade heartbeat msg: [ 198655, 'hb', 3, 1610920929093 ]\n\n    let trade = new Trade_1.Trade({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      timestamp: timestampMs,\n      sequenceId\n    });\n    this.emit(\"trade\", trade, market);\n    return;\n  }\n  /**\n   * Handle the trade history payload received when initially subscribing, which includes recent trades history.\n   * Each trade in history is emitted as its own trade event.\n   */\n\n\n  _onTradeHistoryMessage(msg, market) {\n    // handle the initial trades snapshot\n    // trade snapshot example msg:\n\n    /*\n    [\n        CHANNEL_ID,\n        [\n            [\n                ID,\n                MTS,\n                AMOUNT,\n                PRICE\n            ],\n            ...\n        ],\n        sequenceId,\n        timestampMs\n    ]\n    */\n    const sequenceId = Number(msg[2]);\n\n    for (const thisTrade of msg[1]) {\n      let [id, unix, amount, price] = thisTrade;\n      let side = amount > 0 ? \"buy\" : \"sell\";\n      price = price.toFixed(8);\n      amount = Math.abs(amount).toFixed(8);\n      let trade = new Trade_1.Trade({\n        exchange: \"Bitfinex\",\n        base: market.base,\n        quote: market.quote,\n        tradeId: id.toFixed(),\n        sequenceId,\n        unix: unix,\n        side,\n        price,\n        amount\n      });\n      this.emit(\"trade\", trade, market);\n    }\n  }\n\n  _onTradeMessage(msg, market) {\n    const isTradeHistory = Array.isArray(msg[1]);\n\n    if (isTradeHistory) {\n      this._onTradeHistoryMessage(msg, market);\n\n      return;\n    } // example msg: [ 359491, 'tu', [ 560287312, 1609712228656, 0.005, 33432 ], 6 ]\n\n\n    let [id, unix, amount, price] = msg[2];\n    const sequenceId = Number(msg[3]);\n    const side = amount > 0 ? \"buy\" : \"sell\";\n    price = price.toFixed(8);\n    amount = Math.abs(amount).toFixed(8);\n    const trade = new Trade_1.Trade({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      tradeId: id.toFixed(),\n      sequenceId,\n      unix: unix,\n      side,\n      price,\n      amount\n    });\n    this.emit(\"trade\", trade, market);\n  }\n\n  _onLevel2Snapshot(msg, market) {\n    /*\n        example msg:\n        [\n            646750,\n            [\n                [ 31115, 1, 1 ],\n                [ 31114, 1, 0.31589592 ],\n                ...\n            ],\n            1,\n            1609794291015\n        ]\n    */\n    const bids = [];\n    const asks = [];\n    const sequenceId = Number(msg[2]);\n    const timestampMs = msg[3];\n\n    for (const [price, count, size] of msg[1]) {\n      const isBid = size > 0;\n      const result = new Level2Point_1.Level2Point(price.toFixed(8), Math.abs(size).toFixed(8), count.toFixed(0));\n      if (isBid) bids.push(result);else asks.push(result);\n    }\n\n    const result = new Level2Snapshots_1.Level2Snapshot({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      timestampMs,\n      bids,\n      asks\n    });\n    this.emit(\"l2snapshot\", result, market);\n  }\n  /**\n   * Handle heartbeat events in the l2updatae channel\n   */\n\n\n  _onLevel2UpdateHeartbeat(msg, market) {\n    const sequenceId = Number(msg[2]);\n    const timestampMs = msg[3];\n    if (this.enableEmptyHeartbeatEvents === false) return; // handle heartbeat by emitting empty update w/sequenceId.\n    // heartbeat msg: [ 169546, 'hb', 17, 1610921150321 ]\n\n    let update = new Level2Update_1.Level2Update({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      timestampMs,\n      asks: [],\n      bids: []\n    });\n    this.emit(\"l2update\", update, market);\n    return;\n  }\n\n  _onLevel2Update(msg, market) {\n    // example msg: [ 646750, [ 30927, 5, 0.0908 ], 19, 1609794565952 ]\n    const [price, count, size] = msg[1];\n    const sequenceId = Number(msg[2]);\n    const timestampMs = msg[3];\n    if (!price.toFixed) return;\n    const point = new Level2Point_1.Level2Point(price.toFixed(8), Math.abs(size).toFixed(8), count.toFixed(0));\n    const asks = [];\n    const bids = [];\n    const isBid = size > 0;\n    if (isBid) bids.push(point);else asks.push(point);\n    const isDelete = count === 0;\n    if (isDelete) point.size = 0 .toFixed(8); // reset the size to 0, comes in as 1 or -1 to indicate bid/ask\n\n    const update = new Level2Update_1.Level2Update({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      timestampMs,\n      asks,\n      bids\n    });\n    this.emit(\"l2update\", update, market);\n  }\n\n  _onLevel3Snapshot(msg, market) {\n    /*\n     example msg:\n     [\n       648087,\n       [\n         [ 55888179267, 31111, 0.05 ],\n         [ 55895806791, 31111, 0.989 ],\n         ...\n       ],\n       1,\n       1609794565952\n     ]\n     */\n    const bids = [];\n    const asks = [];\n    const orders = msg[1];\n    const sequenceId = Number(msg[2]);\n    const timestampMs = msg[3];\n\n    for (const [orderId, price, size] of orders) {\n      const point = new Level3Point_1.Level3Point(orderId.toFixed(), price.toFixed(8), Math.abs(size).toFixed(8));\n      if (size > 0) bids.push(point);else asks.push(point);\n    }\n\n    const result = new Level3Snapshot_1.Level3Snapshot({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      timestampMs,\n      asks,\n      bids\n    });\n    this.emit(\"l3snapshot\", result, market);\n  }\n  /**\n   * Handle heartbeat events in the l3updatae channel\n   */\n\n\n  _onLevel3UpdateHeartbeat(msg, market) {\n    const sequenceId = Number(msg[2]);\n    const timestampMs = msg[3];\n    if (this.enableEmptyHeartbeatEvents === false) return; // handle heartbeat by emitting empty update w/sequenceId.\n    // heartbeat msg: [ 169546, 'hb', 17, 1610921150321 ]\n\n    let result = new Level3Update_1.Level3Update({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      timestampMs,\n      asks: [],\n      bids: []\n    });\n    this.emit(\"l3update\", result, market);\n  }\n\n  _onLevel3Update(msg, market) {\n    // example msg: [ 648087, [ 55895794256, 31107, 0.07799627 ], 4, 1609794565952 ]\n    const bids = [];\n    const asks = [];\n    const [orderId, price, size] = msg[1];\n    const sequenceId = Number(msg[2]);\n    const timestampMs = msg[3];\n    const point = new Level3Point_1.Level3Point(orderId.toFixed(), price.toFixed(8), Math.abs(size).toFixed(8));\n    if (size > 0) bids.push(point);else asks.push(point);\n    const result = new Level3Update_1.Level3Update({\n      exchange: \"Bitfinex\",\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      timestampMs,\n      asks,\n      bids\n    });\n    this.emit(\"l3update\", result, market);\n  }\n\n}\n\nexports.BitfinexClient = BitfinexClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/BitfinexClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nimport { BasicClient, MarketMap, SendFn } from \"../BasicClient\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { Level3Point } from \"../Level3Point\";\nimport { Level3Snapshot } from \"../Level3Snapshot\";\nimport { Level3Update } from \"../Level3Update\";\nimport { Market } from \"../Market\";\nimport { NotImplementedAsyncFn, NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\nexport enum BitfinexTradeMessageType {\n    /**\n     * Receive both execution events and updates\n     */\n    All = \"all\",\n\n    /**\n     * Receive trade events immediately at the time of execution. Events\n     * do not include the database identifier, only the sequence identifier.\n     */\n    Execution = \"te\",\n\n    /**\n     * Receive trade events that have been written to the database. These\n     * events include both the sequence identifier as well as the database\n     * identifier. These events are delayed by 1-2 seconds after the\n     * trade event.\n     */\n    Update = \"tu\",\n}\n\nexport type BitfinexClientOptions = {\n    wssPath?: string;\n    watcherMs?: number;\n    l2UpdateDepth?: number;\n    throttleL2Snapshot?: number;\n\n    /**\n     * (optional, default false). If true, emits empty events for all\n     * channels on heartbeat events which includes the sequenceId. This\n     * allows sequenceId validation by always receiving sequenceId from\n     * all heartbeat events on all channels while working w/the\n     * existing trade/ticker/orderbook event types\n     */\n    enableEmptyHeartbeatEvents?: boolean;\n\n    /**\n     * (optional, defaults to \"tu\"). One of \"tu\", \"te\", or \"all\".\n     * Determines whether to use trade channel events of type \"te\" or\n     * \"tu\", or all trade events.\n     * See https://blog.bitfinex.com/api/websocket-api-update/.\n     *\n     * If you're using sequenceIds to validate websocket messages you\n     * will want to use \"all\" to receive every sequenceId.\n     */\n    tradeMessageType?: BitfinexTradeMessageType;\n};\n\nexport class BitfinexClient extends BasicClient {\n    public l2UpdateDepth: number;\n    public enableEmptyHeartbeatEvents: boolean;\n    public tradeMessageType: BitfinexTradeMessageType;\n\n    protected _channels: any;\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedAsyncFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedAsyncFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedAsyncFn;\n\n    constructor({\n        wssPath = \"wss://api.bitfinex.com/ws/2\",\n        watcherMs,\n        l2UpdateDepth = 250,\n        enableEmptyHeartbeatEvents = false,\n        tradeMessageType = BitfinexTradeMessageType.Update,\n    }: BitfinexClientOptions = {}) {\n        super(wssPath, \"Bitfinex\", undefined, watcherMs);\n        this._channels = {};\n\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasLevel2Updates = true;\n        this.hasLevel3Updates = true;\n        this.l2UpdateDepth = l2UpdateDepth;\n        this.enableEmptyHeartbeatEvents = enableEmptyHeartbeatEvents;\n        this.tradeMessageType = tradeMessageType;\n    }\n\n    protected _onConnected() {\n        // immediately send the config event to include sequence IDs in every message\n        this._sendConfiguration();\n        super._onConnected();\n    }\n\n    /**\n     * Override the default BasicClient _unsubscribe by deferring removal\n     * of from the appropriate map until the unsubscribe event has been\n     * received.\n     *\n     * If enableEmptyHeartbeatEvents (validating sequenceIds) we need to\n     * keep receiving events from a channel after we sent the unsub event\n     * until unsubscribe is confirmed. This is because every message's\n     * sequenceId must be validated, and some may arrive between sending\n     * unsub and it being confirmed. So we dont remove from the map and\n     * will continue emitting events for this channel until they stop\n     * arriving.\n     */\n    protected _unsubscribe(market: Market, map: MarketMap, sendFn: SendFn) {\n        const remote_id = market.id;\n        if (map.has(remote_id)) {\n            if (this._wss.isConnected) {\n                sendFn(remote_id, market);\n            }\n        }\n    }\n\n    protected _sendConfiguration() {\n        // see docs for \"conf\" flags. https://docs.bitfinex.com/docs/ws-general#configuration\n        // combine multiple flags by summing their values\n        // 65536 adds a sequence ID to each message\n        // 32768 adds a Timestamp in milliseconds to each received event\n        // 131072 Enable checksum for every book iteration. Checks the top 25 entries for each side of book. Checksum is a signed int. more info https://docs.bitfinex.com/docs/ws-websocket-checksum. it's sent in its own\n        // separate event so we've disabled it\n        this._wss.send(JSON.stringify({ event: \"conf\", flags: 65536 + 32768 }));\n    }\n\n    protected _sendSubTicker(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"subscribe\",\n                channel: \"ticker\",\n                pair: remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id: string) {\n        this._sendUnsubscribe(remote_id);\n    }\n\n    protected _sendSubTrades(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"subscribe\",\n                channel: \"trades\",\n                pair: remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id: string) {\n        const chanId = this._findChannel(\"trades\", remote_id);\n        this._sendUnsubscribe(chanId);\n    }\n\n    protected _sendSubLevel2Updates(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"subscribe\",\n                channel: \"book\",\n                pair: remote_id,\n                len: String(this.l2UpdateDepth), // len must be of type string, even though it's a number\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id: string) {\n        const chanId = this._findChannel(\"level2updates\", remote_id);\n        this._sendUnsubscribe(chanId);\n    }\n\n    protected _sendSubLevel3Updates(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"subscribe\",\n                channel: \"book\",\n                pair: remote_id,\n                prec: \"R0\",\n                length: \"100\",\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel3Updates(remote_id: string) {\n        const chanId = this._findChannel(\"level3updates\", remote_id);\n        this._sendUnsubscribe(chanId);\n    }\n\n    protected _sendUnsubscribe(chanId) {\n        if (chanId) {\n            this._wss.send(\n                JSON.stringify({\n                    event: \"unsubscribe\",\n                    chanId: chanId,\n                }),\n            );\n        }\n    }\n\n    protected _findChannel(type: string, remote_id: string): string {\n        for (const raw of Object.values(this._channels)) {\n            const chan = raw as any;\n            if (chan.pair === remote_id) {\n                if (type === \"trades\" && chan.channel === \"trades\") return chan.chanId;\n                if (type === \"level2updates\" && chan.channel === \"book\" && chan.prec !== \"R0\")\n                    return chan.chanId;\n                if (type === \"level3updates\" && chan.channel === \"book\" && chan.prec === \"R0\")\n                    return chan.chanId;\n            }\n        }\n    }\n\n    /**\n     * Handle heartbeat messages on each channel.\n     */\n    protected _onHeartbeatMessage(msg: any, channel: any) {\n        if (channel.channel === \"ticker\") {\n            let market = this._tickerSubs.get(channel.pair);\n            if (!market) return;\n            this._onTickerHeartbeat(msg, market);\n            return;\n        }\n\n        // trades\n        if (channel.channel === \"trades\") {\n            let market = this._tradeSubs.get(channel.pair);\n            if (!market) return;\n            this._onTradeMessageHeartbeat(msg, market);\n            return;\n        }\n\n        // level3\n        if (channel.channel === \"book\" && channel.prec === \"R0\") {\n            let market = this._level3UpdateSubs.get(channel.pair);\n            if (!market) return;\n            this._onLevel3UpdateHeartbeat(msg, market);\n            return;\n        }\n\n        // level2\n        if (channel.channel === \"book\") {\n            let market = this._level2UpdateSubs.get(channel.pair);\n            if (!market) return;\n            this._onLevel2UpdateHeartbeat(msg, market);\n            return;\n        }\n    }\n\n    protected _onMessage(raw: string) {\n        const msg = JSON.parse(raw);\n\n        // capture channel metadata\n        if (msg.event === \"subscribed\") {\n            this._channels[msg.chanId] = msg;\n            return;\n        }\n\n        // process unsubscribe event\n        if (msg.event === \"unsubscribed\") {\n            this._onUnsubscribeMessage(msg);\n            return;\n        }\n\n        // lookup channel\n        const channel = this._channels[msg[0]];\n        if (!channel) return;\n\n        // handle heartbeats\n        if (msg[1] === \"hb\") {\n            this._onHeartbeatMessage(msg, channel);\n            return;\n        }\n\n        if (channel.channel === \"ticker\") {\n            const market = this._tickerSubs.get(channel.pair);\n            if (!market) return;\n\n            this._onTicker(msg, market);\n            return;\n        }\n\n        // trades\n        if (channel.channel === \"trades\") {\n            const market = this._tradeSubs.get(channel.pair);\n            if (!market) return;\n\n            // handle tradeMessageType (constructor param) filtering\n            // example trade update msg: [ 359491, 'tu' or 'te', [ 560287312, 1609712228656, 0.005, 33432 ], 6 ]\n            // note: \"tu\" means it's got the tradeId, this is delayed by 1-2 seconds and includes tradeId.\n            // \"te\" is the same but available immediately and without the tradeId\n            const tradeEventType = msg[1];\n            if (\n                this.tradeMessageType === BitfinexTradeMessageType.All ||\n                tradeEventType === this.tradeMessageType\n            ) {\n                this._onTradeMessage(msg, market);\n            }\n            return;\n        }\n\n        // level3\n        if (channel.channel === \"book\" && channel.prec === \"R0\") {\n            const market = this._level3UpdateSubs.get(channel.pair);\n            if (!market) return;\n\n            if (Array.isArray(msg[1][0])) this._onLevel3Snapshot(msg, market);\n            else this._onLevel3Update(msg, market);\n            return;\n        }\n\n        // level2\n        if (channel.channel === \"book\") {\n            const market = this._level2UpdateSubs.get(channel.pair);\n            if (!market) return;\n            if (Array.isArray(msg[1][0])) this._onLevel2Snapshot(msg, market);\n            else this._onLevel2Update(msg, market);\n            return;\n        }\n    }\n\n    protected _onUnsubscribeMessage(msg: any) {\n        const chanId = msg.chanId;\n        const channel = this._channels[chanId];\n        if (!channel) return;\n\n        const marketId = channel.pair;\n\n        // remove channel metadata\n        delete this._channels[chanId];\n\n        // remove from appropriate subscription map\n        if (channel.channel === \"ticker\") {\n            this._tickerSubs.delete(marketId);\n        } else if (channel.channel === \"trades\") {\n            this._tradeSubs.delete(marketId);\n        } else if (channel.channel === \"book\" && channel.prec === \"R0\") {\n            this._level3UpdateSubs.delete(marketId);\n        } else if (channel.channel === \"book\") {\n            this._level2UpdateSubs.delete(marketId);\n        }\n    }\n\n    /**\n     * Handle heartbeat events in the ticker channel.\n     */\n    protected _onTickerHeartbeat(msg: any, market: Market) {\n        const sequenceId = Number(msg[2]);\n        const timestampMs = msg[3];\n        if (this.enableEmptyHeartbeatEvents === false) return;\n        // handle heartbeat by emitting empty update w/sequenceId.\n        // heartbeat msg: [ 198655, 'hb', 3, 1610920929093 ]\n        let ticker = new Ticker({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            timestamp: timestampMs,\n            sequenceId,\n        });\n        this.emit(\"ticker\", ticker, market);\n        return;\n    }\n\n    protected _onTicker(msg: any, market: Market) {\n        const msgBody = msg[1];\n        const sequenceId = Number(msg[2]);\n        const [bid, bidSize, ask, askSize, change, changePercent, last, volume, high, low] =\n            msgBody;\n        const open = last + change;\n        const ticker = new Ticker({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            timestamp: Date.now(),\n            sequenceId,\n            last: last.toFixed(8),\n            open: open.toFixed(8),\n            high: high.toFixed(8),\n            low: low.toFixed(8),\n            volume: volume.toFixed(8),\n            change: change.toFixed(8),\n            changePercent: changePercent.toFixed(2),\n            bid: bid.toFixed(8),\n            bidVolume: bidSize.toFixed(8),\n            ask: ask.toFixed(8),\n            askVolume: askSize.toFixed(8),\n        });\n        this.emit(\"ticker\", ticker, market);\n    }\n\n    /**\n     * Handle heartbeat events in the trades channel.\n     */\n    protected _onTradeMessageHeartbeat(msg: any, market: Market) {\n        const timestampMs = msg[3];\n        const sequenceId = Number(msg[2]);\n        if (this.enableEmptyHeartbeatEvents === false) return;\n        // handle heartbeat by emitting empty update w/sequenceId.\n        // example trade heartbeat msg: [ 198655, 'hb', 3, 1610920929093 ]\n        let trade = new Trade({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            timestamp: timestampMs,\n            sequenceId,\n        });\n        this.emit(\"trade\", trade, market);\n        return;\n    }\n    /**\n     * Handle the trade history payload received when initially subscribing, which includes recent trades history.\n     * Each trade in history is emitted as its own trade event.\n     */\n    protected _onTradeHistoryMessage(msg: any, market: Market) {\n        // handle the initial trades snapshot\n        // trade snapshot example msg:\n        /*\n        [\n            CHANNEL_ID,\n            [\n                [\n                    ID,\n                    MTS,\n                    AMOUNT,\n                    PRICE\n                ],\n                ...\n            ],\n            sequenceId,\n            timestampMs\n        ]\n        */\n        const sequenceId = Number(msg[2]);\n        for (const thisTrade of msg[1]) {\n            let [id, unix, amount, price] = thisTrade;\n\n            let side = amount > 0 ? \"buy\" : \"sell\";\n            price = price.toFixed(8);\n            amount = Math.abs(amount).toFixed(8);\n            let trade = new Trade({\n                exchange: \"Bitfinex\",\n                base: market.base,\n                quote: market.quote,\n                tradeId: id.toFixed(),\n                sequenceId,\n                unix: unix,\n                side,\n                price,\n                amount,\n            });\n            this.emit(\"trade\", trade, market);\n        }\n    }\n\n    protected _onTradeMessage(msg: any, market: Market) {\n        const isTradeHistory = Array.isArray(msg[1]);\n        if (isTradeHistory) {\n            this._onTradeHistoryMessage(msg, market);\n            return;\n        }\n        // example msg: [ 359491, 'tu', [ 560287312, 1609712228656, 0.005, 33432 ], 6 ]\n        let [id, unix, amount, price] = msg[2];\n        const sequenceId = Number(msg[3]);\n\n        const side = amount > 0 ? \"buy\" : \"sell\";\n        price = price.toFixed(8);\n        amount = Math.abs(amount).toFixed(8);\n        const trade = new Trade({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            tradeId: id.toFixed(),\n            sequenceId,\n            unix: unix,\n            side,\n            price,\n            amount,\n        });\n        this.emit(\"trade\", trade, market);\n    }\n\n    protected _onLevel2Snapshot(msg: any, market: Market) {\n        /*\n            example msg:\n            [\n                646750,\n                [\n                    [ 31115, 1, 1 ],\n                    [ 31114, 1, 0.31589592 ],\n                    ...\n                ],\n                1,\n                1609794291015\n            ]\n        */\n        const bids = [];\n        const asks = [];\n        const sequenceId = Number(msg[2]);\n        const timestampMs = msg[3];\n        for (const [price, count, size] of msg[1]) {\n            const isBid = size > 0;\n            const result = new Level2Point(\n                price.toFixed(8),\n                Math.abs(size).toFixed(8),\n                count.toFixed(0),\n            );\n            if (isBid) bids.push(result);\n            else asks.push(result);\n        }\n        const result = new Level2Snapshot({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            timestampMs,\n            bids,\n            asks,\n        });\n        this.emit(\"l2snapshot\", result, market);\n    }\n\n    /**\n     * Handle heartbeat events in the l2updatae channel\n     */\n    protected _onLevel2UpdateHeartbeat(msg: any, market: Market) {\n        const sequenceId = Number(msg[2]);\n        const timestampMs = msg[3];\n        if (this.enableEmptyHeartbeatEvents === false) return;\n        // handle heartbeat by emitting empty update w/sequenceId.\n        // heartbeat msg: [ 169546, 'hb', 17, 1610921150321 ]\n        let update = new Level2Update({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            timestampMs,\n            asks: [],\n            bids: [],\n        });\n        this.emit(\"l2update\", update, market);\n        return;\n    }\n\n    protected _onLevel2Update(msg, market) {\n        // example msg: [ 646750, [ 30927, 5, 0.0908 ], 19, 1609794565952 ]\n        const [price, count, size] = msg[1];\n        const sequenceId = Number(msg[2]);\n        const timestampMs = msg[3];\n\n        if (!price.toFixed) return;\n        const point = new Level2Point(\n            price.toFixed(8),\n            Math.abs(size).toFixed(8),\n            count.toFixed(0),\n        );\n        const asks = [];\n        const bids = [];\n\n        const isBid = size > 0;\n        if (isBid) bids.push(point);\n        else asks.push(point);\n\n        const isDelete = count === 0;\n        if (isDelete) (point as any).size = (0).toFixed(8); // reset the size to 0, comes in as 1 or -1 to indicate bid/ask\n        const update = new Level2Update({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            timestampMs,\n            asks,\n            bids,\n        });\n        this.emit(\"l2update\", update, market);\n    }\n\n    protected _onLevel3Snapshot(msg, market) {\n        /*\n         example msg:\n         [\n           648087,\n           [\n             [ 55888179267, 31111, 0.05 ],\n             [ 55895806791, 31111, 0.989 ],\n             ...\n           ],\n           1,\n           1609794565952\n         ]\n         */\n        const bids = [];\n        const asks = [];\n\n        const orders = msg[1];\n        const sequenceId = Number(msg[2]);\n        const timestampMs = msg[3];\n\n        for (const [orderId, price, size] of orders) {\n            const point = new Level3Point(\n                orderId.toFixed(),\n                price.toFixed(8),\n                Math.abs(size).toFixed(8),\n            );\n            if (size > 0) bids.push(point);\n            else asks.push(point);\n        }\n        const result = new Level3Snapshot({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            timestampMs,\n            asks,\n            bids,\n        });\n        this.emit(\"l3snapshot\", result, market);\n    }\n\n    /**\n     * Handle heartbeat events in the l3updatae channel\n     */\n    protected _onLevel3UpdateHeartbeat(msg: any, market: Market) {\n        const sequenceId = Number(msg[2]);\n        const timestampMs = msg[3];\n        if (this.enableEmptyHeartbeatEvents === false) return;\n        // handle heartbeat by emitting empty update w/sequenceId.\n        // heartbeat msg: [ 169546, 'hb', 17, 1610921150321 ]\n        let result = new Level3Update({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            timestampMs,\n            asks: [],\n            bids: [],\n        });\n        this.emit(\"l3update\", result, market);\n    }\n\n    protected _onLevel3Update(msg, market) {\n        // example msg: [ 648087, [ 55895794256, 31107, 0.07799627 ], 4, 1609794565952 ]\n        const bids = [];\n        const asks = [];\n\n        const [orderId, price, size] = msg[1];\n        const sequenceId = Number(msg[2]);\n        const timestampMs = msg[3];\n\n        const point = new Level3Point(\n            orderId.toFixed(),\n            price.toFixed(8),\n            Math.abs(size).toFixed(8),\n        );\n        if (size > 0) bids.push(point);\n        else asks.push(point);\n\n        const result = new Level3Update({\n            exchange: \"Bitfinex\",\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            timestampMs,\n            asks,\n            bids,\n        });\n        this.emit(\"l3update\", result, market);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}