{"ast":null,"code":"var _jsxFileName = \"/Users/Derek/workspace/crypto-visualizer-wip/src/App.tsx\";\nimport './App.css';\nimport Canvas from './components/Canvas/Canvas';\nimport Menu from './components/Menu/Menu';\nimport TransactionBubble from './components/TransactionBubble/TransactionBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  // Initiate WebSocket connection\n  // const wsBase = process.env.REACT_APP_WS_BASE_URL\n  // const apiKey = process.env.REACT_APP_API_KEY\n  // const {\n  //   lastMessage,\n  //   sendMessage,\n  //   readyState\n  // } = useWebSocket(`${wsBase}?api_key=${apiKey}`)\n  // Respond to new messages coming in from the data provider\n  // useEffect(() => {\n  //   if (lastMessage !== null) {\n  //     const data = JSON.parse(lastMessage.data)\n  //     // If the welcome message is received, the app is ready\n  //     // to request trade updates over the socket\n  //     // e.g. BTC-USD on Coinbase\n  //     if (data?.MESSAGE === 'STREAMERWELCOME') {\n  //       console.log('subscribing to channel...')\n  //       var subRequest = {\n  //         \"action\": \"SubAdd\",\n  //         \"subs\": [\"0~Coinbase~BTC~USD\"]\n  //       };\n  //       sendMessage(JSON.stringify(subRequest))\n  //     }\n  //     // If the app receives a trade update,\n  //     // create a Transaction and log it to the console for now\n  //     else if (data?.TYPE === '0') {\n  //       const transaction: Transaction = {\n  //         exchange: data.M,\n  //         coin: data.FSYM,\n  //         price: data.P,\n  //         amount: data.Q\n  //       }\n  //       console.log(`${transaction.exchange}: ${transaction.amount} ${transaction.coin} for $${transaction.price}`);\n  //     }\n  //   }\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [lastMessage])\n  // // React to the state of the WebSocket connection\n  // // and just log it to the console for now\n  // useEffect(() => {\n  //   console.log('Connection is', readyState === ReadyState.OPEN ? 'ACTIVE' : 'INACTIVE')\n  // }, [readyState])\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionBubble, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer-wip/src/App.tsx"],"names":["Canvas","Menu","TransactionBubble","App"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,iBAAP,MAA8B,kDAA9B;;;;AAKA,SAASC,GAAT,GAAe;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAOD;;KAzDQA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Canvas from './components/Canvas/Canvas';\nimport Menu from './components/Menu/Menu';\nimport TransactionBubble from './components/TransactionBubble/TransactionBubble';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { useEffect } from 'react';\nimport { Transaction } from './models/transaction';\n\nfunction App() {\n  // Initiate WebSocket connection\n  // const wsBase = process.env.REACT_APP_WS_BASE_URL\n  // const apiKey = process.env.REACT_APP_API_KEY\n  // const {\n  //   lastMessage,\n  //   sendMessage,\n  //   readyState\n  // } = useWebSocket(`${wsBase}?api_key=${apiKey}`)\n  \n  // Respond to new messages coming in from the data provider\n  // useEffect(() => {\n  //   if (lastMessage !== null) {\n  //     const data = JSON.parse(lastMessage.data)\n\n  //     // If the welcome message is received, the app is ready\n  //     // to request trade updates over the socket\n  //     // e.g. BTC-USD on Coinbase\n  //     if (data?.MESSAGE === 'STREAMERWELCOME') {\n  //       console.log('subscribing to channel...')\n  //       var subRequest = {\n  //         \"action\": \"SubAdd\",\n  //         \"subs\": [\"0~Coinbase~BTC~USD\"]\n  //       };\n  //       sendMessage(JSON.stringify(subRequest))\n\n  //     }\n      \n  //     // If the app receives a trade update,\n  //     // create a Transaction and log it to the console for now\n  //     else if (data?.TYPE === '0') {\n  //       const transaction: Transaction = {\n  //         exchange: data.M,\n  //         coin: data.FSYM,\n  //         price: data.P,\n  //         amount: data.Q\n  //       }\n  //       console.log(`${transaction.exchange}: ${transaction.amount} ${transaction.coin} for $${transaction.price}`);\n  //     }\n  //   }\n\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [lastMessage])\n\n  // // React to the state of the WebSocket connection\n  // // and just log it to the console for now\n  // useEffect(() => {\n  //   console.log('Connection is', readyState === ReadyState.OPEN ? 'ACTIVE' : 'INACTIVE')\n  // }, [readyState])\n  \n  return (\n    <>\n      <Canvas />\n      <Menu />\n      <TransactionBubble />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}