{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hs256 = void 0;\n\nconst crypto_1 = require(\"crypto\");\n\nfunction base64Encode(value) {\n  let buffer;\n\n  if (Buffer.isBuffer(value)) {\n    buffer = value;\n  } else if (typeof value === \"object\") {\n    buffer = Buffer.from(JSON.stringify(value));\n  } else if (typeof value === \"string\") {\n    buffer = Buffer.from(value);\n  }\n\n  return buffer.toString(\"base64\");\n}\n\nfunction base64UrlEncode(value) {\n  return base64Encode(value).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n\nfunction hmacSign(algorithm, secret, data) {\n  const hmac = (0, crypto_1.createHmac)(algorithm, secret);\n  hmac.update(data);\n  return hmac.digest();\n}\n\nfunction hs256(payload, secret) {\n  const encHeader = base64UrlEncode({\n    alg: \"HS256\",\n    typ: \"JWT\"\n  });\n  const encPayload = base64UrlEncode(payload);\n  const sig = hmacSign(\"sha256\", secret, encHeader + \".\" + encPayload);\n  const encSig = base64UrlEncode(sig);\n  return encHeader + \".\" + encPayload + \".\" + encSig;\n}\n\nexports.hs256 = hs256;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/Jwt.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,SAAS,YAAT,CAAsB,KAAtB,EAAkD;AAC9C,MAAI,MAAJ;;AACA,MAAI,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAJ,EAA4B;AACxB,IAAA,MAAM,GAAG,KAAT;AACH,GAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAClC,IAAA,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,SAAL,CAAe,KAAf,CAAZ,CAAT;AACH,GAFM,MAEA,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAClC,IAAA,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAT;AACH;;AACD,SAAO,MAAM,CAAC,QAAP,CAAgB,QAAhB,CAAP;AACH;;AAED,SAAS,eAAT,CAAyB,KAAzB,EAAqD;AACjD,SAAO,YAAY,CAAC,KAAD,CAAZ,CAAoB,OAApB,CAA4B,KAA5B,EAAmC,GAAnC,EAAwC,OAAxC,CAAgD,KAAhD,EAAuD,GAAvD,EAA4D,OAA5D,CAAoE,IAApE,EAA0E,EAA1E,CAAP;AACH;;AAED,SAAS,QAAT,CAAkB,SAAlB,EAAqC,MAArC,EAAqD,IAArD,EAAiE;AAC7D,QAAM,IAAI,GAAG,CAAA,GAAA,QAAA,CAAA,UAAA,EAAW,SAAX,EAAsB,MAAtB,CAAb;AACA,EAAA,IAAI,CAAC,MAAL,CAAY,IAAZ;AACA,SAAO,IAAI,CAAC,MAAL,EAAP;AACH;;AAED,SAAgB,KAAhB,CAAsB,OAAtB,EAAoC,MAApC,EAAkD;AAC9C,QAAM,SAAS,GAAG,eAAe,CAAC;AAAE,IAAA,GAAG,EAAE,OAAP;AAAgB,IAAA,GAAG,EAAE;AAArB,GAAD,CAAjC;AACA,QAAM,UAAU,GAAG,eAAe,CAAC,OAAD,CAAlC;AACA,QAAM,GAAG,GAAG,QAAQ,CAAC,QAAD,EAAW,MAAX,EAAmB,SAAS,GAAG,GAAZ,GAAkB,UAArC,CAApB;AACA,QAAM,MAAM,GAAG,eAAe,CAAC,GAAD,CAA9B;AACA,SAAO,SAAS,GAAG,GAAZ,GAAkB,UAAlB,GAA+B,GAA/B,GAAqC,MAA5C;AACH;;AAND,OAAA,CAAA,KAAA,GAAA,KAAA","sourcesContent":["import { createHmac } from \"crypto\";\n\nfunction base64Encode(value: Buffer | string | any): string {\n    let buffer: Buffer;\n    if (Buffer.isBuffer(value)) {\n        buffer = value;\n    } else if (typeof value === \"object\") {\n        buffer = Buffer.from(JSON.stringify(value));\n    } else if (typeof value === \"string\") {\n        buffer = Buffer.from(value);\n    }\n    return buffer.toString(\"base64\");\n}\n\nfunction base64UrlEncode(value: Buffer | string | any): string {\n    return base64Encode(value).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n\nfunction hmacSign(algorithm: string, secret: string, data: string): Buffer {\n    const hmac = createHmac(algorithm, secret);\n    hmac.update(data);\n    return hmac.digest();\n}\n\nexport function hs256(payload: any, secret: string): string {\n    const encHeader = base64UrlEncode({ alg: \"HS256\", typ: \"JWT\" });\n    const encPayload = base64UrlEncode(payload);\n    const sig = hmacSign(\"sha256\", secret, encHeader + \".\" + encPayload);\n    const encSig = base64UrlEncode(sig);\n    return encHeader + \".\" + encPayload + \".\" + encSig;\n}\n"]},"metadata":{},"sourceType":"script"}