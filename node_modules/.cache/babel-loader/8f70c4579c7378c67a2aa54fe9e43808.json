{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OkexClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-implied-eval */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Candle_1 = require(\"../Candle\");\n\nconst CandlePeriod_1 = require(\"../CandlePeriod\");\n\nconst Throttle_1 = require(\"../flowcontrol/Throttle\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nconst zlib = __importStar(require(\"../ZlibUtils\"));\n\nconst pongBuffer = Buffer.from(\"pong\");\n/**\n * Implements OKEx V3 WebSocket API as defined in\n * https://www.okex.com/docs/en/#spot_ws-general\n *\n * Limits:\n *    1 connection / second\n *    240 subscriptions / hour\n *\n * Connection will disconnect after 30 seconds of silence\n * it is recommended to send a ping message that contains the\n * message \"ping\".\n *\n * Order book depth includes maintenance of a checksum for the\n * first 25 values in the orderbook. Each update includes a crc32\n * checksum that can be run to validate that your order book\n * matches the server. If the order book does not match you should\n * issue a reconnect.\n *\n * Refer to: https://www.okex.com/docs/en/#spot_ws-checksum\n */\n\nclass OkexClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://real.okex.com:8443/ws/v3\",\n      watcherMs,\n      sendThrottleMs = 20\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"OKEx\", undefined, watcherMs);\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.candlePeriod = CandlePeriod_1.CandlePeriod._1m;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasCandles = true;\n    this.hasLevel2Snapshots = true;\n    this.hasLevel2Updates = true;\n    this._sendMessage = (0, Throttle_1.throttle)(this.__sendMessage.bind(this), sendThrottleMs);\n  }\n\n  _beforeClose() {\n    this._sendMessage.cancel();\n  }\n\n  _beforeConnect() {\n    this._wss.on(\"connected\", this._startPing.bind(this));\n\n    this._wss.on(\"disconnected\", this._stopPing.bind(this));\n\n    this._wss.on(\"closed\", this._stopPing.bind(this));\n  }\n\n  _startPing() {\n    clearInterval(this._pingInterval);\n    this._pingInterval = setInterval(this._sendPing.bind(this), 15000);\n  }\n\n  _stopPing() {\n    clearInterval(this._pingInterval);\n  }\n\n  _sendPing() {\n    if (this._wss) {\n      this._wss.send(\"ping\");\n    }\n  }\n  /**\n   * Constructs a market argument in a backwards compatible manner where\n   * the default is a spot market.\n   */\n\n\n  _marketArg(method, market) {\n    const type = (market.type || \"spot\").toLowerCase();\n    return `${type.toLowerCase()}/${method}:${market.id}`;\n  }\n  /**\n   * Gets the exchanges interpretation of the candle period\n   */\n\n\n  _candlePeriod(period) {\n    switch (period) {\n      case CandlePeriod_1.CandlePeriod._1m:\n        return \"60s\";\n\n      case CandlePeriod_1.CandlePeriod._3m:\n        return \"180s\";\n\n      case CandlePeriod_1.CandlePeriod._5m:\n        return \"300s\";\n\n      case CandlePeriod_1.CandlePeriod._15m:\n        return \"900s\";\n\n      case CandlePeriod_1.CandlePeriod._30m:\n        return \"1800s\";\n\n      case CandlePeriod_1.CandlePeriod._1h:\n        return \"3600s\";\n\n      case CandlePeriod_1.CandlePeriod._2h:\n        return \"7200s\";\n\n      case CandlePeriod_1.CandlePeriod._4h:\n        return \"14400s\";\n\n      case CandlePeriod_1.CandlePeriod._6h:\n        return \"21600s\";\n\n      case CandlePeriod_1.CandlePeriod._12h:\n        return \"43200s\";\n\n      case CandlePeriod_1.CandlePeriod._1d:\n        return \"86400s\";\n\n      case CandlePeriod_1.CandlePeriod._1w:\n        return \"604800s\";\n    }\n  }\n\n  __sendMessage(msg) {\n    this._wss.send(msg);\n  }\n\n  _sendSubTicker(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"subscribe\",\n      args: [this._marketArg(\"ticker\", market)]\n    }));\n  }\n\n  _sendUnsubTicker(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"unsubscribe\",\n      args: [this._marketArg(\"ticker\", market)]\n    }));\n  }\n\n  _sendSubTrades(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"subscribe\",\n      args: [this._marketArg(\"trade\", market)]\n    }));\n  }\n\n  _sendUnsubTrades(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"unsubscribe\",\n      args: [this._marketArg(\"trade\", market)]\n    }));\n  }\n\n  _sendSubCandles(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"subscribe\",\n      args: [this._marketArg(\"candle\" + this._candlePeriod(this.candlePeriod), market)]\n    }));\n  }\n\n  _sendUnsubCandles(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"unsubscribe\",\n      args: [this._marketArg(\"candle\" + this._candlePeriod(this.candlePeriod), market)]\n    }));\n  }\n\n  _sendSubLevel2Snapshots(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"subscribe\",\n      args: [this._marketArg(\"depth5\", market)]\n    }));\n  }\n\n  _sendUnsubLevel2Snapshots(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"unsubscribe\",\n      args: [this._marketArg(\"depth5\", market)]\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"subscribe\",\n      args: [this._marketArg(\"depth_l2_tbt\", market)]\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id, market) {\n    this._sendMessage(JSON.stringify({\n      op: \"unsubscribe\",\n      args: [this._marketArg(\"depth_l2_tbt\", market)]\n    }));\n  }\n\n  _onMessage(compressed) {\n    zlib.inflateRaw(compressed, (err, raw) => {\n      if (err) {\n        this.emit(\"error\", err);\n        return;\n      } // ignore pongs\n\n\n      if (raw.equals(pongBuffer)) {\n        return;\n      } // process JSON message\n\n\n      try {\n        const msg = JSON.parse(raw.toString());\n\n        this._processsMessage(msg);\n      } catch (ex) {\n        this.emit(\"error\", ex);\n      }\n    });\n  }\n\n  _processsMessage(msg) {\n    // clear semaphore on subscription event reply\n    if (msg.event === \"subscribe\") {\n      return;\n    } // ignore unsubscribe\n\n\n    if (msg.event === \"unsubscribe\") {\n      return;\n    } // prevent failed messages from\n\n\n    if (!msg.data) {\n      // eslint-disable-next-line no-console\n      console.warn(\"warn: failure response\", JSON.stringify(msg));\n      return;\n    } // tickers\n\n\n    if (msg.table.match(/ticker/)) {\n      this._processTicker(msg);\n\n      return;\n    } // trades\n\n\n    if (msg.table.match(/trade/)) {\n      this._processTrades(msg);\n\n      return;\n    } // candles\n\n\n    if (msg.table.match(/candle/)) {\n      this._processCandles(msg);\n\n      return;\n    } // l2 snapshots\n\n\n    if (msg.table.match(/depth5/)) {\n      this._processLevel2Snapshot(msg);\n\n      return;\n    } // l2 updates\n\n\n    if (msg.table.match(/depth/)) {\n      this._processLevel2Update(msg);\n\n      return;\n    }\n  }\n  /**\n  * Process ticker messages in the format\n  { table: 'spot/ticker',\n    data:\n    [ { instrument_id: 'ETH-BTC',\n        last: '0.02181',\n        best_bid: '0.0218',\n        best_ask: '0.02181',\n        open_24h: '0.02247',\n        high_24h: '0.02262',\n        low_24h: '0.02051',\n        base_volume_24h: '379522.2418555',\n        quote_volume_24h: '8243.729793336415',\n        timestamp: '2019-07-15T17:10:55.671Z' } ] }\n  */\n\n\n  _processTicker(msg) {\n    for (const datum of msg.data) {\n      // ensure market\n      const remoteId = datum.instrument_id;\n\n      const market = this._tickerSubs.get(remoteId);\n\n      if (!market) continue; // construct and emit ticker\n\n      const ticker = this._constructTicker(datum, market);\n\n      this.emit(\"ticker\", ticker, market);\n    }\n  }\n  /**\n  * Processes trade messages in the format\n  { table: 'spot/trade',\n    data:\n    [ { instrument_id: 'ETH-BTC',\n        price: '0.0218',\n        side: 'sell',\n        size: '1.1',\n        timestamp: '2019-07-15T17:10:56.047Z',\n        trade_id: '776432498' } ] }\n  */\n\n\n  _processTrades(msg) {\n    for (const datum of msg.data) {\n      // ensure market\n      const remoteId = datum.instrument_id;\n\n      const market = this._tradeSubs.get(remoteId);\n\n      if (!market) continue; // construct and emit trade\n\n      const trade = this._constructTrade(datum, market);\n\n      this.emit(\"trade\", trade, market);\n    }\n  }\n  /**\n  * Processes a candle message\n  {\n    \"table\": \"spot/candle60s\",\n    \"data\": [\n      {\n        \"candle\": [\n          \"2020-08-10T20:42:00.000Z\",\n          \"0.03332\",\n          \"0.03332\",\n          \"0.03331\",\n          \"0.03332\",\n          \"44.058532\"\n        ],\n        \"instrument_id\": \"ETH-BTC\"\n      }\n    ]\n  }\n  */\n\n\n  _processCandles(msg) {\n    for (const datum of msg.data) {\n      // ensure market\n      const remoteId = datum.instrument_id;\n\n      const market = this._candleSubs.get(remoteId);\n\n      if (!market) continue; // construct and emit candle\n\n      const candle = this._constructCandle(datum);\n\n      this.emit(\"candle\", candle, market);\n    }\n  }\n  /**\n  * Processes a level 2 snapshot message in the format:\n    { table: 'spot/depth5',\n      data: [{\n          asks: [ ['0.02192', '1.204054', '3' ] ],\n          bids: [ ['0.02191', '15.117671', '3' ] ],\n          instrument_id: 'ETH-BTC',\n          timestamp: '2019-07-15T16:54:42.301Z' } ] }\n  */\n\n\n  _processLevel2Snapshot(msg) {\n    for (const datum of msg.data) {\n      // ensure market\n      const remote_id = datum.instrument_id;\n\n      const market = this._level2SnapshotSubs.get(remote_id);\n\n      if (!market) return; // construct snapshot\n\n      const snapshot = this._constructLevel2Snapshot(datum, market);\n\n      this.emit(\"l2snapshot\", snapshot, market);\n    }\n  }\n  /**\n  * Processes a level 2 update message in one of two formats.\n  * The first message received is the \"partial\" orderbook and contains\n  * 200 records in it.\n  *\n  { table: 'spot/depth',\n        action: 'partial',\n        data:\n          [ { instrument_id: 'ETH-BTC',\n              asks: [Array],\n              bids: [Array],\n              timestamp: '2019-07-15T17:18:31.737Z',\n              checksum: 723501244 } ] }\n  *\n  * Subsequent calls will include the updates stream for changes to\n  * the order book:\n  *\n    { table: 'spot/depth',\n    action: 'update',\n    data:\n      [ { instrument_id: 'ETH-BTC',\n          asks: [Array],\n          bids: [Array],\n          timestamp: '2019-07-15T17:18:32.289Z',\n          checksum: 680530848 } ] }\n  */\n\n\n  _processLevel2Update(msg) {\n    const action = msg.action;\n\n    for (const datum of msg.data) {\n      // ensure market\n      const remote_id = datum.instrument_id;\n\n      const market = this._level2UpdateSubs.get(remote_id);\n\n      if (!market) continue; // handle updates\n\n      if (action === \"partial\") {\n        const snapshot = this._constructLevel2Snapshot(datum, market);\n\n        this.emit(\"l2snapshot\", snapshot, market);\n      } else if (action === \"update\") {\n        const update = this._constructLevel2Update(datum, market);\n\n        this.emit(\"l2update\", update, market);\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(\"Unknown action type\", msg);\n      }\n    }\n  }\n  /**\n  * Constructs a ticker from the datum in the format:\n    { instrument_id: 'ETH-BTC',\n      last: '0.02172',\n      best_bid: '0.02172',\n      best_ask: '0.02173',\n      open_24h: '0.02254',\n      high_24h: '0.02262',\n      low_24h: '0.02051',\n      base_volume_24h: '378400.064179',\n      quote_volume_24h: '8226.4437921288',\n      timestamp: '2019-07-15T16:10:40.193Z' }\n  */\n\n\n  _constructTicker(data, market) {\n    const {\n      last,\n      best_bid,\n      best_bid_size,\n      best_ask,\n      best_ask_size,\n      open_24h,\n      high_24h,\n      low_24h,\n      base_volume_24h,\n      volume_24h,\n      // found in futures\n      timestamp\n    } = data;\n    const change = parseFloat(last) - parseFloat(open_24h);\n    const changePercent = change / parseFloat(open_24h);\n    const ts = moment_1.default.utc(timestamp).valueOf();\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: ts,\n      last,\n      open: open_24h,\n      high: high_24h,\n      low: low_24h,\n      volume: base_volume_24h || volume_24h,\n      change: change.toFixed(8),\n      changePercent: changePercent.toFixed(2),\n      bid: best_bid || \"0\",\n      bidVolume: best_bid_size || \"0\",\n      ask: best_ask || \"0\",\n      askVolume: best_ask_size || \"0\"\n    });\n  }\n  /**\n  * Constructs a trade from the message datum in format:\n  { instrument_id: 'ETH-BTC',\n    price: '0.02182',\n    side: 'sell',\n    size: '0.94',\n    timestamp: '2019-07-15T16:38:02.169Z',\n    trade_id: '776370532' }\n  */\n\n\n  _constructTrade(datum, market) {\n    const {\n      price,\n      side,\n      size,\n      timestamp,\n      trade_id,\n      qty\n    } = datum;\n    const ts = moment_1.default.utc(timestamp).valueOf();\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: trade_id,\n      side,\n      unix: ts,\n      price,\n      amount: size || qty\n    });\n  }\n  /**\n  * Constructs a candle for the market\n    {\n      \"candle\": [\n        \"2020-08-10T20:42:00.000Z\",\n        \"0.03332\",\n        \"0.03332\",\n        \"0.03331\",\n        \"0.03332\",\n        \"44.058532\"\n      ],\n      \"instrument_id\": \"ETH-BTC\"\n    }\n  * @param {*} datum\n  */\n\n\n  _constructCandle(datum) {\n    const [datetime, open, high, low, close, volume] = datum.candle;\n    const ts = moment_1.default.utc(datetime).valueOf();\n    return new Candle_1.Candle(ts, open, high, low, close, volume);\n  }\n  /**\n  * Constructs a snapshot message from the datum in a\n  * snapshot message data property. Datum in the format:\n  *\n    { instrument_id: 'ETH-BTC',\n      asks: [ ['0.02192', '1.204054', '3' ] ],\n      bids: [ ['0.02191', '15.117671', '3' ] ],\n      timestamp: '2019-07-15T16:54:42.301Z' }\n  *\n  * The snapshot may also come from an update, in which case we need\n  * to include the checksum\n  *\n    { instrument_id: 'ETH-BTC',\n      asks: [ ['0.02192', '1.204054', '3' ] ],\n      bids: [ ['0.02191', '15.117671', '3' ] ],\n      timestamp: '2019-07-15T17:18:31.737Z',\n      checksum: 723501244 }\n  */\n\n\n  _constructLevel2Snapshot(datum, market) {\n    const asks = datum.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1], p[2]));\n    const bids = datum.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1], p[2]));\n    const ts = moment_1.default.utc(datum.timestamp).valueOf();\n    const checksum = datum.checksum;\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestampMs: ts,\n      asks,\n      bids,\n      checksum\n    });\n  }\n  /**\n  * Constructs an update message from the datum in the update\n  * stream. Datum is in the format:\n  { instrument_id: 'ETH-BTC',\n    asks: [ ['0.02192', '1.204054', '3' ] ],\n    bids: [ ['0.02191', '15.117671', '3' ] ],\n    timestamp: '2019-07-15T17:18:32.289Z',\n    checksum: 680530848 }\n  */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n\n\n  _constructLevel2Update(datum, market) {\n    const asks = datum.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1], p[3]));\n    const bids = datum.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1], p[3]));\n    const ts = moment_1.default.utc(datum.timestamp).valueOf();\n    const checksum = datum.checksum;\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestampMs: ts,\n      asks,\n      bids,\n      checksum\n    });\n  }\n\n}\n\nexports.OkexClient = OkexClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/OkexClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-implied-eval */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport moment from \"moment\";\nimport { BasicClient } from \"../BasicClient\";\nimport { Candle } from \"../Candle\";\nimport { CandlePeriod } from \"../CandlePeriod\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { CancelableFn } from \"../flowcontrol/Fn\";\nimport { throttle } from \"../flowcontrol/Throttle\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { Market } from \"../Market\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\nimport * as zlib from \"../ZlibUtils\";\n\nconst pongBuffer = Buffer.from(\"pong\");\n\nexport type OkexClientOptions = ClientOptions & {\n    sendThrottleMs?: number;\n};\n\n/**\n * Implements OKEx V3 WebSocket API as defined in\n * https://www.okex.com/docs/en/#spot_ws-general\n *\n * Limits:\n *    1 connection / second\n *    240 subscriptions / hour\n *\n * Connection will disconnect after 30 seconds of silence\n * it is recommended to send a ping message that contains the\n * message \"ping\".\n *\n * Order book depth includes maintenance of a checksum for the\n * first 25 values in the orderbook. Each update includes a crc32\n * checksum that can be run to validate that your order book\n * matches the server. If the order book does not match you should\n * issue a reconnect.\n *\n * Refer to: https://www.okex.com/docs/en/#spot_ws-checksum\n */\nexport class OkexClient extends BasicClient {\n    public candlePeriod: CandlePeriod;\n\n    protected _sendMessage: CancelableFn;\n    protected _pingInterval: NodeJS.Timeout;\n\n    constructor({\n        wssPath = \"wss://real.okex.com:8443/ws/v3\",\n        watcherMs,\n        sendThrottleMs = 20,\n    }: OkexClientOptions = {}) {\n        super(wssPath, \"OKEx\", undefined, watcherMs);\n        this.candlePeriod = CandlePeriod._1m;\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasCandles = true;\n        this.hasLevel2Snapshots = true;\n        this.hasLevel2Updates = true;\n        this._sendMessage = throttle(this.__sendMessage.bind(this), sendThrottleMs);\n    }\n\n    protected _beforeClose() {\n        this._sendMessage.cancel();\n    }\n\n    protected _beforeConnect() {\n        this._wss.on(\"connected\", this._startPing.bind(this));\n        this._wss.on(\"disconnected\", this._stopPing.bind(this));\n        this._wss.on(\"closed\", this._stopPing.bind(this));\n    }\n\n    protected _startPing() {\n        clearInterval(this._pingInterval);\n        this._pingInterval = setInterval(this._sendPing.bind(this), 15000);\n    }\n\n    protected _stopPing() {\n        clearInterval(this._pingInterval);\n    }\n\n    protected _sendPing() {\n        if (this._wss) {\n            this._wss.send(\"ping\");\n        }\n    }\n\n    /**\n     * Constructs a market argument in a backwards compatible manner where\n     * the default is a spot market.\n     */\n    protected _marketArg(method: string, market: Market) {\n        const type = (market.type || \"spot\").toLowerCase();\n        return `${type.toLowerCase()}/${method}:${market.id}`;\n    }\n\n    /**\n     * Gets the exchanges interpretation of the candle period\n     */\n    protected _candlePeriod(period: CandlePeriod) {\n        switch (period) {\n            case CandlePeriod._1m:\n                return \"60s\";\n            case CandlePeriod._3m:\n                return \"180s\";\n            case CandlePeriod._5m:\n                return \"300s\";\n            case CandlePeriod._15m:\n                return \"900s\";\n            case CandlePeriod._30m:\n                return \"1800s\";\n            case CandlePeriod._1h:\n                return \"3600s\";\n            case CandlePeriod._2h:\n                return \"7200s\";\n            case CandlePeriod._4h:\n                return \"14400s\";\n            case CandlePeriod._6h:\n                return \"21600s\";\n            case CandlePeriod._12h:\n                return \"43200s\";\n            case CandlePeriod._1d:\n                return \"86400s\";\n            case CandlePeriod._1w:\n                return \"604800s\";\n        }\n    }\n\n    protected __sendMessage(msg) {\n        this._wss.send(msg);\n    }\n\n    protected _sendSubTicker(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"subscribe\",\n                args: [this._marketArg(\"ticker\", market)],\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"unsubscribe\",\n                args: [this._marketArg(\"ticker\", market)],\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"subscribe\",\n                args: [this._marketArg(\"trade\", market)],\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"unsubscribe\",\n                args: [this._marketArg(\"trade\", market)],\n            }),\n        );\n    }\n\n    protected _sendSubCandles(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"subscribe\",\n                args: [this._marketArg(\"candle\" + this._candlePeriod(this.candlePeriod), market)],\n            }),\n        );\n    }\n\n    protected _sendUnsubCandles(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"unsubscribe\",\n                args: [this._marketArg(\"candle\" + this._candlePeriod(this.candlePeriod), market)],\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Snapshots(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"subscribe\",\n                args: [this._marketArg(\"depth5\", market)],\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Snapshots(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"unsubscribe\",\n                args: [this._marketArg(\"depth5\", market)],\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"subscribe\",\n                args: [this._marketArg(\"depth_l2_tbt\", market)],\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id, market) {\n        this._sendMessage(\n            JSON.stringify({\n                op: \"unsubscribe\",\n                args: [this._marketArg(\"depth_l2_tbt\", market)],\n            }),\n        );\n    }\n\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(compressed) {\n        zlib.inflateRaw(compressed, (err, raw) => {\n            if (err) {\n                this.emit(\"error\", err);\n                return;\n            }\n\n            // ignore pongs\n            if (raw.equals(pongBuffer)) {\n                return;\n            }\n\n            // process JSON message\n            try {\n                const msg = JSON.parse(raw.toString());\n                this._processsMessage(msg);\n            } catch (ex) {\n                this.emit(\"error\", ex);\n            }\n        });\n    }\n\n    protected _processsMessage(msg: any) {\n        // clear semaphore on subscription event reply\n        if (msg.event === \"subscribe\") {\n            return;\n        }\n\n        // ignore unsubscribe\n        if (msg.event === \"unsubscribe\") {\n            return;\n        }\n\n        // prevent failed messages from\n        if (!msg.data) {\n            // eslint-disable-next-line no-console\n            console.warn(\"warn: failure response\", JSON.stringify(msg));\n            return;\n        }\n\n        // tickers\n        if (msg.table.match(/ticker/)) {\n            this._processTicker(msg);\n            return;\n        }\n\n        // trades\n        if (msg.table.match(/trade/)) {\n            this._processTrades(msg);\n            return;\n        }\n\n        // candles\n        if (msg.table.match(/candle/)) {\n            this._processCandles(msg);\n            return;\n        }\n\n        // l2 snapshots\n        if (msg.table.match(/depth5/)) {\n            this._processLevel2Snapshot(msg);\n            return;\n        }\n\n        // l2 updates\n        if (msg.table.match(/depth/)) {\n            this._processLevel2Update(msg);\n            return;\n        }\n    }\n\n    /**\n   * Process ticker messages in the format\n    { table: 'spot/ticker',\n      data:\n      [ { instrument_id: 'ETH-BTC',\n          last: '0.02181',\n          best_bid: '0.0218',\n          best_ask: '0.02181',\n          open_24h: '0.02247',\n          high_24h: '0.02262',\n          low_24h: '0.02051',\n          base_volume_24h: '379522.2418555',\n          quote_volume_24h: '8243.729793336415',\n          timestamp: '2019-07-15T17:10:55.671Z' } ] }\n   */\n    protected _processTicker(msg) {\n        for (const datum of msg.data) {\n            // ensure market\n            const remoteId = datum.instrument_id;\n            const market = this._tickerSubs.get(remoteId);\n            if (!market) continue;\n\n            // construct and emit ticker\n            const ticker = this._constructTicker(datum, market);\n            this.emit(\"ticker\", ticker, market);\n        }\n    }\n\n    /**\n   * Processes trade messages in the format\n    { table: 'spot/trade',\n      data:\n      [ { instrument_id: 'ETH-BTC',\n          price: '0.0218',\n          side: 'sell',\n          size: '1.1',\n          timestamp: '2019-07-15T17:10:56.047Z',\n          trade_id: '776432498' } ] }\n   */\n    protected _processTrades(msg) {\n        for (const datum of msg.data) {\n            // ensure market\n            const remoteId = datum.instrument_id;\n            const market = this._tradeSubs.get(remoteId);\n            if (!market) continue;\n\n            // construct and emit trade\n            const trade = this._constructTrade(datum, market);\n            this.emit(\"trade\", trade, market);\n        }\n    }\n\n    /**\n   * Processes a candle message\n    {\n      \"table\": \"spot/candle60s\",\n      \"data\": [\n        {\n          \"candle\": [\n            \"2020-08-10T20:42:00.000Z\",\n            \"0.03332\",\n            \"0.03332\",\n            \"0.03331\",\n            \"0.03332\",\n            \"44.058532\"\n          ],\n          \"instrument_id\": \"ETH-BTC\"\n        }\n      ]\n    }\n   */\n    protected _processCandles(msg) {\n        for (const datum of msg.data) {\n            // ensure market\n            const remoteId = datum.instrument_id;\n            const market = this._candleSubs.get(remoteId);\n            if (!market) continue;\n\n            // construct and emit candle\n            const candle = this._constructCandle(datum);\n            this.emit(\"candle\", candle, market);\n        }\n    }\n\n    /**\n   * Processes a level 2 snapshot message in the format:\n      { table: 'spot/depth5',\n        data: [{\n            asks: [ ['0.02192', '1.204054', '3' ] ],\n            bids: [ ['0.02191', '15.117671', '3' ] ],\n            instrument_id: 'ETH-BTC',\n            timestamp: '2019-07-15T16:54:42.301Z' } ] }\n   */\n    protected _processLevel2Snapshot(msg) {\n        for (const datum of msg.data) {\n            // ensure market\n            const remote_id = datum.instrument_id;\n            const market = this._level2SnapshotSubs.get(remote_id);\n            if (!market) return;\n\n            // construct snapshot\n            const snapshot = this._constructLevel2Snapshot(datum, market);\n            this.emit(\"l2snapshot\", snapshot, market);\n        }\n    }\n\n    /**\n   * Processes a level 2 update message in one of two formats.\n   * The first message received is the \"partial\" orderbook and contains\n   * 200 records in it.\n   *\n    { table: 'spot/depth',\n          action: 'partial',\n          data:\n            [ { instrument_id: 'ETH-BTC',\n                asks: [Array],\n                bids: [Array],\n                timestamp: '2019-07-15T17:18:31.737Z',\n                checksum: 723501244 } ] }\n   *\n   * Subsequent calls will include the updates stream for changes to\n   * the order book:\n   *\n      { table: 'spot/depth',\n      action: 'update',\n      data:\n        [ { instrument_id: 'ETH-BTC',\n            asks: [Array],\n            bids: [Array],\n            timestamp: '2019-07-15T17:18:32.289Z',\n            checksum: 680530848 } ] }\n   */\n    protected _processLevel2Update(msg) {\n        const action = msg.action;\n        for (const datum of msg.data) {\n            // ensure market\n            const remote_id = datum.instrument_id;\n            const market = this._level2UpdateSubs.get(remote_id);\n            if (!market) continue;\n\n            // handle updates\n            if (action === \"partial\") {\n                const snapshot = this._constructLevel2Snapshot(datum, market);\n                this.emit(\"l2snapshot\", snapshot, market);\n            } else if (action === \"update\") {\n                const update = this._constructLevel2Update(datum, market);\n                this.emit(\"l2update\", update, market);\n            } else {\n                // eslint-disable-next-line no-console\n                console.error(\"Unknown action type\", msg);\n            }\n        }\n    }\n\n    /**\n   * Constructs a ticker from the datum in the format:\n      { instrument_id: 'ETH-BTC',\n        last: '0.02172',\n        best_bid: '0.02172',\n        best_ask: '0.02173',\n        open_24h: '0.02254',\n        high_24h: '0.02262',\n        low_24h: '0.02051',\n        base_volume_24h: '378400.064179',\n        quote_volume_24h: '8226.4437921288',\n        timestamp: '2019-07-15T16:10:40.193Z' }\n   */\n    protected _constructTicker(data, market) {\n        const {\n            last,\n            best_bid,\n            best_bid_size,\n            best_ask,\n            best_ask_size,\n            open_24h,\n            high_24h,\n            low_24h,\n            base_volume_24h,\n            volume_24h, // found in futures\n            timestamp,\n        } = data;\n\n        const change = parseFloat(last) - parseFloat(open_24h);\n        const changePercent = change / parseFloat(open_24h);\n        const ts = moment.utc(timestamp).valueOf();\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: ts,\n            last,\n            open: open_24h,\n            high: high_24h,\n            low: low_24h,\n            volume: base_volume_24h || volume_24h,\n            change: change.toFixed(8),\n            changePercent: changePercent.toFixed(2),\n            bid: best_bid || \"0\",\n            bidVolume: best_bid_size || \"0\",\n            ask: best_ask || \"0\",\n            askVolume: best_ask_size || \"0\",\n        });\n    }\n\n    /**\n   * Constructs a trade from the message datum in format:\n    { instrument_id: 'ETH-BTC',\n      price: '0.02182',\n      side: 'sell',\n      size: '0.94',\n      timestamp: '2019-07-15T16:38:02.169Z',\n      trade_id: '776370532' }\n    */\n    protected _constructTrade(datum, market) {\n        const { price, side, size, timestamp, trade_id, qty } = datum;\n        const ts = moment.utc(timestamp).valueOf();\n\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: trade_id,\n            side,\n            unix: ts,\n            price,\n            amount: size || qty,\n        });\n    }\n\n    /**\n   * Constructs a candle for the market\n      {\n        \"candle\": [\n          \"2020-08-10T20:42:00.000Z\",\n          \"0.03332\",\n          \"0.03332\",\n          \"0.03331\",\n          \"0.03332\",\n          \"44.058532\"\n        ],\n        \"instrument_id\": \"ETH-BTC\"\n      }\n   * @param {*} datum\n   */\n    protected _constructCandle(datum) {\n        const [datetime, open, high, low, close, volume] = datum.candle;\n        const ts = moment.utc(datetime).valueOf();\n        return new Candle(ts, open, high, low, close, volume);\n    }\n\n    /**\n   * Constructs a snapshot message from the datum in a\n   * snapshot message data property. Datum in the format:\n   *\n      { instrument_id: 'ETH-BTC',\n        asks: [ ['0.02192', '1.204054', '3' ] ],\n        bids: [ ['0.02191', '15.117671', '3' ] ],\n        timestamp: '2019-07-15T16:54:42.301Z' }\n   *\n   * The snapshot may also come from an update, in which case we need\n   * to include the checksum\n   *\n      { instrument_id: 'ETH-BTC',\n        asks: [ ['0.02192', '1.204054', '3' ] ],\n        bids: [ ['0.02191', '15.117671', '3' ] ],\n        timestamp: '2019-07-15T17:18:31.737Z',\n        checksum: 723501244 }\n\n   */\n    protected _constructLevel2Snapshot(datum, market) {\n        const asks = datum.asks.map(p => new Level2Point(p[0], p[1], p[2]));\n        const bids = datum.bids.map(p => new Level2Point(p[0], p[1], p[2]));\n        const ts = moment.utc(datum.timestamp).valueOf();\n        const checksum = datum.checksum;\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestampMs: ts,\n            asks,\n            bids,\n            checksum,\n        });\n    }\n\n    /**\n   * Constructs an update message from the datum in the update\n   * stream. Datum is in the format:\n    { instrument_id: 'ETH-BTC',\n      asks: [ ['0.02192', '1.204054', '3' ] ],\n      bids: [ ['0.02191', '15.117671', '3' ] ],\n      timestamp: '2019-07-15T17:18:32.289Z',\n      checksum: 680530848 }\n   */\n    // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n    _constructLevel2Update(datum, market) {\n        const asks = datum.asks.map(p => new Level2Point(p[0], p[1], p[3]));\n        const bids = datum.bids.map(p => new Level2Point(p[0], p[1], p[3]));\n        const ts = moment.utc(datum.timestamp).valueOf();\n        const checksum = datum.checksum;\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestampMs: ts,\n            asks,\n            bids,\n            checksum,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}