{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DigifinexClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/unbound-method */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nconst zlib = __importStar(require(\"../ZlibUtils\"));\n/**\n * Implements the exchange according to API specifications:\n * https://github.com/DigiFinex/api/blob/master/Websocket_API_en.md\n */\n\n\nclass DigifinexClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://openapi.digifinex.com/ws/v1/\",\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"Digifinex\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasLevel2Updates = true;\n    this.id = 0;\n    this._onMessageInf = this._onMessageInf.bind(this);\n  }\n\n  _sendSubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"ticker.subscribe\",\n      params: [remote_id],\n      id: ++this.id\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"ticker.unsubscribe\",\n      params: [remote_id],\n      id: ++this.id\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"trades.subscribe\",\n      params: [remote_id],\n      id: ++this.id\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"trades.unsubscribe\",\n      params: [remote_id],\n      id: ++this.id\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"depth.subscribe\",\n      params: [remote_id],\n      id: ++this.id\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"depth.unsubscribe\",\n      params: [remote_id],\n      id: ++this.id\n    }));\n  }\n\n  _onMessage(raw) {\n    zlib.inflate(raw, this._onMessageInf);\n  }\n\n  _onMessageInf(err, raw) {\n    // handle inflate error\n    if (err) {\n      this.emit(\"error\", err);\n      return;\n    } // handle parse error\n\n\n    let msg;\n\n    try {\n      msg = JSON.parse(raw);\n    } catch (err) {\n      this.emit(\"error\", err, raw);\n      return;\n    } // handle subscription success\n\n\n    if (msg.result && msg.result.status === \"success\") {\n      return;\n    } // handle errors\n\n\n    if (msg.error) {\n      this.emit(\"error\", msg.error);\n      return;\n    } // handle ticker\n\n\n    if (msg.method === \"ticker.update\") {\n      for (const datum of msg.params) {\n        const remote_id = datum.symbol;\n\n        const market = this._tickerSubs.get(remote_id.toUpperCase()) || this._tickerSubs.get(remote_id.toLowerCase());\n\n        if (!market) continue;\n\n        const ticker = this._constructTicker(datum, market);\n\n        this.emit(\"ticker\", ticker, market);\n      }\n\n      return;\n    } // handle trades\n\n\n    if (msg.method == \"trades.update\") {\n      const remote_id = msg.params[2];\n\n      const market = this._tradeSubs.get(remote_id.toUpperCase()) || this._tradeSubs.get(remote_id.toLowerCase());\n\n      if (!market) return; // trades arrive newest first\n\n      for (const datum of msg.params[1].reverse()) {\n        const trade = this._constructTrade(datum, market);\n\n        this.emit(\"trade\", trade, market);\n      }\n\n      return;\n    } // handle updates\n\n\n    if (msg.method === \"depth.update\") {\n      const remote_id = msg.params[2];\n\n      const market = this._level2UpdateSubs.get(remote_id.toUpperCase()) || this._level2UpdateSubs.get(remote_id.toLowerCase());\n\n      if (!market) return;\n      const snapshot = msg.params[0];\n\n      if (snapshot) {\n        const snapshot = this._constructL2Snapshot(msg.params[1], market);\n\n        this.emit(\"l2snapshot\", snapshot, market);\n      } else {\n        const update = this._constructL2Update(msg.params[1], market);\n\n        this.emit(\"l2update\", update, market);\n      }\n\n      return;\n    }\n  }\n  /**\n  {\n  \"method\": \"ticker.update\",\n  \"params\": [{\n    \"symbol\": \"BTC_USDT\",\n    \"open_24h\": \"1760\",\n    \"low_24h\": \"1.00\",\n    \"base_volume_24h\": \"11.40088557\",\n    \"quote_volume_24h\": \"29786.30588557\",\n    \"last\": \"4000\",\n    \"last_qty\": \"1\",\n    \"best_bid\": \"3375\",\n    \"best_bid_size\": \"0.003\",\n    \"best_ask\": \"4000\",\n    \"best_ask_size\": \"108.2542\",\n    \"timestamp\": 1586762545336\n  }],\n  \"id\": null\n  }\n  */\n\n\n  _constructTicker(data, market) {\n    const change = Number(data.last) - Number(data.open_24h);\n    const changePercent = change / Number(data.open_24h) * 100;\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: data.timestamp,\n      last: data.last,\n      open: data.open_24h,\n      high: data.high_24h,\n      low: data.low_24h,\n      volume: data.base_volume_24h,\n      quoteVolume: data.quote_volume_24h,\n      change: change.toFixed(8),\n      changePercent: changePercent.toFixed(2),\n      ask: data.best_ask,\n      askVolume: data.best_ask_size,\n      bid: data.best_bid,\n      bidVolume: data.best_bid_size\n    });\n  }\n  /**\n  {\n    \"method\": \"trades.update\",\n    \"params\":\n    [\n      true,\n      [\n        {\n          id: 3282939928,\n          time: 1597419159,\n          amount: '0.1',\n          price: '11687.04',\n          type: 'sell'\n        }\n      ],\n      \"ETH_USDT\"\n    ],\n    \"id\": null\n  }\n  */\n\n\n  _constructTrade(datum, market) {\n    const {\n      id,\n      time,\n      price,\n      amount,\n      type\n    } = datum;\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: id.toString(),\n      side: type,\n      unix: Math.trunc(time * 1000),\n      price,\n      amount\n    });\n  }\n  /**\n  {\n    \"method\": \"depth.update\",\n    \"params\": [\n      true,\n      {\n        \"asks\": [\n          [\"11702.01\", \"0.001\"],\n          [\"11700.24\", \"0.8716\"],\n          [\"11699.57\", \"0.1029\"]\n        ],\n        \"bids\": [\n          [\"11697.89\", \"0.2184\"],\n          [\"11697.13\", \"7.0356\"],\n          [\"11696.79\", \"0.2149\"]\n        ]\n      },\n      \"BTC_USDT\"\n    ],\n    \"id\": null\n  }\n  */\n\n\n  _constructL2Snapshot(datum, market) {\n    const asks = datum.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1])).reverse();\n    const bids = datum.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      asks,\n      bids\n    });\n  }\n  /**\n  {\n    \"method\": \"depth.update\",\n    \"params\": [\n      false,\n      {\n        \"asks\": [\n          [\"11702.81\", \"0.001\"],\n          [\"11699.92\", \"0.008\"],\n          [\"11788.73\", \"0\"],\n          [\"11787.24\", \"0\"]\n        ],\n        \"bids\": [\n          [\"11642.72\", \"13.1172\"],\n          [\"11627.05\", \"2.1258\"],\n          [\"11621.42\", \"0\"],\n          [\"11620.87\", \"0\"]\n        ]\n      },\n      \"BTC_USDT\"\n    ],\n    \"id\": null\n  }\n  */\n\n\n  _constructL2Update(datum, market) {\n    const asks = datum.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    const bids = datum.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.DigifinexClient = DigifinexClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/DigifinexClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/unbound-method */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\nimport * as zlib from \"../ZlibUtils\";\n\n/**\n * Implements the exchange according to API specifications:\n * https://github.com/DigiFinex/api/blob/master/Websocket_API_en.md\n */\nexport class DigifinexClient extends BasicClient {\n    public id: number;\n\n    constructor({ wssPath = \"wss://openapi.digifinex.com/ws/v1/\", watcherMs }: ClientOptions = {}) {\n        super(wssPath, \"Digifinex\", undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasLevel2Updates = true;\n        this.id = 0;\n        this._onMessageInf = this._onMessageInf.bind(this);\n    }\n\n    protected _sendSubTicker(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"ticker.subscribe\",\n                params: [remote_id],\n                id: ++this.id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"ticker.unsubscribe\",\n                params: [remote_id],\n                id: ++this.id,\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"trades.subscribe\",\n                params: [remote_id],\n                id: ++this.id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"trades.unsubscribe\",\n                params: [remote_id],\n                id: ++this.id,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"depth.subscribe\",\n                params: [remote_id],\n                id: ++this.id,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"depth.unsubscribe\",\n                params: [remote_id],\n                id: ++this.id,\n            }),\n        );\n    }\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(raw) {\n        zlib.inflate(raw, this._onMessageInf);\n    }\n\n    protected _onMessageInf(err, raw) {\n        // handle inflate error\n        if (err) {\n            this.emit(\"error\", err);\n            return;\n        }\n\n        // handle parse error\n        let msg;\n        try {\n            msg = JSON.parse(raw);\n        } catch (err) {\n            this.emit(\"error\", err, raw);\n            return;\n        }\n\n        // handle subscription success\n        if (msg.result && msg.result.status === \"success\") {\n            return;\n        }\n\n        // handle errors\n        if (msg.error) {\n            this.emit(\"error\", msg.error);\n            return;\n        }\n\n        // handle ticker\n        if (msg.method === \"ticker.update\") {\n            for (const datum of msg.params) {\n                const remote_id = datum.symbol;\n                const market =\n                    this._tickerSubs.get(remote_id.toUpperCase()) ||\n                    this._tickerSubs.get(remote_id.toLowerCase());\n                if (!market) continue;\n\n                const ticker = this._constructTicker(datum, market);\n                this.emit(\"ticker\", ticker, market);\n            }\n            return;\n        }\n\n        // handle trades\n        if (msg.method == \"trades.update\") {\n            const remote_id = msg.params[2];\n            const market =\n                this._tradeSubs.get(remote_id.toUpperCase()) ||\n                this._tradeSubs.get(remote_id.toLowerCase());\n            if (!market) return;\n\n            // trades arrive newest first\n            for (const datum of msg.params[1].reverse()) {\n                const trade = this._constructTrade(datum, market);\n                this.emit(\"trade\", trade, market);\n            }\n            return;\n        }\n\n        // handle updates\n        if (msg.method === \"depth.update\") {\n            const remote_id = msg.params[2];\n            const market =\n                this._level2UpdateSubs.get(remote_id.toUpperCase()) ||\n                this._level2UpdateSubs.get(remote_id.toLowerCase());\n            if (!market) return;\n\n            const snapshot = msg.params[0];\n            if (snapshot) {\n                const snapshot = this._constructL2Snapshot(msg.params[1], market);\n                this.emit(\"l2snapshot\", snapshot, market);\n            } else {\n                const update = this._constructL2Update(msg.params[1], market);\n                this.emit(\"l2update\", update, market);\n            }\n            return;\n        }\n    }\n\n    /**\n   {\n    \"method\": \"ticker.update\",\n    \"params\": [{\n      \"symbol\": \"BTC_USDT\",\n      \"open_24h\": \"1760\",\n      \"low_24h\": \"1.00\",\n      \"base_volume_24h\": \"11.40088557\",\n      \"quote_volume_24h\": \"29786.30588557\",\n      \"last\": \"4000\",\n      \"last_qty\": \"1\",\n      \"best_bid\": \"3375\",\n      \"best_bid_size\": \"0.003\",\n      \"best_ask\": \"4000\",\n      \"best_ask_size\": \"108.2542\",\n      \"timestamp\": 1586762545336\n    }],\n    \"id\": null\n  }\n  */\n    protected _constructTicker(data, market) {\n        const change = Number(data.last) - Number(data.open_24h);\n        const changePercent = (change / Number(data.open_24h)) * 100;\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: data.timestamp,\n            last: data.last,\n            open: data.open_24h,\n            high: data.high_24h,\n            low: data.low_24h,\n            volume: data.base_volume_24h,\n            quoteVolume: data.quote_volume_24h,\n            change: change.toFixed(8),\n            changePercent: changePercent.toFixed(2),\n            ask: data.best_ask,\n            askVolume: data.best_ask_size,\n            bid: data.best_bid,\n            bidVolume: data.best_bid_size,\n        });\n    }\n\n    /**\n    {\n      \"method\": \"trades.update\",\n      \"params\":\n      [\n        true,\n        [\n          {\n            id: 3282939928,\n            time: 1597419159,\n            amount: '0.1',\n            price: '11687.04',\n            type: 'sell'\n          }\n        ],\n        \"ETH_USDT\"\n      ],\n      \"id\": null\n    }\n   */\n    protected _constructTrade(datum, market) {\n        const { id, time, price, amount, type } = datum;\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: id.toString(),\n            side: type,\n            unix: Math.trunc(time * 1000),\n            price,\n            amount,\n        });\n    }\n\n    /**\n   {\n      \"method\": \"depth.update\",\n      \"params\": [\n        true,\n        {\n          \"asks\": [\n            [\"11702.01\", \"0.001\"],\n            [\"11700.24\", \"0.8716\"],\n            [\"11699.57\", \"0.1029\"]\n          ],\n          \"bids\": [\n            [\"11697.89\", \"0.2184\"],\n            [\"11697.13\", \"7.0356\"],\n            [\"11696.79\", \"0.2149\"]\n          ]\n        },\n        \"BTC_USDT\"\n      ],\n      \"id\": null\n    }\n   */\n    protected _constructL2Snapshot(datum, market) {\n        const asks = datum.asks.map(p => new Level2Point(p[0], p[1])).reverse();\n        const bids = datum.bids.map(p => new Level2Point(p[0], p[1]));\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            asks,\n            bids,\n        });\n    }\n\n    /**\n   {\n      \"method\": \"depth.update\",\n      \"params\": [\n        false,\n        {\n          \"asks\": [\n            [\"11702.81\", \"0.001\"],\n            [\"11699.92\", \"0.008\"],\n            [\"11788.73\", \"0\"],\n            [\"11787.24\", \"0\"]\n          ],\n          \"bids\": [\n            [\"11642.72\", \"13.1172\"],\n            [\"11627.05\", \"2.1258\"],\n            [\"11621.42\", \"0\"],\n            [\"11620.87\", \"0\"]\n          ]\n        },\n        \"BTC_USDT\"\n      ],\n      \"id\": null\n    }\n   */\n    protected _constructL2Update(datum, market) {\n        const asks = datum.asks.map(p => new Level2Point(p[0], p[1]));\n        const bids = datum.bids.map(p => new Level2Point(p[0], p[1]));\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            asks,\n            bids,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}