{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/* eslint-disable @typescript-eslint/no-implied-eval */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.debounce = exports.Debounce = void 0;\n\nclass Debounce {\n  constructor(fn) {\n    let waitMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    this.fn = fn;\n    this.waitMs = waitMs;\n    this._handle;\n    this._last;\n  }\n\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._last = args;\n\n    this._unschedule();\n\n    this._schedule();\n  }\n\n  cancel() {\n    this._unschedule();\n\n    this._last = undefined;\n  }\n\n  _unschedule() {\n    clearTimeout(this._handle);\n  }\n\n  _schedule() {\n    this._handle = setTimeout(this._process.bind(this), this.waitMs);\n\n    if (this._handle.unref) {\n      this._handle.unref();\n    }\n  }\n\n  _process() {\n    if (!this._last) return;\n    this.fn(...this._last);\n  }\n\n}\n\nexports.Debounce = Debounce;\n/**\n * Debounce allows repeated calls to a function but will delay execution of the\n * function until a a timeout period expires. Upon expiration, the function is\n * called with the last value that was provided\n *\n * @example\n * const debounceMs = 100;\n * const fn = n => console.log(n, new Date());\n * const debouncedFn = debounce(fn, debounceMs);\n * debouncedFn('h');\n * debouncedFn('he');\n * debouncedFn('hel');\n * debouncedFn('hell');\n * debouncedFn('hello');\n */\n\nfunction debounce(fn) {\n  let debounceMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  const i = new Debounce(fn, debounceMs);\n  const add = i.add.bind(i);\n  add.cancel = i.cancel.bind(i);\n  return add;\n}\n\nexports.debounce = debounce;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/flowcontrol/Debounce.ts"],"names":[],"mappings":";AAAA;;AACA;;AACA;;;;;;;AAIA,MAAa,QAAb,CAAqB;AAIjB,EAAA,WAAA,CAAqB,EAArB,EAA0D;AAAA,QAApB,MAAoB,uEAAH,GAAG;AAArC,SAAA,EAAA,GAAA,EAAA;AAAiB,SAAA,MAAA,GAAA,MAAA;AAClC,SAAK,OAAL;AACA,SAAK,KAAL;AACH;;AAEM,EAAA,GAAG,GAAe;AAAA,sCAAX,IAAW;AAAX,MAAA,IAAW;AAAA;;AACrB,SAAK,KAAL,GAAa,IAAb;;AACA,SAAK,WAAL;;AACA,SAAK,SAAL;AACH;;AAEM,EAAA,MAAM,GAAA;AACT,SAAK,WAAL;;AACA,SAAK,KAAL,GAAa,SAAb;AACH;;AAES,EAAA,WAAW,GAAA;AACjB,IAAA,YAAY,CAAC,KAAK,OAAN,CAAZ;AACH;;AAES,EAAA,SAAS,GAAA;AACf,SAAK,OAAL,GAAe,UAAU,CAAC,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAD,EAA2B,KAAK,MAAhC,CAAzB;;AACA,QAAI,KAAK,OAAL,CAAa,KAAjB,EAAwB;AACpB,WAAK,OAAL,CAAa,KAAb;AACH;AACJ;;AAES,EAAA,QAAQ,GAAA;AACd,QAAI,CAAC,KAAK,KAAV,EAAiB;AACjB,SAAK,EAAL,CAAQ,GAAG,KAAK,KAAhB;AACH;;AAlCgB;;AAArB,OAAA,CAAA,QAAA,GAAA,QAAA;AAqCA;;;;;;;;;;;;;;AAcG;;AACH,SAAgB,QAAhB,CAAyB,EAAzB,EAAyD;AAAA,MAAxB,UAAwB,uEAAH,GAAG;AACrD,QAAM,CAAC,GAAG,IAAI,QAAJ,CAAa,EAAb,EAAiB,UAAjB,CAAV;AACA,QAAM,GAAG,GAAG,CAAC,CAAC,GAAF,CAAM,IAAN,CAAW,CAAX,CAAZ;AACA,EAAA,GAAG,CAAC,MAAJ,GAAa,CAAC,CAAC,MAAF,CAAS,IAAT,CAAc,CAAd,CAAb;AACA,SAAO,GAAP;AACH;;AALD,OAAA,CAAA,QAAA,GAAA,QAAA","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-implied-eval */\n\nimport { CancelableFn, Fn } from \"./Fn\";\n\nexport class Debounce {\n    protected _handle: NodeJS.Timeout;\n    protected _last: any;\n\n    constructor(readonly fn: Fn, readonly waitMs: number = 100) {\n        this._handle;\n        this._last;\n    }\n\n    public add(...args: any[]) {\n        this._last = args;\n        this._unschedule();\n        this._schedule();\n    }\n\n    public cancel() {\n        this._unschedule();\n        this._last = undefined;\n    }\n\n    protected _unschedule() {\n        clearTimeout(this._handle);\n    }\n\n    protected _schedule() {\n        this._handle = setTimeout(this._process.bind(this), this.waitMs);\n        if (this._handle.unref) {\n            this._handle.unref();\n        }\n    }\n\n    protected _process() {\n        if (!this._last) return;\n        this.fn(...this._last);\n    }\n}\n\n/**\n * Debounce allows repeated calls to a function but will delay execution of the\n * function until a a timeout period expires. Upon expiration, the function is\n * called with the last value that was provided\n *\n * @example\n * const debounceMs = 100;\n * const fn = n => console.log(n, new Date());\n * const debouncedFn = debounce(fn, debounceMs);\n * debouncedFn('h');\n * debouncedFn('he');\n * debouncedFn('hel');\n * debouncedFn('hell');\n * debouncedFn('hello');\n */\nexport function debounce(fn: Fn, debounceMs: number = 100): CancelableFn {\n    const i = new Debounce(fn, debounceMs);\n    const add = i.add.bind(i);\n    add.cancel = i.cancel.bind(i);\n    return add as CancelableFn;\n}\n"]},"metadata":{},"sourceType":"script"}