{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitflyerClient = void 0;\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/no-misused-promises */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst semaphore_1 = __importDefault(require(\"semaphore\"));\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst https = __importStar(require(\"../Https\"));\n\nconst Util_1 = require(\"../Util\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Trade_1 = require(\"../Trade\");\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst Ticker_1 = require(\"../Ticker\");\n\nclass BitflyerClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://ws.lightstream.bitflyer.com/json-rpc\",\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"BitFlyer\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasLevel2Updates = true;\n    this.requestSnapshot = true;\n    this._restSem = (0, semaphore_1.default)(1);\n    this.REST_REQUEST_DELAY_MS = 250;\n  }\n\n  _sendSubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"subscribe\",\n      params: {\n        channel: `lightning_ticker_${remote_id}`\n      }\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"unsubscribe\",\n      params: {\n        channel: `lightning_ticker_${remote_id}`\n      }\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"subscribe\",\n      params: {\n        channel: `lightning_executions_${remote_id}`\n      }\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    // this method is trigger on connections events... so safe to send snapshot request here\n    if (this.requestSnapshot) this._requestLevel2Snapshot(this._level2UpdateSubs.get(remote_id));\n\n    this._wss.send(JSON.stringify({\n      method: \"subscribe\",\n      params: {\n        channel: `lightning_board_${remote_id}`\n      }\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"unsubscribe\",\n      params: {\n        channel: `lightning_executions_${remote_id}`\n      }\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      method: \"unsubscribe\",\n      params: {\n        channel: `lightning_board_${remote_id}`\n      }\n    }));\n  }\n\n  _onMessage(data) {\n    const parsed = JSON.parse(data);\n    if (!parsed.params || !parsed.params.channel || !parsed.params.message) return;\n    const {\n      channel,\n      message\n    } = parsed.params;\n\n    if (channel.startsWith(\"lightning_ticker_\")) {\n      const remote_id = channel.substr(\"lightning_ticker_\".length);\n\n      const market = this._tickerSubs.get(remote_id);\n\n      if (!market) return;\n\n      const ticker = this._createTicker(message, market);\n\n      this.emit(\"ticker\", ticker, market);\n      return;\n    } // trades\n\n\n    if (channel.startsWith(\"lightning_executions_\")) {\n      const remote_id = channel.substr(\"lightning_executions_\".length);\n\n      const market = this._tradeSubs.get(remote_id);\n\n      if (!market) return;\n\n      for (const datum of message) {\n        const trade = this._createTrades(datum, market);\n\n        this.emit(\"trade\", trade, market);\n      }\n    } // orderbook\n\n\n    if (channel.startsWith(\"lightning_board_\")) {\n      const remote_id = channel.substr(\"lightning_board_\".length);\n\n      const market = this._level2UpdateSubs.get(remote_id);\n\n      if (!market) return;\n\n      const update = this._createLevel2Update(message, market);\n\n      this.emit(\"l2update\", update, market);\n    }\n  }\n\n  _createTicker(data, market) {\n    const {\n      timestamp,\n      best_bid,\n      best_ask,\n      best_bid_size,\n      best_ask_size,\n      ltp,\n      volume,\n      volume_by_product\n    } = data;\n    return new Ticker_1.Ticker({\n      exchange: \"bitFlyer\",\n      base: market.base,\n      quote: market.quote,\n      timestamp: moment_1.default.utc(timestamp).valueOf(),\n      last: ltp.toFixed(8),\n      volume: volume.toFixed(8),\n      quoteVolume: volume_by_product.toFixed(8),\n      bid: best_bid.toFixed(8),\n      bidVolume: best_bid_size.toFixed(8),\n      ask: best_ask.toFixed(8),\n      askVolume: best_ask_size.toFixed(8)\n    });\n  }\n\n  _createTrades(datum, market) {\n    let {\n      size,\n      side,\n      exec_date,\n      price,\n      id,\n      buy_child_order_acceptance_id,\n      sell_child_order_acceptance_id\n    } = datum;\n    side = side.toLowerCase();\n    const unix = (0, moment_1.default)(exec_date).valueOf();\n    return new Trade_1.Trade({\n      exchange: \"bitFlyer\",\n      base: market.base,\n      quote: market.quote,\n      tradeId: id.toFixed(),\n      unix,\n      side: side.toLowerCase(),\n      price: price.toFixed(8),\n      amount: size.toFixed(8),\n      buyOrderId: buy_child_order_acceptance_id,\n      sellOrderId: sell_child_order_acceptance_id\n    });\n  }\n\n  _createLevel2Update(msg, market) {\n    const asks = msg.asks.map(p => new Level2Point_1.Level2Point(p.price.toFixed(8), p.size.toFixed(8)));\n    const bids = msg.bids.map(p => new Level2Point_1.Level2Point(p.price.toFixed(8), p.size.toFixed(8)));\n    return new Level2Update_1.Level2Update({\n      exchange: \"bitFlyer\",\n      base: market.base,\n      quote: market.quote,\n      asks,\n      bids\n    });\n  }\n\n  _requestLevel2Snapshot(market) {\n    this._restSem.take(async () => {\n      try {\n        const remote_id = market.id;\n        const uri = `https://api.bitflyer.com/v1/board?product_code=${remote_id}`;\n        const raw = await https.get(uri);\n        const asks = raw.asks.map(p => new Level2Point_1.Level2Point(p.price.toFixed(8), p.size.toFixed(8)));\n        const bids = raw.bids.map(p => new Level2Point_1.Level2Point(p.price.toFixed(8), p.size.toFixed(8)));\n        const snapshot = new Level2Snapshots_1.Level2Snapshot({\n          exchange: \"bitFlyer\",\n          base: market.base,\n          quote: market.quote,\n          asks,\n          bids\n        });\n        this.emit(\"l2snapshot\", snapshot, market);\n      } catch (ex) {\n        this._onError(ex);\n\n        this._requestLevel2Snapshot(market);\n      } finally {\n        await (0, Util_1.wait)(this.REST_REQUEST_DELAY_MS);\n\n        this._restSem.leave();\n      }\n    });\n  }\n\n}\n\nexports.BitflyerClient = BitflyerClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/BitflyerClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/no-misused-promises */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport semaphore from \"semaphore\";\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Update } from \"../Level2Update\";\nimport { Market } from \"../Market\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport * as https from \"../Https\";\nimport { wait } from \"../Util\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Trade } from \"../Trade\";\nimport moment from \"moment\";\nimport { Ticker } from \"../Ticker\";\n\nexport class BitflyerClient extends BasicClient {\n    public requestSnapshot: boolean;\n    public REST_REQUEST_DELAY_MS: number;\n\n    protected _restSem: semaphore.Semaphore;\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    constructor({\n        wssPath = \"wss://ws.lightstream.bitflyer.com/json-rpc\",\n        watcherMs,\n    }: ClientOptions = {}) {\n        super(wssPath, \"BitFlyer\", undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasLevel2Updates = true;\n        this.requestSnapshot = true;\n        this._restSem = semaphore(1);\n        this.REST_REQUEST_DELAY_MS = 250;\n    }\n\n    protected _sendSubTicker(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"subscribe\",\n                params: {\n                    channel: `lightning_ticker_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"unsubscribe\",\n                params: {\n                    channel: `lightning_ticker_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"subscribe\",\n                params: {\n                    channel: `lightning_executions_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id) {\n        // this method is trigger on connections events... so safe to send snapshot request here\n        if (this.requestSnapshot)\n            this._requestLevel2Snapshot(this._level2UpdateSubs.get(remote_id));\n        this._wss.send(\n            JSON.stringify({\n                method: \"subscribe\",\n                params: {\n                    channel: `lightning_board_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"unsubscribe\",\n                params: {\n                    channel: `lightning_executions_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                method: \"unsubscribe\",\n                params: {\n                    channel: `lightning_board_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _onMessage(data) {\n        const parsed = JSON.parse(data);\n        if (!parsed.params || !parsed.params.channel || !parsed.params.message) return;\n        const { channel, message } = parsed.params;\n\n        if (channel.startsWith(\"lightning_ticker_\")) {\n            const remote_id = channel.substr(\"lightning_ticker_\".length);\n            const market = this._tickerSubs.get(remote_id);\n            if (!market) return;\n\n            const ticker = this._createTicker(message, market);\n            this.emit(\"ticker\", ticker, market);\n            return;\n        }\n\n        // trades\n        if (channel.startsWith(\"lightning_executions_\")) {\n            const remote_id = channel.substr(\"lightning_executions_\".length);\n            const market = this._tradeSubs.get(remote_id);\n            if (!market) return;\n\n            for (const datum of message) {\n                const trade = this._createTrades(datum, market);\n                this.emit(\"trade\", trade, market);\n            }\n        }\n\n        // orderbook\n        if (channel.startsWith(\"lightning_board_\")) {\n            const remote_id = channel.substr(\"lightning_board_\".length);\n            const market = this._level2UpdateSubs.get(remote_id);\n            if (!market) return;\n\n            const update = this._createLevel2Update(message, market);\n            this.emit(\"l2update\", update, market);\n        }\n    }\n\n    protected _createTicker(data, market) {\n        const {\n            timestamp,\n            best_bid,\n            best_ask,\n            best_bid_size,\n            best_ask_size,\n            ltp,\n            volume,\n            volume_by_product,\n        } = data;\n        return new Ticker({\n            exchange: \"bitFlyer\",\n            base: market.base,\n            quote: market.quote,\n            timestamp: moment.utc(timestamp).valueOf(),\n            last: ltp.toFixed(8),\n            volume: volume.toFixed(8),\n            quoteVolume: volume_by_product.toFixed(8),\n            bid: best_bid.toFixed(8),\n            bidVolume: best_bid_size.toFixed(8),\n            ask: best_ask.toFixed(8),\n            askVolume: best_ask_size.toFixed(8),\n        });\n    }\n\n    protected _createTrades(datum, market) {\n        let {\n            size,\n            side,\n            exec_date,\n            price,\n            id,\n            buy_child_order_acceptance_id,\n            sell_child_order_acceptance_id,\n        } = datum;\n\n        side = side.toLowerCase();\n        const unix = moment(exec_date).valueOf();\n\n        return new Trade({\n            exchange: \"bitFlyer\",\n            base: market.base,\n            quote: market.quote,\n            tradeId: id.toFixed(),\n            unix,\n            side: side.toLowerCase(),\n            price: price.toFixed(8),\n            amount: size.toFixed(8),\n            buyOrderId: buy_child_order_acceptance_id,\n            sellOrderId: sell_child_order_acceptance_id,\n        });\n    }\n\n    protected _createLevel2Update(msg: any, market: Market) {\n        const asks = msg.asks.map(p => new Level2Point(p.price.toFixed(8), p.size.toFixed(8)));\n        const bids = msg.bids.map(p => new Level2Point(p.price.toFixed(8), p.size.toFixed(8)));\n\n        return new Level2Update({\n            exchange: \"bitFlyer\",\n            base: market.base,\n            quote: market.quote,\n            asks,\n            bids,\n        });\n    }\n\n    protected _requestLevel2Snapshot(market: Market) {\n        this._restSem.take(async () => {\n            try {\n                const remote_id = market.id;\n                const uri = `https://api.bitflyer.com/v1/board?product_code=${remote_id}`;\n                const raw = (await https.get(uri)) as any;\n                const asks = raw.asks.map(\n                    p => new Level2Point(p.price.toFixed(8), p.size.toFixed(8)),\n                );\n                const bids = raw.bids.map(\n                    p => new Level2Point(p.price.toFixed(8), p.size.toFixed(8)),\n                );\n                const snapshot = new Level2Snapshot({\n                    exchange: \"bitFlyer\",\n                    base: market.base,\n                    quote: market.quote,\n                    asks,\n                    bids,\n                });\n                this.emit(\"l2snapshot\", snapshot, market);\n            } catch (ex) {\n                this._onError(ex);\n                this._requestLevel2Snapshot(market);\n            } finally {\n                await wait(this.REST_REQUEST_DELAY_MS);\n                this._restSem.leave();\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}