{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PoloniexClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst https = __importStar(require(\"../Https\"));\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nclass PoloniexClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://api2.poloniex.com/\",\n      autoloadSymbolMaps = true,\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"Poloniex\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._idMap = new Map();\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasLevel2Updates = true;\n    this._subbedToTickers = false;\n    this.on(\"connected\", this._resetSubCount.bind(this));\n    this.TICKERS_ID = 1002;\n    this.MARKET_IDS = new Map();\n\n    if (autoloadSymbolMaps) {\n      this.loadSymbolMaps().catch(err => this.emit(\"error\", err));\n    }\n  }\n  /**\n  Poloniex uses numeric identifiers for its markets.\n  A static map of these markets can be obtained from:\n  https://docs.poloniex.com/#currency-pair-ids\n   We can use the ticker REST API as a mechanism to obtain\n  the identifiers and create an index of id to symbol.\n  */\n\n\n  async loadSymbolMaps() {\n    const uri = \"https://poloniex.com/public?command=returnTicker\";\n    const result = await https.get(uri);\n\n    for (const symbol in result) {\n      const id = result[symbol].id;\n      this.MARKET_IDS.set(id, symbol);\n    }\n  }\n\n  _resetSubCount() {\n    this._subCount = {};\n    this._subbedToTickers = false;\n  }\n\n  _sendSubTicker() {\n    if (this._subbedToTickers) return; // send for first request\n\n    this._subbedToTickers = true;\n\n    this._wss.send(JSON.stringify({\n      command: \"subscribe\",\n      channel: this.TICKERS_ID\n    }));\n  }\n\n  _sendUnsubTicker() {\n    if (this._tickerSubs.size) return; // send when no more\n\n    this._subbedToTickers = false;\n\n    this._wss.send(JSON.stringify({\n      command: \"unsubscribe\",\n      channel: this.TICKERS_ID\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    this._sendSubscribe(remote_id);\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._sendUnsubscribe(remote_id);\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    this._sendSubscribe(remote_id);\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._sendUnsubscribe(remote_id);\n  }\n\n  _sendSubscribe(remote_id) {\n    this._subCount[remote_id] = (this._subCount[remote_id] || 0) + 1; // increment market counter\n    // if we have more than one sub, ignore the request as we're already subbed\n\n    if (this._subCount[remote_id] > 1) return;\n\n    this._wss.send(JSON.stringify({\n      command: \"subscribe\",\n      channel: remote_id\n    }));\n  }\n\n  _sendUnsubscribe(remote_id) {\n    this._subCount[remote_id] -= 1; // decrement market count\n    // if we still have subs, then leave channel open\n\n    if (this._subCount[remote_id]) return;\n\n    this._wss.send(JSON.stringify({\n      command: \"unsubscribe\",\n      channel: remote_id\n    }));\n  }\n\n  _onMessage(raw) {\n    // different because messages are broadcast as joined updates\n    // [148,540672082,[[\"o\",1,\"0.07313000\",\"7.21110596\"],[\"t\",\"43781170\",0,\"0.07313000\",\"0.00199702\",1528900825]]]\n    // we need to pick apart these messages and broadcast them accordingly\n    const msg = JSON.parse(raw);\n    const id = msg[0];\n    const seq = msg[1];\n    const updates = msg[2]; // tickers\n\n    if (id === this.TICKERS_ID && updates) {\n      const remoteId = this.MARKET_IDS.get(updates[0]);\n\n      const market = this._tickerSubs.get(remoteId);\n\n      if (!market) return;\n\n      const ticker = this._createTicker(updates, market);\n\n      this.emit(\"ticker\", ticker, market);\n      return;\n    }\n\n    if (!updates) return;\n    const bids = [];\n    const asks = [];\n\n    for (const update of updates) {\n      switch (update[0]) {\n        // when connection is first established it will send an 'info' packet\n        // that can be used to map the \"id\" to the market_symbol\n        case \"i\":\n          {\n            const remote_id = update[1].currencyPair;\n\n            this._idMap.set(id, remote_id); // capture snapshot if we're subscribed to l2updates\n\n\n            const market = this._level2UpdateSubs.get(remote_id);\n\n            if (!market) continue;\n\n            const snapshot = this._constructoLevel2Snapshot(seq, update[1], market);\n\n            this.emit(\"l2snapshot\", snapshot, market);\n            break;\n          }\n        // trade events will stream-in after we are subscribed to the channel\n        // and hopefully after the info packet has been sent\n\n        case \"t\":\n          {\n            const market = this._tradeSubs.get(this._idMap.get(id));\n\n            if (!market) continue;\n\n            const trade = this._constructTradeFromMessage(update, market);\n\n            this.emit(\"trade\", trade, market);\n            break;\n          }\n\n        case \"o\":\n          {\n            // only include updates if we are subscribed to the market\n            const market = this._level2UpdateSubs.get(this._idMap.get(id));\n\n            if (!market) continue; //[171, 280657226, [[\"o\", 0, \"0.00225182\", \"0.00000000\"], [\"o\", 0, \"0.00225179\", \"860.66363984\"]]]\n            //[171, 280657227, [[\"o\", 1, \"0.00220001\", \"0.00000000\"], [\"o\", 1, \"0.00222288\", \"208.47334089\"]]]\n\n            const point = new Level2Point_1.Level2Point(update[2], update[3]);\n            if (update[1] === 0) asks.push(point);\n            if (update[1] === 1) bids.push(point);\n            break;\n          }\n      }\n    } // check if we have bids/asks and construct order update message\n\n\n    if (bids.length || asks.length) {\n      const market = this._level2UpdateSubs.get(this._idMap.get(id));\n\n      if (!market) return;\n      const l2update = new Level2Update_1.Level2Update({\n        exchange: this.name,\n        base: market.base,\n        quote: market.quote,\n        sequenceId: seq,\n        asks,\n        bids\n      });\n      this.emit(\"l2update\", l2update, market);\n    }\n  }\n\n  _createTicker(update, market) {\n    const [, last, ask, bid, percent, quoteVol, baseVol,, high, low] = update;\n    const open = parseFloat(last) / (1 + parseFloat(percent));\n    const dayChange = parseFloat(last) - open;\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: Date.now(),\n      last,\n      open: open.toFixed(8),\n      high,\n      low,\n      volume: baseVol,\n      quoteVolume: quoteVol,\n      change: dayChange.toFixed(8),\n      changePercent: percent,\n      ask,\n      bid\n    });\n  }\n\n  _constructTradeFromMessage(update, market) {\n    let [, trade_id, side, price, size, unix] = update;\n    side = side === 1 ? \"buy\" : \"sell\";\n    unix = unix * 1000;\n    trade_id = parseInt(trade_id);\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: trade_id.toFixed(),\n      side,\n      unix,\n      price,\n      amount: size\n    });\n  }\n\n  _constructoLevel2Snapshot(seq, update, market) {\n    const [asksObj, bidsObj] = update.orderBook;\n    const asks = [];\n    const bids = [];\n\n    for (const price in asksObj) {\n      asks.push(new Level2Point_1.Level2Point(price, asksObj[price]));\n    }\n\n    for (const price in bidsObj) {\n      bids.push(new Level2Point_1.Level2Point(price, bidsObj[price]));\n    }\n\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: seq,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.PoloniexClient = PoloniexClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/PoloniexClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport * as https from \"../Https\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\nexport type PoloniexClientOptions = ClientOptions & {\n    autoloadSymbolMaps?: boolean;\n};\n\nexport class PoloniexClient extends BasicClient {\n    protected _idMap: Map<any, any>;\n    protected _subbedToTickers: boolean;\n    protected TICKERS_ID: number;\n    protected MARKET_IDS: Map<number, string>;\n    protected _subCount: any;\n\n    constructor({\n        wssPath = \"wss://api2.poloniex.com/\",\n        autoloadSymbolMaps = true,\n        watcherMs,\n    }: PoloniexClientOptions = {}) {\n        super(wssPath, \"Poloniex\", undefined, watcherMs);\n        this._idMap = new Map();\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasLevel2Updates = true;\n        this._subbedToTickers = false;\n        this.on(\"connected\", this._resetSubCount.bind(this));\n\n        this.TICKERS_ID = 1002;\n        this.MARKET_IDS = new Map();\n\n        if (autoloadSymbolMaps) {\n            this.loadSymbolMaps().catch(err => this.emit(\"error\", err));\n        }\n    }\n\n    /**\n    Poloniex uses numeric identifiers for its markets.\n    A static map of these markets can be obtained from:\n    https://docs.poloniex.com/#currency-pair-ids\n\n    We can use the ticker REST API as a mechanism to obtain\n    the identifiers and create an index of id to symbol.\n   */\n    public async loadSymbolMaps() {\n        const uri = \"https://poloniex.com/public?command=returnTicker\";\n        const result: any = await https.get(uri);\n        for (const symbol in result) {\n            const id = result[symbol].id;\n            this.MARKET_IDS.set(id, symbol);\n        }\n    }\n\n    protected _resetSubCount() {\n        this._subCount = {};\n        this._subbedToTickers = false;\n    }\n\n    protected _sendSubTicker() {\n        if (this._subbedToTickers) return; // send for first request\n        this._subbedToTickers = true;\n        this._wss.send(\n            JSON.stringify({\n                command: \"subscribe\",\n                channel: this.TICKERS_ID,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker() {\n        if (this._tickerSubs.size) return; // send when no more\n        this._subbedToTickers = false;\n        this._wss.send(\n            JSON.stringify({\n                command: \"unsubscribe\",\n                channel: this.TICKERS_ID,\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id) {\n        this._sendSubscribe(remote_id);\n    }\n\n    protected _sendUnsubTrades(remote_id) {\n        this._sendUnsubscribe(remote_id);\n    }\n\n    protected _sendSubLevel2Updates(remote_id) {\n        this._sendSubscribe(remote_id);\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id) {\n        this._sendUnsubscribe(remote_id);\n    }\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _sendSubscribe(remote_id) {\n        this._subCount[remote_id] = (this._subCount[remote_id] || 0) + 1; // increment market counter\n        // if we have more than one sub, ignore the request as we're already subbed\n        if (this._subCount[remote_id] > 1) return;\n\n        this._wss.send(\n            JSON.stringify({\n                command: \"subscribe\",\n                channel: remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubscribe(remote_id) {\n        this._subCount[remote_id] -= 1; // decrement market count\n\n        // if we still have subs, then leave channel open\n        if (this._subCount[remote_id]) return;\n\n        this._wss.send(\n            JSON.stringify({\n                command: \"unsubscribe\",\n                channel: remote_id,\n            }),\n        );\n    }\n\n    protected _onMessage(raw) {\n        // different because messages are broadcast as joined updates\n        // [148,540672082,[[\"o\",1,\"0.07313000\",\"7.21110596\"],[\"t\",\"43781170\",0,\"0.07313000\",\"0.00199702\",1528900825]]]\n        // we need to pick apart these messages and broadcast them accordingly\n\n        const msg = JSON.parse(raw);\n        const id = msg[0];\n        const seq = msg[1];\n        const updates = msg[2];\n\n        // tickers\n        if (id === this.TICKERS_ID && updates) {\n            const remoteId = this.MARKET_IDS.get(updates[0]);\n            const market = this._tickerSubs.get(remoteId);\n            if (!market) return;\n\n            const ticker = this._createTicker(updates, market);\n            this.emit(\"ticker\", ticker, market);\n            return;\n        }\n\n        if (!updates) return;\n\n        const bids = [];\n        const asks = [];\n\n        for (const update of updates) {\n            switch (update[0]) {\n                // when connection is first established it will send an 'info' packet\n                // that can be used to map the \"id\" to the market_symbol\n                case \"i\": {\n                    const remote_id = update[1].currencyPair;\n                    this._idMap.set(id, remote_id);\n\n                    // capture snapshot if we're subscribed to l2updates\n                    const market = this._level2UpdateSubs.get(remote_id);\n                    if (!market) continue;\n\n                    const snapshot = this._constructoLevel2Snapshot(seq, update[1], market);\n                    this.emit(\"l2snapshot\", snapshot, market);\n                    break;\n                }\n                // trade events will stream-in after we are subscribed to the channel\n                // and hopefully after the info packet has been sent\n                case \"t\": {\n                    const market = this._tradeSubs.get(this._idMap.get(id));\n                    if (!market) continue;\n\n                    const trade = this._constructTradeFromMessage(update, market);\n                    this.emit(\"trade\", trade, market);\n                    break;\n                }\n\n                case \"o\": {\n                    // only include updates if we are subscribed to the market\n                    const market = this._level2UpdateSubs.get(this._idMap.get(id));\n                    if (!market) continue;\n\n                    //[171, 280657226, [[\"o\", 0, \"0.00225182\", \"0.00000000\"], [\"o\", 0, \"0.00225179\", \"860.66363984\"]]]\n                    //[171, 280657227, [[\"o\", 1, \"0.00220001\", \"0.00000000\"], [\"o\", 1, \"0.00222288\", \"208.47334089\"]]]\n                    const point = new Level2Point(update[2], update[3]);\n                    if (update[1] === 0) asks.push(point);\n                    if (update[1] === 1) bids.push(point);\n\n                    break;\n                }\n            }\n        }\n\n        // check if we have bids/asks and construct order update message\n        if (bids.length || asks.length) {\n            const market = this._level2UpdateSubs.get(this._idMap.get(id));\n            if (!market) return;\n\n            const l2update = new Level2Update({\n                exchange: this.name,\n                base: market.base,\n                quote: market.quote,\n                sequenceId: seq,\n                asks,\n                bids,\n            });\n            this.emit(\"l2update\", l2update, market);\n        }\n    }\n\n    protected _createTicker(update, market) {\n        const [, last, ask, bid, percent, quoteVol, baseVol, , high, low] = update;\n        const open = parseFloat(last) / (1 + parseFloat(percent));\n        const dayChange = parseFloat(last) - open;\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: Date.now(),\n            last,\n            open: open.toFixed(8),\n            high,\n            low,\n            volume: baseVol,\n            quoteVolume: quoteVol,\n            change: dayChange.toFixed(8),\n            changePercent: percent,\n            ask,\n            bid,\n        });\n    }\n\n    protected _constructTradeFromMessage(update, market) {\n        let [, trade_id, side, price, size, unix] = update;\n\n        side = side === 1 ? \"buy\" : \"sell\";\n        unix = unix * 1000;\n        trade_id = parseInt(trade_id);\n\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: trade_id.toFixed(),\n            side,\n            unix,\n            price,\n            amount: size,\n        });\n    }\n\n    protected _constructoLevel2Snapshot(seq, update, market) {\n        const [asksObj, bidsObj] = update.orderBook;\n        const asks = [];\n        const bids = [];\n        for (const price in asksObj) {\n            asks.push(new Level2Point(price, asksObj[price]));\n        }\n        for (const price in bidsObj) {\n            bids.push(new Level2Point(price, bidsObj[price]));\n        }\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: seq,\n            asks,\n            bids,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}