{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KucoinClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/* eslint-disable @typescript-eslint/no-floating-promises */\n\n/* eslint-disable @typescript-eslint/no-implied-eval */\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst CandlePeriod_1 = require(\"../CandlePeriod\");\n\nconst Util_1 = require(\"../Util\");\n\nconst crypto_1 = __importDefault(require(\"crypto\"));\n\nconst Trade_1 = require(\"../Trade\");\n\nconst Candle_1 = require(\"../Candle\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst https = __importStar(require(\"../Https\"));\n\nconst Level3Update_1 = require(\"../Level3Update\");\n\nconst Throttle_1 = require(\"../flowcontrol/Throttle\");\n\nconst Level3Point_1 = require(\"../Level3Point\");\n\nconst Level3Snapshot_1 = require(\"../Level3Snapshot\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n/**\n * Kucoin client has a hard limit of 100 subscriptions per socket connection.\n * When more than 100 subscriptions are made on a single socket it will generate\n * an error that says \"509: exceed max subscription count limitation of 100 per session\".\n * To work around this will require creating multiple clients if you makem ore than 100\n * subscriptions.\n */\n\n\nclass KucoinClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath,\n      watcherMs,\n      sendThrottleMs = 10,\n      restThrottleMs = 250\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"KuCoin\", undefined, watcherMs);\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasCandles = true;\n    this.hasLevel2Snapshots = false;\n    this.hasLevel2Updates = true;\n    this.hasLevel3Updates = false;\n    this.candlePeriod = CandlePeriod_1.CandlePeriod._1m;\n    this._pingIntervalTime = 50000;\n    this.restThrottleMs = restThrottleMs;\n    this.connectInitTimeoutMs = 5000;\n    this._sendMessage = (0, Throttle_1.throttle)(this.__sendMessage.bind(this), sendThrottleMs);\n    this._requestLevel2Snapshot = (0, Throttle_1.throttle)(this.__requestLevel2Snapshot.bind(this), restThrottleMs);\n    this._requestLevel3Snapshot = (0, Throttle_1.throttle)(this.__requestLevel3Snapshot.bind(this), restThrottleMs);\n  }\n\n  _beforeClose() {\n    this._sendMessage.cancel();\n\n    this._requestLevel2Snapshot.cancel();\n\n    this._requestLevel3Snapshot.cancel();\n  }\n\n  _beforeConnect() {\n    this._wss.on(\"connected\", this._startPing.bind(this));\n\n    this._wss.on(\"disconnected\", this._stopPing.bind(this));\n\n    this._wss.on(\"closed\", this._stopPing.bind(this));\n  }\n\n  _startPing() {\n    clearInterval(this._pingInterval);\n    this._pingInterval = setInterval(this._sendPing.bind(this), this._pingIntervalTime);\n  }\n\n  _stopPing() {\n    clearInterval(this._pingInterval);\n  }\n\n  _sendPing() {\n    if (this._wss) {\n      this._wss.send(JSON.stringify({\n        id: new Date().getTime(),\n        type: \"ping\"\n      }));\n    }\n  }\n  /**\n   * Kucoin requires a token that is obtained from a REST endpoint. We make the synchronous\n   * _connect method create a temporary _wss instance so that subsequent calls to _connect\n   * are idempotent and only a single socket connection is created. Then the _connectAsync\n   * call is performed that does the REST token fetching and the connection.\n   */\n\n\n  _connect() {\n    if (!this._wss) {\n      this._wss = {\n        status: \"connecting\"\n      };\n      if (this.wssPath) super._connect();else this._connectAsync();\n    }\n  }\n\n  async _connectAsync() {\n    let wssPath; // Retry http request until successful\n\n    while (!wssPath) {\n      try {\n        const raw = await https.post(\"https://openapi-v2.kucoin.com/api/v1/bullet-public\"); // prettier-ignore\n\n        if (!raw.data || !raw.data.token) throw new Error(\"Unexpected token response\");\n        const {\n          token,\n          instanceServers\n        } = raw.data;\n        const {\n          endpoint,\n          pingInterval\n        } = instanceServers[0];\n        this._connectId = crypto_1.default.randomBytes(24).toString(\"hex\");\n        this._pingIntervalTime = pingInterval;\n        wssPath = `${endpoint}?token=${token}&connectId=${this._connectId}`;\n      } catch (ex) {\n        this._onError(ex);\n\n        await (0, Util_1.wait)(this.connectInitTimeoutMs);\n      }\n    } // Construct a socket and bind all events\n\n\n    this._wss = this._wssFactory(wssPath);\n\n    this._wss.on(\"error\", this._onError.bind(this));\n\n    this._wss.on(\"connecting\", this._onConnecting.bind(this));\n\n    this._wss.on(\"connected\", this._onConnected.bind(this));\n\n    this._wss.on(\"disconnected\", this._onDisconnected.bind(this));\n\n    this._wss.on(\"closing\", this._onClosing.bind(this));\n\n    this._wss.on(\"closed\", this._onClosed.bind(this));\n\n    this._wss.on(\"message\", msg => {\n      try {\n        this._onMessage(msg);\n      } catch (ex) {\n        this._onError(ex);\n      }\n    });\n\n    if (this._beforeConnect) this._beforeConnect();\n\n    this._wss.connect();\n  }\n\n  __sendMessage(msg) {\n    this._wss.send(msg);\n  }\n\n  _sendSubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"subscribe\",\n      topic: \"/market/snapshot:\" + remote_id,\n      privateChannel: false,\n      response: true\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"unsubscribe\",\n      topic: \"/market/snapshot:\" + remote_id,\n      privateChannel: false,\n      response: true\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"subscribe\",\n      topic: \"/market/match:\" + remote_id,\n      privateChannel: false,\n      response: true\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"unsubscribe\",\n      topic: \"/market/match:\" + remote_id,\n      privateChannel: false,\n      response: true\n    }));\n  }\n\n  _sendSubCandles(remote_id) {\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"subscribe\",\n      topic: `/market/candles:${remote_id}_${candlePeriod(this.candlePeriod)}`,\n      privateChannel: false,\n      response: true\n    }));\n  }\n\n  _sendUnsubCandles(remote_id) {\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"unsubscribe\",\n      topic: `/market/candles:${remote_id}_${candlePeriod(this.candlePeriod)}`,\n      privateChannel: false,\n      response: true\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    const market = this._level2UpdateSubs.get(remote_id);\n\n    this._requestLevel2Snapshot(market);\n\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"subscribe\",\n      topic: \"/market/level2:\" + remote_id,\n      response: true\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"unsubscribe\",\n      topic: \"/market/level2:\" + remote_id,\n      response: true\n    }));\n  }\n\n  _sendSubLevel3Updates(remote_id) {\n    const market = this._level3UpdateSubs.get(remote_id);\n\n    this._requestLevel3Snapshot(market);\n\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"subscribe\",\n      topic: \"/spotMarket/level3:\" + remote_id,\n      response: true\n    }));\n  }\n\n  _sendUnsubLevel3Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      id: new Date().getTime(),\n      type: \"unsubscribe\",\n      topic: \"/spotMarket/level3:\" + remote_id,\n      response: true\n    }));\n  }\n\n  _onMessage(raw) {\n    const replaced = raw.replace(/:(\\d+\\.{0,1}\\d+)(,|\\})/g, ':\"$1\"$2');\n\n    try {\n      const msgs = JSON.parse(replaced);\n\n      if (Array.isArray(msgs)) {\n        for (const msg of msgs) {\n          this._processMessage(msg);\n        }\n      } else {\n        this._processMessage(msgs);\n      }\n    } catch (ex) {\n      this._onError(ex);\n    }\n  }\n\n  _processMessage(msg) {\n    if (msg.type === \"ack\") {\n      return;\n    }\n\n    if (msg.type === \"error\") {\n      const err = new Error(msg.data);\n      err.msg = msg;\n\n      this._onError(err);\n\n      return;\n    } // trades\n\n\n    if (msg.subject === \"trade.l3match\") {\n      this._processTrades(msg);\n\n      return;\n    } // candles\n\n\n    if (msg.subject === \"trade.candles.update\") {\n      this._processCandles(msg);\n\n      return;\n    } // tickers\n\n\n    if (msg.subject === \"trade.snapshot\") {\n      this._processTicker(msg);\n\n      return;\n    } // l2 updates\n\n\n    if (msg.subject === \"trade.l2update\") {\n      this._processL2Update(msg);\n\n      return;\n    } // l3 received\n\n\n    if (msg.subject === \"received\") {\n      this._processL3UpdateReceived(msg);\n\n      return;\n    } // l3 open\n\n\n    if (msg.subject === \"open\") {\n      this._processL3UpdateOpen(msg);\n\n      return;\n    } // l3 done\n\n\n    if (msg.subject === \"done\") {\n      this._processL3UpdateDone(msg);\n\n      return;\n    } // l3 match\n\n\n    if (msg.subject === \"match\") {\n      this._processL3UpdateMatch(msg);\n\n      return;\n    } // l3 change\n\n\n    if (msg.subject === \"update\") {\n      this._processL3UpdateUpdate(msg);\n\n      return;\n    }\n  }\n\n  _processTrades(msg) {\n    let {\n      symbol,\n      time,\n      side,\n      size,\n      price,\n      tradeId,\n      makerOrderId,\n      takerOrderId\n    } = msg.data;\n\n    const market = this._tradeSubs.get(symbol);\n\n    if (!market) {\n      return;\n    }\n\n    if (time.length === 19) {\n      time = time.substring(0, 13);\n    }\n\n    const trade = new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: tradeId,\n      side: side,\n      unix: parseInt(time),\n      price: price,\n      amount: size,\n      buyOrderId: side === \"buy\" ? makerOrderId : takerOrderId,\n      sellOrderId: side === \"sell\" ? makerOrderId : takerOrderId\n    });\n    this.emit(\"trade\", trade, market);\n  }\n  /**\n  {\n      \"type\":\"message\",\n      \"topic\":\"/market/candles:BTC-USDT_1hour\",\n      \"subject\":\"trade.candles.update\",\n      \"data\":{\n           \"symbol\":\"BTC-USDT\",    // symbol\n          \"candles\":[\n               \"1589968800\",   // Start time of the candle cycle\n              \"9786.9\",       // open price\n              \"9740.8\",       // close price\n              \"9806.1\",       // high price\n              \"9732\",         // low price\n              \"27.45649579\",  // Transaction volume\n              \"268280.09830877\"   // Transaction amount\n          ],\n          \"time\":1589970010253893337  // now（us）\n      }\n  }\n  */\n\n\n  _processCandles(msg) {\n    const {\n      symbol,\n      candles\n    } = msg.data;\n\n    const market = this._candleSubs.get(symbol);\n\n    if (!market) return;\n    const result = new Candle_1.Candle(Number(candles[0] * 1000), candles[1], candles[3], candles[4], candles[2], candles[5]);\n    this.emit(\"candle\", result, market);\n  }\n\n  _processTicker(msg) {\n    const {\n      symbol,\n      high,\n      low,\n      datetime,\n      vol,\n      lastTradedPrice,\n      changePrice,\n      changeRate,\n      open,\n      sell,\n      buy\n    } = msg.data.data;\n\n    const market = this._tickerSubs.get(symbol);\n\n    if (!market) {\n      return;\n    }\n\n    const ticker = new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: parseFloat(datetime),\n      last: lastTradedPrice,\n      open: open,\n      high: high,\n      low: low,\n      volume: vol,\n      change: changePrice.toFixed ? changePrice.toFixed(8) : changePrice,\n      changePercent: changeRate.toFixed ? changeRate.toFixed(2) : changeRate,\n      bid: buy,\n      ask: sell,\n      bidVolume: undefined,\n      quoteVolume: undefined,\n      askVolume: undefined\n    });\n    this.emit(\"ticker\", ticker, market);\n  }\n  /**\n  {\n    \"data\":{\n      \"sequenceStart\":\"1584724386150\",\n      \"symbol\":\"BTC-USDT\",\n      \"changes\":{\n        \"asks\":[\n          [\"9642.7\",\"0.386\",\"1584724386150\"]\n        ],\n        \"bids\":[]\n      },\n      \"sequenceEnd\":\"1584724386150\"\n    },\n    \"subject\":\"trade.l2update\",\n    \"topic\":\"/market/level2:BTC-USDT\",\n    \"type\":\"message\"\n  }\n  */\n\n\n  _processL2Update(msg) {\n    const {\n      symbol,\n      changes,\n      sequenceStart,\n      sequenceEnd\n    } = msg.data;\n\n    const market = this._level2UpdateSubs.get(symbol);\n\n    if (!market) {\n      return;\n    }\n\n    const asks = changes.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    const bids = changes.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    const lastSequenceId = Number(sequenceEnd);\n    const l2Update = new Level2Update_1.Level2Update({\n      exchange: \"KuCoin\",\n      base: market.base,\n      quote: market.quote,\n      sequenceId: Number(sequenceStart),\n      sequenceLast: lastSequenceId,\n      lastSequenceId,\n      asks,\n      bids\n    });\n    this.emit(\"l2update\", l2Update, market);\n  }\n  /**\n  {\n    \"code\": \"200000\",\n    \"data\": {\n      \"sequence\": \"1584724519811\",\n      \"asks\": [\n        [\n          \"9631.9\",\n          \"1.62256573\"\n        ],\n        [\n          \"9632\",\n          \"0.00000001\"\n        ]\n      ],\n      \"bids\": [\n        [\n          \"9631.8\",\n          \"0.19411805\"\n        ],\n        [\n          \"9631.6\",\n          \"0.00094623\"\n        ]\n      ],\n      \"time\": 1591469595966\n    }\n  }\n  */\n\n\n  async __requestLevel2Snapshot(market) {\n    try {\n      const remote_id = market.id;\n      const uri = `https://api.kucoin.com/api/v1/market/orderbook/level2_100?symbol=${remote_id}`;\n      const raw = await https.get(uri);\n      const asks = raw.data.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n      const bids = raw.data.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n      const snapshot = new Level2Snapshots_1.Level2Snapshot({\n        exchange: \"KuCoin\",\n        sequenceId: Number(raw.data.sequence),\n        base: market.base,\n        quote: market.quote,\n        asks,\n        bids\n      });\n      this.emit(\"l2snapshot\", snapshot, market);\n    } catch (ex) {\n      this.emit(\"error\", ex);\n      await (0, Util_1.wait)(this.restThrottleMs);\n\n      this.__requestLevel2Snapshot(market);\n    }\n  }\n  /**\n  RECEIVED - This message type is really for informational purposes and\n  does not include a side or price. Similar to the done message below\n  we will include a psuedo-point with zeroedp price and amount to\n  maintain consistency with other implementations.\n  {\n    \"data\": {\n      \"symbol\": \"BTC-USDT\",\n      \"sequence\": \"1594781753800\",\n      \"orderId\": \"5f3aa0c724d57500070d36e7\",\n      \"clientOid\": \"cef1156e5f928d0e046a67891cdb780d\",\n      \"ts\": \"1597677767948119917\"\n    },\n    \"subject\": \"received\",\n    \"topic\": \"/spotMarket/level3:BTC-USDT\",\n    \"type\": \"message\"\n  }\n  */\n\n\n  _processL3UpdateReceived(msg) {\n    const {\n      symbol,\n      sequence,\n      orderId,\n      clientOid,\n      ts\n    } = msg.data;\n\n    const market = this._level3UpdateSubs.get(symbol);\n\n    if (!market) return;\n    const point = new Level3Point_1.Level3Point(orderId, \"0\", \"0\", {\n      type: msg.subject,\n      clientOid,\n      ts\n    });\n    const update = new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestampMs: Math.trunc(Number(ts) / 1e6),\n      sequenceId: Number(sequence),\n      asks: [point],\n      bids: [point]\n    });\n    this.emit(\"l3update\", update, market);\n  }\n  /**\n  OPEN\n  {\n    \"data\": {\n      \"symbol\": \"BTC-USDT\",\n      \"sequence\": \"1594781800484\",\n      \"side\": \"buy\",\n      \"orderTime\": \"1597678002842139731\",\n      \"size\": \"0.65898942\",\n      \"orderId\": \"5f3aa1b2b6aeb200072bd6d8\",\n      \"price\": \"12139.8\",\n      \"ts\": \"1597678002842139731\"\n    },\n    \"subject\": \"open\",\n    \"topic\": \"/spotMarket/level3:BTC-USDT\",\n    \"type\": \"message\"\n  }\n  */\n\n\n  _processL3UpdateOpen(msg) {\n    const {\n      symbol,\n      sequence,\n      side,\n      orderTime,\n      size,\n      orderId,\n      price,\n      ts\n    } = msg.data;\n\n    const market = this._level3UpdateSubs.get(symbol);\n\n    if (!market) return;\n    const asks = [];\n    const bids = [];\n    const point = new Level3Point_1.Level3Point(orderId, price, size, {\n      type: msg.subject,\n      orderTime,\n      ts\n    });\n    if (side === \"buy\") bids.push(point);else asks.push(point);\n    const update = new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: Number(sequence),\n      timestampMs: Math.trunc(Number(ts) / 1e6),\n      asks,\n      bids\n    });\n    this.emit(\"l3update\", update, market);\n  }\n  /**\n  DONE - because done does not include price,size, or side of book,\n  we will create a zeroed point on both sides of the book. This keeps\n  consistency with other order books that always have a point.\n   {\n    \"data\": {\n      \"symbol\": \"BTC-USDT\",\n      \"reason\": \"canceled\",\n      \"sequence\": \"1594781816444\",\n      \"orderId\": \"5f3aa1f3b640150007baf5d6\",\n      \"ts\": \"1597678072795057282\"\n    },\n    \"subject\": \"done\",\n    \"topic\": \"/spotMarket/level3:BTC-USDT\",\n    \"type\": \"message\"\n  }\n  */\n\n\n  _processL3UpdateDone(msg) {\n    const {\n      symbol,\n      sequence,\n      orderId,\n      reason,\n      ts\n    } = msg.data;\n\n    const market = this._level3UpdateSubs.get(symbol);\n\n    if (!market) return;\n    const point = new Level3Point_1.Level3Point(orderId, \"0\", \"0\", {\n      type: msg.subject,\n      reason,\n      ts\n    });\n    const update = new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: Number(sequence),\n      timestampMs: Math.trunc(Number(ts) / 1e6),\n      asks: [point],\n      bids: [point]\n    });\n    this.emit(\"l3update\", update, market);\n  }\n  /**\n  MATCH - for the sake of the update, we will follow with the\n  information that is updated in the orderbook, that is the maker. In\n  this case, the remainSize is the value that should be adjusted\n  for the maker's order.\n  {\n    \"data\": {\n      \"symbol\": \"BTC-USDT\",\n      \"sequence\": \"1594781824886\",\n      \"side\": \"sell\",\n      \"size\": \"0.04541835\",\n      \"price\": \"12161.1\",\n      \"takerOrderId\": \"5f3aa220be5dd1000815506e\",\n      \"makerOrderId\": \"5f3aa21db6aeb200072ce502\",\n      \"tradeId\": \"5f3aa22078577835017d3de2\",\n      \"remainSize\": \"1.44964657\",\n      \"ts\": \"1597678112828040864\"\n    },\n    \"subject\": \"match\",\n    \"topic\": \"/spotMarket/level3:BTC-USDT\",\n    \"type\": \"message\"\n  }\n  */\n\n\n  _processL3UpdateMatch(msg) {\n    const {\n      symbol,\n      sequence,\n      side,\n      price,\n      size,\n      remainSize,\n      takerOrderId,\n      makerOrderId,\n      tradeId,\n      ts\n    } = msg.data;\n\n    const market = this._level3UpdateSubs.get(symbol);\n\n    if (!market) return;\n    const asks = [];\n    const bids = [];\n    const point = new Level3Point_1.Level3Point(makerOrderId, \"0\", remainSize, {\n      type: msg.subject,\n      remainSize,\n      takerOrderId,\n      makerOrderId,\n      tradeId,\n      tradePrice: price,\n      tradeSize: size,\n      ts\n    }); // The update is from the perspective of the maker. The side is side\n    // of the taker, so we need to reverse it. That is a buy should\n    // put the update on the ask side and a sell should put the update\n    // on the bid side.\n\n    if (side === \"buy\") asks.push(point);else bids.push(point);\n    const update = new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: Number(sequence),\n      timestampMs: Math.trunc(Number(ts) / 1e6),\n      asks,\n      bids\n    });\n    this.emit(\"l3update\", update, market);\n  }\n  /**\n  CHANGE - because change does not include the side, we again duplicate\n  points in the asks and bids. The price is also not inclued and is\n  zeroed to maintain consistency with the remainder of the library\n  {\n    \"data\": {\n      \"symbol\": \"BTC-USDT\",\n      \"sequence\": \"1594781878279\",\n      \"size\": \"0.0087306\",\n      \"orderId\": \"5f3aa2d2d5f3da0007802966\",\n      \"ts\": \"1597678290249785626\"\n    },\n    \"subject\": \"update\",\n    \"topic\": \"/spotMarket/level3:BTC-USDT\",\n    \"type\": \"message\"\n  }\n  */\n\n\n  _processL3UpdateUpdate(msg) {\n    const {\n      symbol,\n      sequence,\n      orderId,\n      size,\n      ts\n    } = msg.data;\n\n    const market = this._level3UpdateSubs.get(symbol);\n\n    if (!market) return;\n    const point = new Level3Point_1.Level3Point(orderId, \"0\", size, {\n      type: msg.subject,\n      ts\n    });\n    const update = new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: Number(sequence),\n      timestampMs: Math.trunc(Number(ts) / 1e6),\n      asks: [point],\n      bids: [point]\n    });\n    this.emit(\"l3update\", update, market);\n  }\n\n  async __requestLevel3Snapshot(market) {\n    try {\n      const remote_id = market.id;\n      const uri = `https://api.kucoin.com/api/v1/market/orderbook/level3?symbol=${remote_id}`;\n      const raw = await https.get(uri);\n      const timestampMs = raw.data.time;\n      const sequenceId = Number(raw.data.sequence);\n      const asks = raw.data.asks.map(p => new Level3Point_1.Level3Point(p[0], p[1], p[2], {\n        orderTime: p[3],\n        timestampMs: Math.trunc(Number(p[3]) / 1e6)\n      }));\n      const bids = raw.data.bids.map(p => new Level3Point_1.Level3Point(p[0], p[1], p[2], {\n        orderTime: p[3],\n        timestampMs: Math.trunc(Number(p[3]) / 1e6)\n      }));\n      const snapshot = new Level3Snapshot_1.Level3Snapshot({\n        exchange: this.name,\n        base: market.base,\n        quote: market.quote,\n        sequenceId,\n        timestampMs,\n        asks,\n        bids\n      });\n      this.emit(\"l3snapshot\", snapshot, market);\n    } catch (ex) {\n      this.emit(\"error\", ex);\n      await (0, Util_1.wait)(this.restThrottleMs);\n\n      this.__requestLevel3Snapshot(market);\n    }\n  }\n\n}\n\nexports.KucoinClient = KucoinClient;\n\nfunction candlePeriod(period) {\n  switch (period) {\n    case CandlePeriod_1.CandlePeriod._1m:\n      return \"1min\";\n\n    case CandlePeriod_1.CandlePeriod._3m:\n      return \"3min\";\n\n    case CandlePeriod_1.CandlePeriod._15m:\n      return \"15min\";\n\n    case CandlePeriod_1.CandlePeriod._30m:\n      return \"30min\";\n\n    case CandlePeriod_1.CandlePeriod._1h:\n      return \"1hour\";\n\n    case CandlePeriod_1.CandlePeriod._2h:\n      return \"2hour\";\n\n    case CandlePeriod_1.CandlePeriod._4h:\n      return \"4hour\";\n\n    case CandlePeriod_1.CandlePeriod._6h:\n      return \"6hour\";\n\n    case CandlePeriod_1.CandlePeriod._8h:\n      return \"8hour\";\n\n    case CandlePeriod_1.CandlePeriod._12h:\n      return \"12hour\";\n\n    case CandlePeriod_1.CandlePeriod._1d:\n      return \"1day\";\n\n    case CandlePeriod_1.CandlePeriod._1w:\n      return \"1week\";\n  }\n}","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/KucoinClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable @typescript-eslint/no-implied-eval */\nimport { BasicClient } from \"../BasicClient\";\nimport { CandlePeriod } from \"../CandlePeriod\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { CancelableFn } from \"../flowcontrol/Fn\";\nimport { wait } from \"../Util\";\nimport crypto from \"crypto\";\nimport { Trade } from \"../Trade\";\nimport { Candle } from \"../Candle\";\nimport { Ticker } from \"../Ticker\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Update } from \"../Level2Update\";\nimport { Market } from \"../Market\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport * as https from \"../Https\";\nimport { Level3Update } from \"../Level3Update\";\nimport { throttle } from \"../flowcontrol/Throttle\";\nimport { Level3Point } from \"../Level3Point\";\nimport { Level3Snapshot } from \"../Level3Snapshot\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\n\nexport type KucoinClientOptions = ClientOptions & {\n    sendThrottleMs?: number;\n    restThrottleMs?: number;\n};\n\n/**\n * Kucoin client has a hard limit of 100 subscriptions per socket connection.\n * When more than 100 subscriptions are made on a single socket it will generate\n * an error that says \"509: exceed max subscription count limitation of 100 per session\".\n * To work around this will require creating multiple clients if you makem ore than 100\n * subscriptions.\n */\nexport class KucoinClient extends BasicClient {\n    public candlePeriod: CandlePeriod;\n    public readonly restThrottleMs: number;\n    public readonly connectInitTimeoutMs: number;\n\n    protected _pingIntervalTime: number;\n    protected _connectId: string;\n    protected _sendMessage: CancelableFn;\n    protected _requestLevel2Snapshot: CancelableFn;\n    protected _requestLevel3Snapshot: CancelableFn;\n    protected _pingInterval: NodeJS.Timeout;\n\n    constructor({\n        wssPath,\n        watcherMs,\n        sendThrottleMs = 10,\n        restThrottleMs = 250,\n    }: KucoinClientOptions = {}) {\n        super(wssPath, \"KuCoin\", undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasCandles = true;\n        this.hasLevel2Snapshots = false;\n        this.hasLevel2Updates = true;\n        this.hasLevel3Updates = false;\n        this.candlePeriod = CandlePeriod._1m;\n        this._pingIntervalTime = 50000;\n        this.restThrottleMs = restThrottleMs;\n        this.connectInitTimeoutMs = 5000;\n        this._sendMessage = throttle(this.__sendMessage.bind(this), sendThrottleMs);\n        this._requestLevel2Snapshot = throttle(\n            this.__requestLevel2Snapshot.bind(this),\n            restThrottleMs,\n        );\n        this._requestLevel3Snapshot = throttle(\n            this.__requestLevel3Snapshot.bind(this),\n            restThrottleMs,\n        );\n    }\n\n    protected _beforeClose() {\n        this._sendMessage.cancel();\n        this._requestLevel2Snapshot.cancel();\n        this._requestLevel3Snapshot.cancel();\n    }\n\n    protected _beforeConnect() {\n        this._wss.on(\"connected\", this._startPing.bind(this));\n        this._wss.on(\"disconnected\", this._stopPing.bind(this));\n        this._wss.on(\"closed\", this._stopPing.bind(this));\n    }\n\n    protected _startPing() {\n        clearInterval(this._pingInterval);\n        this._pingInterval = setInterval(this._sendPing.bind(this), this._pingIntervalTime);\n    }\n\n    protected _stopPing() {\n        clearInterval(this._pingInterval);\n    }\n\n    protected _sendPing() {\n        if (this._wss) {\n            this._wss.send(\n                JSON.stringify({\n                    id: new Date().getTime(),\n                    type: \"ping\",\n                }),\n            );\n        }\n    }\n\n    /**\n     * Kucoin requires a token that is obtained from a REST endpoint. We make the synchronous\n     * _connect method create a temporary _wss instance so that subsequent calls to _connect\n     * are idempotent and only a single socket connection is created. Then the _connectAsync\n     * call is performed that does the REST token fetching and the connection.\n     */\n    protected _connect() {\n        if (!this._wss) {\n            this._wss = { status: \"connecting\" } as any;\n            if (this.wssPath) super._connect();\n            else this._connectAsync();\n        }\n    }\n\n    protected async _connectAsync() {\n        let wssPath;\n\n        // Retry http request until successful\n        while (!wssPath) {\n            try {\n                const raw: any = await https.post(\"https://openapi-v2.kucoin.com/api/v1/bullet-public\"); // prettier-ignore\n                if (!raw.data || !raw.data.token) throw new Error(\"Unexpected token response\");\n                const { token, instanceServers } = raw.data;\n                const { endpoint, pingInterval } = instanceServers[0];\n                this._connectId = crypto.randomBytes(24).toString(\"hex\");\n                this._pingIntervalTime = pingInterval;\n                wssPath = `${endpoint}?token=${token}&connectId=${this._connectId}`;\n            } catch (ex) {\n                this._onError(ex);\n                await wait(this.connectInitTimeoutMs);\n            }\n        }\n\n        // Construct a socket and bind all events\n        this._wss = this._wssFactory(wssPath);\n        this._wss.on(\"error\", this._onError.bind(this));\n        this._wss.on(\"connecting\", this._onConnecting.bind(this));\n        this._wss.on(\"connected\", this._onConnected.bind(this));\n        this._wss.on(\"disconnected\", this._onDisconnected.bind(this));\n        this._wss.on(\"closing\", this._onClosing.bind(this));\n        this._wss.on(\"closed\", this._onClosed.bind(this));\n        this._wss.on(\"message\", msg => {\n            try {\n                this._onMessage(msg);\n            } catch (ex) {\n                this._onError(ex);\n            }\n        });\n        if (this._beforeConnect) this._beforeConnect();\n        this._wss.connect();\n    }\n\n    protected __sendMessage(msg) {\n        this._wss.send(msg);\n    }\n\n    protected _sendSubTicker(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"subscribe\",\n                topic: \"/market/snapshot:\" + remote_id,\n                privateChannel: false,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"unsubscribe\",\n                topic: \"/market/snapshot:\" + remote_id,\n                privateChannel: false,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"subscribe\",\n                topic: \"/market/match:\" + remote_id,\n                privateChannel: false,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"unsubscribe\",\n                topic: \"/market/match:\" + remote_id,\n                privateChannel: false,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendSubCandles(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"subscribe\",\n                topic: `/market/candles:${remote_id}_${candlePeriod(this.candlePeriod)}`,\n                privateChannel: false,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendUnsubCandles(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"unsubscribe\",\n                topic: `/market/candles:${remote_id}_${candlePeriod(this.candlePeriod)}`,\n                privateChannel: false,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id: string) {\n        const market = this._level2UpdateSubs.get(remote_id);\n        this._requestLevel2Snapshot(market);\n\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"subscribe\",\n                topic: \"/market/level2:\" + remote_id,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"unsubscribe\",\n                topic: \"/market/level2:\" + remote_id,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendSubLevel3Updates(remote_id: string) {\n        const market = this._level3UpdateSubs.get(remote_id);\n        this._requestLevel3Snapshot(market);\n\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"subscribe\",\n                topic: \"/spotMarket/level3:\" + remote_id,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel3Updates(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                id: new Date().getTime(),\n                type: \"unsubscribe\",\n                topic: \"/spotMarket/level3:\" + remote_id,\n                response: true,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n\n    protected _onMessage(raw: string) {\n        const replaced = raw.replace(/:(\\d+\\.{0,1}\\d+)(,|\\})/g, ':\"$1\"$2');\n        try {\n            const msgs = JSON.parse(replaced);\n\n            if (Array.isArray(msgs)) {\n                for (const msg of msgs) {\n                    this._processMessage(msg);\n                }\n            } else {\n                this._processMessage(msgs);\n            }\n        } catch (ex) {\n            this._onError(ex);\n        }\n    }\n\n    protected _processMessage(msg) {\n        if (msg.type === \"ack\") {\n            return;\n        }\n\n        if (msg.type === \"error\") {\n            const err: any = new Error(msg.data);\n            err.msg = msg;\n            this._onError(err);\n            return;\n        }\n\n        // trades\n        if (msg.subject === \"trade.l3match\") {\n            this._processTrades(msg);\n            return;\n        }\n\n        // candles\n        if (msg.subject === \"trade.candles.update\") {\n            this._processCandles(msg);\n            return;\n        }\n\n        // tickers\n        if (msg.subject === \"trade.snapshot\") {\n            this._processTicker(msg);\n            return;\n        }\n\n        // l2 updates\n        if (msg.subject === \"trade.l2update\") {\n            this._processL2Update(msg);\n            return;\n        }\n\n        // l3 received\n        if (msg.subject === \"received\") {\n            this._processL3UpdateReceived(msg);\n            return;\n        }\n\n        // l3 open\n        if (msg.subject === \"open\") {\n            this._processL3UpdateOpen(msg);\n            return;\n        }\n\n        // l3 done\n        if (msg.subject === \"done\") {\n            this._processL3UpdateDone(msg);\n            return;\n        }\n\n        // l3 match\n        if (msg.subject === \"match\") {\n            this._processL3UpdateMatch(msg);\n            return;\n        }\n\n        // l3 change\n        if (msg.subject === \"update\") {\n            this._processL3UpdateUpdate(msg);\n            return;\n        }\n    }\n\n    protected _processTrades(msg: any) {\n        let { symbol, time, side, size, price, tradeId, makerOrderId, takerOrderId } = msg.data;\n        const market = this._tradeSubs.get(symbol);\n        if (!market) {\n            return;\n        }\n\n        if (time.length === 19) {\n            time = time.substring(0, 13);\n        }\n\n        const trade = new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: tradeId,\n            side: side,\n            unix: parseInt(time),\n            price: price,\n            amount: size,\n            buyOrderId: side === \"buy\" ? makerOrderId : takerOrderId,\n            sellOrderId: side === \"sell\" ? makerOrderId : takerOrderId,\n        });\n\n        this.emit(\"trade\", trade, market);\n    }\n\n    /**\n    {\n        \"type\":\"message\",\n        \"topic\":\"/market/candles:BTC-USDT_1hour\",\n        \"subject\":\"trade.candles.update\",\n        \"data\":{\n\n            \"symbol\":\"BTC-USDT\",    // symbol\n            \"candles\":[\n\n                \"1589968800\",   // Start time of the candle cycle\n                \"9786.9\",       // open price\n                \"9740.8\",       // close price\n                \"9806.1\",       // high price\n                \"9732\",         // low price\n                \"27.45649579\",  // Transaction volume\n                \"268280.09830877\"   // Transaction amount\n            ],\n            \"time\":1589970010253893337  // now（us）\n        }\n    }\n   */\n    protected _processCandles(msg: any) {\n        const { symbol, candles } = msg.data;\n        const market = this._candleSubs.get(symbol);\n        if (!market) return;\n\n        const result = new Candle(\n            Number(candles[0] * 1000),\n            candles[1],\n            candles[3],\n            candles[4],\n            candles[2],\n            candles[5],\n        );\n        this.emit(\"candle\", result, market);\n    }\n\n    protected _processTicker(msg: any) {\n        const {\n            symbol,\n            high,\n            low,\n            datetime,\n            vol,\n            lastTradedPrice,\n            changePrice,\n            changeRate,\n            open,\n            sell,\n            buy,\n        } = msg.data.data;\n        const market = this._tickerSubs.get(symbol);\n\n        if (!market) {\n            return;\n        }\n\n        const ticker = new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: parseFloat(datetime),\n            last: lastTradedPrice,\n            open: open,\n            high: high,\n            low: low,\n            volume: vol,\n            change: changePrice.toFixed ? changePrice.toFixed(8) : changePrice,\n            changePercent: changeRate.toFixed ? changeRate.toFixed(2) : changeRate,\n            bid: buy,\n            ask: sell,\n            bidVolume: undefined,\n            quoteVolume: undefined,\n            askVolume: undefined,\n        });\n\n        this.emit(\"ticker\", ticker, market);\n    }\n\n    /**\n    {\n      \"data\":{\n        \"sequenceStart\":\"1584724386150\",\n        \"symbol\":\"BTC-USDT\",\n        \"changes\":{\n          \"asks\":[\n            [\"9642.7\",\"0.386\",\"1584724386150\"]\n          ],\n          \"bids\":[]\n        },\n        \"sequenceEnd\":\"1584724386150\"\n      },\n      \"subject\":\"trade.l2update\",\n      \"topic\":\"/market/level2:BTC-USDT\",\n      \"type\":\"message\"\n    }\n   */\n    protected _processL2Update(msg: any) {\n        const { symbol, changes, sequenceStart, sequenceEnd } = msg.data;\n        const market = this._level2UpdateSubs.get(symbol);\n\n        if (!market) {\n            return;\n        }\n\n        const asks = changes.asks.map(p => new Level2Point(p[0], p[1]));\n        const bids = changes.bids.map(p => new Level2Point(p[0], p[1]));\n        const lastSequenceId = Number(sequenceEnd);\n        const l2Update = new Level2Update({\n            exchange: \"KuCoin\",\n            base: market.base,\n            quote: market.quote,\n            sequenceId: Number(sequenceStart),\n            sequenceLast: lastSequenceId, // deprecated, to be removed\n            lastSequenceId,\n            asks,\n            bids,\n        });\n        this.emit(\"l2update\", l2Update, market);\n    }\n\n    /**\n   {\n      \"code\": \"200000\",\n      \"data\": {\n        \"sequence\": \"1584724519811\",\n        \"asks\": [\n          [\n            \"9631.9\",\n            \"1.62256573\"\n          ],\n          [\n            \"9632\",\n            \"0.00000001\"\n          ]\n        ],\n        \"bids\": [\n          [\n            \"9631.8\",\n            \"0.19411805\"\n          ],\n          [\n            \"9631.6\",\n            \"0.00094623\"\n          ]\n        ],\n        \"time\": 1591469595966\n      }\n    }\n   */\n    protected async __requestLevel2Snapshot(market: Market) {\n        try {\n            const remote_id = market.id;\n            const uri = `https://api.kucoin.com/api/v1/market/orderbook/level2_100?symbol=${remote_id}`;\n            const raw: any = await https.get(uri);\n\n            const asks = raw.data.asks.map(p => new Level2Point(p[0], p[1]));\n            const bids = raw.data.bids.map(p => new Level2Point(p[0], p[1]));\n            const snapshot = new Level2Snapshot({\n                exchange: \"KuCoin\",\n                sequenceId: Number(raw.data.sequence),\n                base: market.base,\n                quote: market.quote,\n                asks,\n                bids,\n            });\n            this.emit(\"l2snapshot\", snapshot, market);\n        } catch (ex) {\n            this.emit(\"error\", ex);\n            await wait(this.restThrottleMs);\n            this.__requestLevel2Snapshot(market);\n        }\n    }\n\n    /**\n   RECEIVED - This message type is really for informational purposes and\n   does not include a side or price. Similar to the done message below\n   we will include a psuedo-point with zeroedp price and amount to\n   maintain consistency with other implementations.\n   {\n      \"data\": {\n        \"symbol\": \"BTC-USDT\",\n        \"sequence\": \"1594781753800\",\n        \"orderId\": \"5f3aa0c724d57500070d36e7\",\n        \"clientOid\": \"cef1156e5f928d0e046a67891cdb780d\",\n        \"ts\": \"1597677767948119917\"\n      },\n      \"subject\": \"received\",\n      \"topic\": \"/spotMarket/level3:BTC-USDT\",\n      \"type\": \"message\"\n    }\n  */\n    protected _processL3UpdateReceived(msg: any) {\n        const { symbol, sequence, orderId, clientOid, ts } = msg.data;\n\n        const market = this._level3UpdateSubs.get(symbol);\n        if (!market) return;\n\n        const point = new Level3Point(orderId, \"0\", \"0\", { type: msg.subject, clientOid, ts });\n\n        const update = new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestampMs: Math.trunc(Number(ts) / 1e6),\n            sequenceId: Number(sequence),\n            asks: [point],\n            bids: [point],\n        });\n        this.emit(\"l3update\", update, market);\n    }\n\n    /**\n    OPEN\n    {\n      \"data\": {\n        \"symbol\": \"BTC-USDT\",\n        \"sequence\": \"1594781800484\",\n        \"side\": \"buy\",\n        \"orderTime\": \"1597678002842139731\",\n        \"size\": \"0.65898942\",\n        \"orderId\": \"5f3aa1b2b6aeb200072bd6d8\",\n        \"price\": \"12139.8\",\n        \"ts\": \"1597678002842139731\"\n      },\n      \"subject\": \"open\",\n      \"topic\": \"/spotMarket/level3:BTC-USDT\",\n      \"type\": \"message\"\n    }\n   */\n    protected _processL3UpdateOpen(msg: any) {\n        const { symbol, sequence, side, orderTime, size, orderId, price, ts } = msg.data;\n\n        const market = this._level3UpdateSubs.get(symbol);\n        if (!market) return;\n\n        const asks = [];\n        const bids = [];\n\n        const point = new Level3Point(orderId, price, size, { type: msg.subject, orderTime, ts });\n        if (side === \"buy\") bids.push(point);\n        else asks.push(point);\n\n        const update = new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: Number(sequence),\n            timestampMs: Math.trunc(Number(ts) / 1e6),\n            asks,\n            bids,\n        });\n        this.emit(\"l3update\", update, market);\n    }\n\n    /**\n    DONE - because done does not include price,size, or side of book,\n    we will create a zeroed point on both sides of the book. This keeps\n    consistency with other order books that always have a point.\n\n    {\n      \"data\": {\n        \"symbol\": \"BTC-USDT\",\n        \"reason\": \"canceled\",\n        \"sequence\": \"1594781816444\",\n        \"orderId\": \"5f3aa1f3b640150007baf5d6\",\n        \"ts\": \"1597678072795057282\"\n      },\n      \"subject\": \"done\",\n      \"topic\": \"/spotMarket/level3:BTC-USDT\",\n      \"type\": \"message\"\n    }\n   */\n    protected _processL3UpdateDone(msg: any) {\n        const { symbol, sequence, orderId, reason, ts } = msg.data;\n\n        const market = this._level3UpdateSubs.get(symbol);\n        if (!market) return;\n\n        const point = new Level3Point(orderId, \"0\", \"0\", { type: msg.subject, reason, ts });\n\n        const update = new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: Number(sequence),\n            timestampMs: Math.trunc(Number(ts) / 1e6),\n            asks: [point],\n            bids: [point],\n        });\n        this.emit(\"l3update\", update, market);\n    }\n\n    /**\n   MATCH - for the sake of the update, we will follow with the\n   information that is updated in the orderbook, that is the maker. In\n   this case, the remainSize is the value that should be adjusted\n   for the maker's order.\n   {\n      \"data\": {\n        \"symbol\": \"BTC-USDT\",\n        \"sequence\": \"1594781824886\",\n        \"side\": \"sell\",\n        \"size\": \"0.04541835\",\n        \"price\": \"12161.1\",\n        \"takerOrderId\": \"5f3aa220be5dd1000815506e\",\n        \"makerOrderId\": \"5f3aa21db6aeb200072ce502\",\n        \"tradeId\": \"5f3aa22078577835017d3de2\",\n        \"remainSize\": \"1.44964657\",\n        \"ts\": \"1597678112828040864\"\n      },\n      \"subject\": \"match\",\n      \"topic\": \"/spotMarket/level3:BTC-USDT\",\n      \"type\": \"message\"\n    }\n   */\n    protected _processL3UpdateMatch(msg: any) {\n        const {\n            symbol,\n            sequence,\n            side,\n            price,\n            size,\n            remainSize,\n            takerOrderId,\n            makerOrderId,\n            tradeId,\n            ts,\n        } = msg.data;\n\n        const market = this._level3UpdateSubs.get(symbol);\n        if (!market) return;\n\n        const asks = [];\n        const bids = [];\n\n        const point = new Level3Point(makerOrderId, \"0\", remainSize, {\n            type: msg.subject,\n            remainSize,\n            takerOrderId,\n            makerOrderId,\n            tradeId,\n            tradePrice: price,\n            tradeSize: size,\n            ts,\n        });\n\n        // The update is from the perspective of the maker. The side is side\n        // of the taker, so we need to reverse it. That is a buy should\n        // put the update on the ask side and a sell should put the update\n        // on the bid side.\n        if (side === \"buy\") asks.push(point);\n        else bids.push(point);\n\n        const update = new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: Number(sequence),\n            timestampMs: Math.trunc(Number(ts) / 1e6),\n            asks,\n            bids,\n        });\n\n        this.emit(\"l3update\", update, market);\n    }\n\n    /**\n   CHANGE - because change does not include the side, we again duplicate\n   points in the asks and bids. The price is also not inclued and is\n   zeroed to maintain consistency with the remainder of the library\n   {\n      \"data\": {\n        \"symbol\": \"BTC-USDT\",\n        \"sequence\": \"1594781878279\",\n        \"size\": \"0.0087306\",\n        \"orderId\": \"5f3aa2d2d5f3da0007802966\",\n        \"ts\": \"1597678290249785626\"\n      },\n      \"subject\": \"update\",\n      \"topic\": \"/spotMarket/level3:BTC-USDT\",\n      \"type\": \"message\"\n    }\n   */\n    protected _processL3UpdateUpdate(msg: any) {\n        const { symbol, sequence, orderId, size, ts } = msg.data;\n        const market = this._level3UpdateSubs.get(symbol);\n        if (!market) return;\n        const point = new Level3Point(orderId, \"0\", size, { type: msg.subject, ts });\n        const update = new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: Number(sequence),\n            timestampMs: Math.trunc(Number(ts) / 1e6),\n            asks: [point],\n            bids: [point],\n        });\n        this.emit(\"l3update\", update, market);\n    }\n\n    protected async __requestLevel3Snapshot(market: Market) {\n        try {\n            const remote_id = market.id;\n            const uri = `https://api.kucoin.com/api/v1/market/orderbook/level3?symbol=${remote_id}`;\n            const raw: any = await https.get(uri);\n\n            const timestampMs = raw.data.time;\n            const sequenceId = Number(raw.data.sequence);\n\n            const asks = raw.data.asks.map(\n                p =>\n                    new Level3Point(p[0], p[1], p[2], {\n                        orderTime: p[3],\n                        timestampMs: Math.trunc(Number(p[3]) / 1e6),\n                    }),\n            );\n            const bids = raw.data.bids.map(\n                p =>\n                    new Level3Point(p[0], p[1], p[2], {\n                        orderTime: p[3],\n                        timestampMs: Math.trunc(Number(p[3]) / 1e6),\n                    }),\n            );\n            const snapshot = new Level3Snapshot({\n                exchange: this.name,\n                base: market.base,\n                quote: market.quote,\n                sequenceId,\n                timestampMs,\n                asks,\n                bids,\n            });\n            this.emit(\"l3snapshot\", snapshot, market);\n        } catch (ex) {\n            this.emit(\"error\", ex);\n            await wait(this.restThrottleMs);\n            this.__requestLevel3Snapshot(market);\n        }\n    }\n}\n\nfunction candlePeriod(period) {\n    switch (period) {\n        case CandlePeriod._1m:\n            return \"1min\";\n        case CandlePeriod._3m:\n            return \"3min\";\n        case CandlePeriod._15m:\n            return \"15min\";\n        case CandlePeriod._30m:\n            return \"30min\";\n        case CandlePeriod._1h:\n            return \"1hour\";\n        case CandlePeriod._2h:\n            return \"2hour\";\n        case CandlePeriod._4h:\n            return \"4hour\";\n        case CandlePeriod._6h:\n            return \"6hour\";\n        case CandlePeriod._8h:\n            return \"8hour\";\n        case CandlePeriod._12h:\n            return \"12hour\";\n        case CandlePeriod._1d:\n            return \"1day\";\n        case CandlePeriod._1w:\n            return \"1week\";\n    }\n}\n"]},"metadata":{},"sourceType":"script"}