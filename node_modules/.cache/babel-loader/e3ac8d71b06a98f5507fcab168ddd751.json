{"ast":null,"code":"import'./App.css';import Canvas from'./components/Canvas/Canvas';import Menu from'./components/Menu/Menu';import useWebSocket,{ReadyState}from'react-use-websocket';import{useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// Initiate WebSocket connection\nvar wsBase=process.env.REACT_APP_WS_BASE_URL;var apiKey=process.env.REACT_APP_API_KEY;var _useWebSocket=useWebSocket(\"\".concat(wsBase,\"?api_key=\").concat(apiKey)),lastMessage=_useWebSocket.lastMessage,sendMessage=_useWebSocket.sendMessage,readyState=_useWebSocket.readyState;// Respond to new messages coming in from the data provider\nuseEffect(function(){if(lastMessage!==null){var data=JSON.parse(lastMessage.data);// If the welcome message is received, the app is ready\n// to request trade updates over the socket\n// e.g. BTC-USD on Coinbase\nif((data===null||data===void 0?void 0:data.MESSAGE)==='STREAMERWELCOME'){console.log('subscribing to channel...');var subRequest={\"action\":\"SubAdd\",\"subs\":[\"0~Coinbase~BTC~USD\"]};sendMessage(JSON.stringify(subRequest));}// If the app receives a trade update,\n// create a Transaction and log it to the console for now\nelse if((data===null||data===void 0?void 0:data.TYPE)==='0'){var transaction={exchange:data.M,coin:data.FSYM,price:data.P,amount:data.Q};console.log(\"\".concat(transaction.exchange,\": \").concat(transaction.amount,\" \").concat(transaction.coin,\" for $\").concat(transaction.price));}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[lastMessage]);// React to the state of the WebSocket connection\n// and just log it to the console for now\nuseEffect(function(){console.log('Connection is',readyState===ReadyState.OPEN?'ACTIVE':'INACTIVE');},[readyState]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Canvas,{}),/*#__PURE__*/_jsx(Menu,{})]});}export default App;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer-wip/src/App.tsx"],"names":["Canvas","Menu","useWebSocket","ReadyState","useEffect","App","wsBase","process","env","REACT_APP_WS_BASE_URL","apiKey","REACT_APP_API_KEY","lastMessage","sendMessage","readyState","data","JSON","parse","MESSAGE","console","log","subRequest","stringify","TYPE","transaction","exchange","M","coin","FSYM","price","P","amount","Q","OPEN"],"mappings":"AAAA,MAAO,WAAP,CACA,MAAOA,CAAAA,MAAP,KAAmB,4BAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,wBAAjB,CACA,MAAOC,CAAAA,YAAP,EAAuBC,UAAvB,KAAyC,qBAAzC,CACA,OAASC,SAAT,KAA0B,OAA1B,C,6IAGA,QAASC,CAAAA,GAAT,EAAe,CACb;AACA,GAAMC,CAAAA,MAAM,CAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA3B,CACA,GAAMC,CAAAA,MAAM,CAAGH,OAAO,CAACC,GAAR,CAAYG,iBAA3B,CACA,kBAIIT,YAAY,WAAII,MAAJ,qBAAsBI,MAAtB,EAJhB,CACEE,WADF,eACEA,WADF,CAEEC,WAFF,eAEEA,WAFF,CAGEC,UAHF,eAGEA,UAHF,CAMA;AACAV,SAAS,CAAC,UAAM,CACd,GAAIQ,WAAW,GAAK,IAApB,CAA0B,CACxB,GAAMG,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWL,WAAW,CAACG,IAAvB,CAAb,CAEA;AACA;AACA;AACA,GAAI,CAAAA,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEG,OAAN,IAAkB,iBAAtB,CAAyC,CACvCC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EACA,GAAIC,CAAAA,UAAU,CAAG,CACf,SAAU,QADK,CAEf,OAAQ,CAAC,oBAAD,CAFO,CAAjB,CAIAR,WAAW,CAACG,IAAI,CAACM,SAAL,CAAeD,UAAf,CAAD,CAAX,CAED,CAED;AACA;AAXA,IAYK,IAAI,CAAAN,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEQ,IAAN,IAAe,GAAnB,CAAwB,CAC3B,GAAMC,CAAAA,WAAwB,CAAG,CAC/BC,QAAQ,CAAEV,IAAI,CAACW,CADgB,CAE/BC,IAAI,CAAEZ,IAAI,CAACa,IAFoB,CAG/BC,KAAK,CAAEd,IAAI,CAACe,CAHmB,CAI/BC,MAAM,CAAEhB,IAAI,CAACiB,CAJkB,CAAjC,CAMAb,OAAO,CAACC,GAAR,WAAeI,WAAW,CAACC,QAA3B,cAAwCD,WAAW,CAACO,MAApD,aAA8DP,WAAW,CAACG,IAA1E,kBAAuFH,WAAW,CAACK,KAAnG,GACD,CACF,CAEH;AACC,CA/BQ,CA+BN,CAACjB,WAAD,CA/BM,CAAT,CAiCA;AACA;AACAR,SAAS,CAAC,UAAM,CACde,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BN,UAAU,GAAKX,UAAU,CAAC8B,IAA1B,CAAiC,QAAjC,CAA4C,UAAzE,EACD,CAFQ,CAEN,CAACnB,UAAD,CAFM,CAAT,CAIA,mBACE,wCACE,KAAC,MAAD,IADF,cAEE,KAAC,IAAD,IAFF,GADF,CAMD,CAED,cAAeT,CAAAA,GAAf","sourcesContent":["import './App.css';\nimport Canvas from './components/Canvas/Canvas';\nimport Menu from './components/Menu/Menu';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { useEffect } from 'react';\nimport { Transaction } from './models/transaction';\n\nfunction App() {\n  // Initiate WebSocket connection\n  const wsBase = process.env.REACT_APP_WS_BASE_URL\n  const apiKey = process.env.REACT_APP_API_KEY\n  const {\n    lastMessage,\n    sendMessage,\n    readyState\n  } = useWebSocket(`${wsBase}?api_key=${apiKey}`)\n  \n  // Respond to new messages coming in from the data provider\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const data = JSON.parse(lastMessage.data)\n\n      // If the welcome message is received, the app is ready\n      // to request trade updates over the socket\n      // e.g. BTC-USD on Coinbase\n      if (data?.MESSAGE === 'STREAMERWELCOME') {\n        console.log('subscribing to channel...')\n        var subRequest = {\n          \"action\": \"SubAdd\",\n          \"subs\": [\"0~Coinbase~BTC~USD\"]\n        };\n        sendMessage(JSON.stringify(subRequest))\n\n      }\n      \n      // If the app receives a trade update,\n      // create a Transaction and log it to the console for now\n      else if (data?.TYPE === '0') {\n        const transaction: Transaction = {\n          exchange: data.M,\n          coin: data.FSYM,\n          price: data.P,\n          amount: data.Q\n        }\n        console.log(`${transaction.exchange}: ${transaction.amount} ${transaction.coin} for $${transaction.price}`);\n      }\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lastMessage])\n\n  // React to the state of the WebSocket connection\n  // and just log it to the console for now\n  useEffect(() => {\n    console.log('Connection is', readyState === ReadyState.OPEN ? 'ACTIVE' : 'INACTIVE')\n  }, [readyState])\n  \n  return (\n    <>\n      <Canvas />\n      <Menu />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}