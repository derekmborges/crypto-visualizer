{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BasicClient = void 0;\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nconst events_1 = require(\"events\");\n\nconst SmartWss_1 = require(\"./SmartWss\");\n\nconst Watcher_1 = require(\"./Watcher\");\n/**\n * Single websocket connection client with\n * subscribe and unsubscribe methods. It is also an EventEmitter\n * and broadcasts 'trade' events.\n *\n * Anytime the WSS client connects (such as a reconnect)\n * it run the _onConnected method and will resubscribe.\n */\n\n\nclass BasicClient extends events_1.EventEmitter {\n  constructor(wssPath, name, wssFactory, watcherMs) {\n    super();\n    this.wssPath = wssPath;\n    this.name = name;\n    this._tickerSubs = new Map();\n    this._tradeSubs = new Map();\n    this._candleSubs = new Map();\n    this._level2SnapshotSubs = new Map();\n    this._level2UpdateSubs = new Map();\n    this._level3SnapshotSubs = new Map();\n    this._level3UpdateSubs = new Map();\n    this._wss = undefined;\n    this._watcher = new Watcher_1.Watcher(this, watcherMs);\n    this.hasTickers = false;\n    this.hasTrades = true;\n    this.hasCandles = false;\n    this.hasLevel2Snapshots = false;\n    this.hasLevel2Updates = false;\n    this.hasLevel3Snapshots = false;\n    this.hasLevel3Updates = false;\n\n    this._wssFactory = wssFactory || (path => new SmartWss_1.SmartWss(path));\n  } //////////////////////////////////////////////\n\n\n  close() {\n    if (this._beforeClose) {\n      this._beforeClose();\n    }\n\n    this._watcher.stop();\n\n    if (this._wss) {\n      this._wss.close();\n\n      this._wss = undefined;\n    }\n  }\n\n  reconnect() {\n    this.emit(\"reconnecting\");\n\n    if (this._wss) {\n      this._wss.once(\"closed\", () => this._connect());\n\n      this.close();\n    } else {\n      this._connect();\n    }\n  }\n\n  subscribeTicker(market) {\n    if (!this.hasTickers) return;\n    return this._subscribe(market, this._tickerSubs, this._sendSubTicker.bind(this));\n  }\n\n  unsubscribeTicker(market) {\n    if (!this.hasTickers) return;\n\n    this._unsubscribe(market, this._tickerSubs, this._sendUnsubTicker.bind(this));\n  }\n\n  subscribeCandles(market) {\n    if (!this.hasCandles) return;\n    return this._subscribe(market, this._candleSubs, this._sendSubCandles.bind(this));\n  }\n\n  unsubscribeCandles(market) {\n    if (!this.hasCandles) return;\n\n    this._unsubscribe(market, this._candleSubs, this._sendUnsubCandles.bind(this));\n  }\n\n  subscribeTrades(market) {\n    if (!this.hasTrades) return;\n    return this._subscribe(market, this._tradeSubs, this._sendSubTrades.bind(this));\n  }\n\n  unsubscribeTrades(market) {\n    if (!this.hasTrades) return;\n\n    this._unsubscribe(market, this._tradeSubs, this._sendUnsubTrades.bind(this));\n  }\n\n  subscribeLevel2Snapshots(market) {\n    if (!this.hasLevel2Snapshots) return;\n    return this._subscribe(market, this._level2SnapshotSubs, this._sendSubLevel2Snapshots.bind(this));\n  }\n\n  unsubscribeLevel2Snapshots(market) {\n    if (!this.hasLevel2Snapshots) return;\n\n    this._unsubscribe(market, this._level2SnapshotSubs, this._sendUnsubLevel2Snapshots.bind(this));\n  }\n\n  subscribeLevel2Updates(market) {\n    if (!this.hasLevel2Updates) return;\n    return this._subscribe(market, this._level2UpdateSubs, this._sendSubLevel2Updates.bind(this));\n  }\n\n  unsubscribeLevel2Updates(market) {\n    if (!this.hasLevel2Updates) return;\n\n    this._unsubscribe(market, this._level2UpdateSubs, this._sendUnsubLevel2Updates.bind(this));\n  }\n\n  subscribeLevel3Snapshots(market) {\n    if (!this.hasLevel3Snapshots) return;\n    return this._subscribe(market, this._level3SnapshotSubs, this._sendSubLevel3Snapshots.bind(this));\n  }\n\n  unsubscribeLevel3Snapshots(market) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  subscribeLevel3Updates(market) {\n    if (!this.hasLevel3Updates) return;\n    return this._subscribe(market, this._level3UpdateSubs, this._sendSubLevel3Updates.bind(this));\n  }\n\n  unsubscribeLevel3Updates(market) {\n    if (!this.hasLevel3Updates) return;\n\n    this._unsubscribe(market, this._level3UpdateSubs, this._sendUnsubLevel3Updates.bind(this));\n  } ////////////////////////////////////////////\n  // PROTECTED\n\n  /**\n   * Helper function for performing a subscription operation\n   * where a subscription map is maintained and the message\n   * send operation is performed\n   * @param {Market} market\n   * @param {Map}} map\n   * @param {String} msg\n   * @param {Function} sendFn\n   * @returns {Boolean} returns true when a new subscription event occurs\n   */\n\n\n  _subscribe(market, map, sendFn) {\n    this._connect();\n\n    const remote_id = market.id;\n\n    if (!map.has(remote_id)) {\n      map.set(remote_id, market); // perform the subscription if we're connected\n      // and if not, then we'll reply on the _onConnected event\n      // to send the signal to our server!\n\n      if (this._wss && this._wss.isConnected) {\n        sendFn(remote_id, market);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for performing an unsubscription operation\n   * where a subscription map is maintained and the message\n   * send operation is performed\n   */\n\n\n  _unsubscribe(market, map, sendFn) {\n    const remote_id = market.id;\n\n    if (map.has(remote_id)) {\n      map.delete(remote_id);\n\n      if (this._wss.isConnected) {\n        sendFn(remote_id, market);\n      }\n    }\n  }\n  /**\n   * Idempotent method for creating and initializing\n   * a long standing web socket client. This method\n   * is only called in the subscribe method. Multiple calls\n   * have no effect.\n   */\n\n\n  _connect() {\n    if (!this._wss) {\n      this._wss = this._wssFactory(this.wssPath);\n\n      this._wss.on(\"error\", this._onError.bind(this));\n\n      this._wss.on(\"connecting\", this._onConnecting.bind(this));\n\n      this._wss.on(\"connected\", this._onConnected.bind(this));\n\n      this._wss.on(\"disconnected\", this._onDisconnected.bind(this));\n\n      this._wss.on(\"closing\", this._onClosing.bind(this));\n\n      this._wss.on(\"closed\", this._onClosed.bind(this));\n\n      this._wss.on(\"message\", msg => {\n        try {\n          this._onMessage(msg);\n        } catch (ex) {\n          this._onError(ex);\n        }\n      });\n\n      this._beforeConnect(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      this._wss.connect();\n    }\n  }\n  /**\n   * Handles the error event\n   * @param {Error} err\n   */\n\n\n  _onError(err) {\n    this.emit(\"error\", err);\n  }\n  /**\n   * Handles the connecting event. This is fired any time the\n   * underlying websocket begins a connection.\n   */\n\n\n  _onConnecting() {\n    this.emit(\"connecting\");\n  }\n  /**\n   * This method is fired anytime the socket is opened, whether\n   * the first time, or any subsequent reconnects. This allows\n   * the socket to immediate trigger resubscription to relevent\n   * feeds\n   */\n\n\n  _onConnected() {\n    this.emit(\"connected\");\n\n    for (const [marketSymbol, market] of this._tickerSubs) {\n      this._sendSubTicker(marketSymbol, market);\n    }\n\n    for (const [marketSymbol, market] of this._candleSubs) {\n      this._sendSubCandles(marketSymbol, market);\n    }\n\n    for (const [marketSymbol, market] of this._tradeSubs) {\n      this._sendSubTrades(marketSymbol, market);\n    }\n\n    for (const [marketSymbol, market] of this._level2SnapshotSubs) {\n      this._sendSubLevel2Snapshots(marketSymbol, market);\n    }\n\n    for (const [marketSymbol, market] of this._level2UpdateSubs) {\n      this._sendSubLevel2Updates(marketSymbol, market);\n    }\n\n    for (const [marketSymbol, market] of this._level3UpdateSubs) {\n      this._sendSubLevel3Updates(marketSymbol, market);\n    }\n\n    this._watcher.start();\n  }\n  /**\n   * Handles a disconnection event\n   */\n\n\n  _onDisconnected() {\n    this._watcher.stop();\n\n    this.emit(\"disconnected\");\n  }\n  /**\n   * Handles the closing event\n   */\n\n\n  _onClosing() {\n    this._watcher.stop();\n\n    this.emit(\"closing\");\n  }\n  /**\n   * Fires before connect\n   */\n\n\n  _beforeConnect() {//\n  }\n  /**\n   * Fires before close\n   */\n\n\n  _beforeClose() {//\n  }\n  /**\n   * Handles the closed event\n   */\n\n\n  _onClosed() {\n    this.emit(\"closed\");\n  }\n\n}\n\nexports.BasicClient = BasicClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/BasicClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { EventEmitter } from \"events\";\nimport { IClient } from \"./IClient\";\nimport { SmartWss } from \"./SmartWss\";\nimport { Watcher } from \"./Watcher\";\nimport { Market } from \"./Market\";\n\nexport type MarketMap = Map<string, Market>;\nexport type WssFactoryFn = (path: string) => SmartWss;\nexport type SendFn = (remoteId: string, market: Market) => void;\n\n/**\n * Single websocket connection client with\n * subscribe and unsubscribe methods. It is also an EventEmitter\n * and broadcasts 'trade' events.\n *\n * Anytime the WSS client connects (such as a reconnect)\n * it run the _onConnected method and will resubscribe.\n */\nexport abstract class BasicClient extends EventEmitter implements IClient {\n    public hasTickers: boolean;\n    public hasTrades: boolean;\n    public hasCandles: boolean;\n    public hasLevel2Snapshots: boolean;\n    public hasLevel2Updates: boolean;\n    public hasLevel3Snapshots: boolean;\n    public hasLevel3Updates: boolean;\n\n    protected _wssFactory: WssFactoryFn;\n    protected _tickerSubs: MarketMap;\n    protected _tradeSubs: MarketMap;\n    protected _candleSubs: MarketMap;\n    protected _level2SnapshotSubs: MarketMap;\n    protected _level2UpdateSubs: MarketMap;\n    protected _level3SnapshotSubs: MarketMap;\n    protected _level3UpdateSubs: MarketMap;\n    protected _wss: SmartWss;\n    protected _watcher: Watcher;\n\n    constructor(\n        readonly wssPath: string,\n        readonly name: string,\n        wssFactory?: WssFactoryFn,\n        watcherMs?: number,\n    ) {\n        super();\n        this._tickerSubs = new Map();\n        this._tradeSubs = new Map();\n        this._candleSubs = new Map();\n        this._level2SnapshotSubs = new Map();\n        this._level2UpdateSubs = new Map();\n        this._level3SnapshotSubs = new Map();\n        this._level3UpdateSubs = new Map();\n        this._wss = undefined;\n        this._watcher = new Watcher(this, watcherMs);\n\n        this.hasTickers = false;\n        this.hasTrades = true;\n        this.hasCandles = false;\n        this.hasLevel2Snapshots = false;\n        this.hasLevel2Updates = false;\n        this.hasLevel3Snapshots = false;\n        this.hasLevel3Updates = false;\n        this._wssFactory = wssFactory || (path => new SmartWss(path));\n    }\n\n    //////////////////////////////////////////////\n\n    public close() {\n        if (this._beforeClose) {\n            this._beforeClose();\n        }\n        this._watcher.stop();\n        if (this._wss) {\n            this._wss.close();\n            this._wss = undefined;\n        }\n    }\n\n    public reconnect() {\n        this.emit(\"reconnecting\");\n        if (this._wss) {\n            this._wss.once(\"closed\", () => this._connect());\n            this.close();\n        } else {\n            this._connect();\n        }\n    }\n\n    public subscribeTicker(market: Market) {\n        if (!this.hasTickers) return;\n        return this._subscribe(market, this._tickerSubs, this._sendSubTicker.bind(this));\n    }\n\n    public unsubscribeTicker(market: Market): Promise<void> {\n        if (!this.hasTickers) return;\n        this._unsubscribe(market, this._tickerSubs, this._sendUnsubTicker.bind(this));\n    }\n\n    public subscribeCandles(market: Market) {\n        if (!this.hasCandles) return;\n        return this._subscribe(market, this._candleSubs, this._sendSubCandles.bind(this));\n    }\n\n    public unsubscribeCandles(market: Market): Promise<void> {\n        if (!this.hasCandles) return;\n        this._unsubscribe(market, this._candleSubs, this._sendUnsubCandles.bind(this));\n    }\n\n    public subscribeTrades(market: Market) {\n        if (!this.hasTrades) return;\n        return this._subscribe(market, this._tradeSubs, this._sendSubTrades.bind(this));\n    }\n\n    public unsubscribeTrades(market: Market): Promise<void> {\n        if (!this.hasTrades) return;\n        this._unsubscribe(market, this._tradeSubs, this._sendUnsubTrades.bind(this));\n    }\n\n    public subscribeLevel2Snapshots(market: Market) {\n        if (!this.hasLevel2Snapshots) return;\n        return this._subscribe(\n            market,\n            this._level2SnapshotSubs,\n            this._sendSubLevel2Snapshots.bind(this),\n        );\n    }\n\n    public unsubscribeLevel2Snapshots(market: Market): Promise<void> {\n        if (!this.hasLevel2Snapshots) return;\n        this._unsubscribe(\n            market,\n            this._level2SnapshotSubs,\n            this._sendUnsubLevel2Snapshots.bind(this),\n        );\n    }\n\n    public subscribeLevel2Updates(market: Market) {\n        if (!this.hasLevel2Updates) return;\n        return this._subscribe(\n            market,\n            this._level2UpdateSubs,\n            this._sendSubLevel2Updates.bind(this),\n        );\n    }\n\n    public unsubscribeLevel2Updates(market: Market): Promise<void> {\n        if (!this.hasLevel2Updates) return;\n        this._unsubscribe(market, this._level2UpdateSubs, this._sendUnsubLevel2Updates.bind(this));\n    }\n\n    public subscribeLevel3Snapshots(market: Market) {\n        if (!this.hasLevel3Snapshots) return;\n        return this._subscribe(\n            market,\n            this._level3SnapshotSubs,\n            this._sendSubLevel3Snapshots.bind(this),\n        );\n    }\n    public unsubscribeLevel3Snapshots(market: Market): Promise<void> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public subscribeLevel3Updates(market: Market) {\n        if (!this.hasLevel3Updates) return;\n        return this._subscribe(\n            market,\n            this._level3UpdateSubs,\n            this._sendSubLevel3Updates.bind(this),\n        );\n    }\n\n    public unsubscribeLevel3Updates(market: Market): Promise<void> {\n        if (!this.hasLevel3Updates) return;\n        this._unsubscribe(market, this._level3UpdateSubs, this._sendUnsubLevel3Updates.bind(this));\n    }\n\n    ////////////////////////////////////////////\n    // PROTECTED\n\n    /**\n     * Helper function for performing a subscription operation\n     * where a subscription map is maintained and the message\n     * send operation is performed\n     * @param {Market} market\n     * @param {Map}} map\n     * @param {String} msg\n     * @param {Function} sendFn\n     * @returns {Boolean} returns true when a new subscription event occurs\n     */\n    protected _subscribe(market: Market, map: MarketMap, sendFn: SendFn) {\n        this._connect();\n        const remote_id = market.id;\n        if (!map.has(remote_id)) {\n            map.set(remote_id, market);\n\n            // perform the subscription if we're connected\n            // and if not, then we'll reply on the _onConnected event\n            // to send the signal to our server!\n            if (this._wss && this._wss.isConnected) {\n                sendFn(remote_id, market);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Helper function for performing an unsubscription operation\n     * where a subscription map is maintained and the message\n     * send operation is performed\n     */\n    protected _unsubscribe(market: Market, map: MarketMap, sendFn: SendFn) {\n        const remote_id = market.id;\n        if (map.has(remote_id)) {\n            map.delete(remote_id);\n\n            if (this._wss.isConnected) {\n                sendFn(remote_id, market);\n            }\n        }\n    }\n\n    /**\n     * Idempotent method for creating and initializing\n     * a long standing web socket client. This method\n     * is only called in the subscribe method. Multiple calls\n     * have no effect.\n     */\n    protected _connect() {\n        if (!this._wss) {\n            this._wss = this._wssFactory(this.wssPath);\n            this._wss.on(\"error\", this._onError.bind(this));\n            this._wss.on(\"connecting\", this._onConnecting.bind(this));\n            this._wss.on(\"connected\", this._onConnected.bind(this));\n            this._wss.on(\"disconnected\", this._onDisconnected.bind(this));\n            this._wss.on(\"closing\", this._onClosing.bind(this));\n            this._wss.on(\"closed\", this._onClosed.bind(this));\n            this._wss.on(\"message\", (msg: string) => {\n                try {\n                    this._onMessage(msg);\n                } catch (ex) {\n                    this._onError(ex);\n                }\n            });\n            this._beforeConnect();\n\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._wss.connect();\n        }\n    }\n\n    /**\n     * Handles the error event\n     * @param {Error} err\n     */\n    protected _onError(err) {\n        this.emit(\"error\", err);\n    }\n\n    /**\n     * Handles the connecting event. This is fired any time the\n     * underlying websocket begins a connection.\n     */\n    protected _onConnecting() {\n        this.emit(\"connecting\");\n    }\n\n    /**\n     * This method is fired anytime the socket is opened, whether\n     * the first time, or any subsequent reconnects. This allows\n     * the socket to immediate trigger resubscription to relevent\n     * feeds\n     */\n    protected _onConnected() {\n        this.emit(\"connected\");\n        for (const [marketSymbol, market] of this._tickerSubs) {\n            this._sendSubTicker(marketSymbol, market);\n        }\n        for (const [marketSymbol, market] of this._candleSubs) {\n            this._sendSubCandles(marketSymbol, market);\n        }\n        for (const [marketSymbol, market] of this._tradeSubs) {\n            this._sendSubTrades(marketSymbol, market);\n        }\n        for (const [marketSymbol, market] of this._level2SnapshotSubs) {\n            this._sendSubLevel2Snapshots(marketSymbol, market);\n        }\n        for (const [marketSymbol, market] of this._level2UpdateSubs) {\n            this._sendSubLevel2Updates(marketSymbol, market);\n        }\n        for (const [marketSymbol, market] of this._level3UpdateSubs) {\n            this._sendSubLevel3Updates(marketSymbol, market);\n        }\n        this._watcher.start();\n    }\n\n    /**\n     * Handles a disconnection event\n     */\n    protected _onDisconnected() {\n        this._watcher.stop();\n        this.emit(\"disconnected\");\n    }\n\n    /**\n     * Handles the closing event\n     */\n    protected _onClosing() {\n        this._watcher.stop();\n        this.emit(\"closing\");\n    }\n\n    /**\n     * Fires before connect\n     */\n    protected _beforeConnect() {\n        //\n    }\n\n    /**\n     * Fires before close\n     */\n    protected _beforeClose() {\n        //\n    }\n\n    /**\n     * Handles the closed event\n     */\n    protected _onClosed() {\n        this.emit(\"closed\");\n    }\n\n    ////////////////////////////////////////////\n    // ABSTRACT\n\n    protected abstract _onMessage(msg: any);\n\n    protected abstract _sendSubTicker(remoteId: string, market: Market);\n\n    protected abstract _sendSubCandles(remoteId: string, market: Market);\n\n    protected abstract _sendUnsubCandles(remoteId: string, market: Market);\n\n    protected abstract _sendUnsubTicker(remoteId: string, market: Market);\n\n    protected abstract _sendSubTrades(remoteId: string, market: Market);\n\n    protected abstract _sendUnsubTrades(remoteId: string, market: Market);\n\n    protected abstract _sendSubLevel2Snapshots(remoteId: string, market: Market);\n\n    protected abstract _sendUnsubLevel2Snapshots(remoteId: string, market: Market);\n\n    protected abstract _sendSubLevel2Updates(remoteId: string, market: Market);\n\n    protected abstract _sendUnsubLevel2Updates(remoteId: string, market: Market);\n\n    protected abstract _sendSubLevel3Snapshots(remoteId: string, market: Market);\n\n    protected abstract _sendUnsubLevel3Snapshots(remoteId: string, market: Market);\n\n    protected abstract _sendSubLevel3Updates(remoteId: string, market: Market);\n\n    protected abstract _sendUnsubLevel3Updates(remoteId: string, market: Market);\n}\n"]},"metadata":{},"sourceType":"script"}