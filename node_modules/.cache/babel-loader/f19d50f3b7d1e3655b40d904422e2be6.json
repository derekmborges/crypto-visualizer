{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n\n/* eslint-disable @typescript-eslint/no-floating-promises */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.candlePeriod = exports.BinanceBase = void 0;\n/**\n * Binance now (as of Nov 2019) has the ability to perform live subscribes using\n * a single socket. With this functionality, there is no longer a need to\n * use the URL-mutation code and we can use a BasicClient and allow subscribing\n * and unsubscribing.\n *\n * Binance allows subscribing to many streams at the same time, however there is\n * a max payload length that cannot be exceeded. This requires the use of a\n * subscription batching method.\n *\n * Binance limits the number of messages that can be sent as well so throttling\n * of batched sends must be performed.\n *\n * _sendSubTrades calls _batchSub\n * _batchSub uses the `batch` flow control helper to batch all calls on the\n *    same tick into a single call\n * _batchSub calls _sendMessage\n * _sendMessage uses the `throttle` flow controler helper to limit calls to\n *    1 per second\n *\n */\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Candle_1 = require(\"../Candle\");\n\nconst CandlePeriod_1 = require(\"../CandlePeriod\");\n\nconst Batch_1 = require(\"../flowcontrol/Batch\");\n\nconst Throttle_1 = require(\"../flowcontrol/Throttle\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst https = __importStar(require(\"../Https\"));\n\nclass BinanceBase extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      name,\n      wssPath,\n      restL2SnapshotPath,\n      watcherMs = 30000,\n      useAggTrades = true,\n      requestSnapshot = true,\n      socketBatchSize = 200,\n      socketThrottleMs = 1000,\n      restThrottleMs = 1000,\n      l2updateSpeed = \"\",\n      l2snapshotSpeed = \"\",\n      batchTickers = true\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, name, undefined, watcherMs);\n    this._restL2SnapshotPath = restL2SnapshotPath;\n    this.useAggTrades = useAggTrades;\n    this.l2updateSpeed = l2updateSpeed;\n    this.l2snapshotSpeed = l2snapshotSpeed;\n    this.requestSnapshot = requestSnapshot;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasCandles = true;\n    this.hasLevel2Snapshots = true;\n    this.hasLevel2Updates = true;\n    this.batchTickers = batchTickers;\n    this._messageId = 0;\n    this._tickersActive = false;\n    this.candlePeriod = CandlePeriod_1.CandlePeriod._1m;\n    this._batchSub = (0, Batch_1.batch)(this.__batchSub.bind(this), socketBatchSize);\n    this._batchUnsub = (0, Batch_1.batch)(this.__batchUnsub.bind(this), socketBatchSize);\n    this._sendMessage = (0, Throttle_1.throttle)(this.__sendMessage.bind(this), socketThrottleMs);\n    this._requestLevel2Snapshot = (0, Throttle_1.throttle)(this.__requestLevel2Snapshot.bind(this), restThrottleMs);\n  } //////////////////////////////////////////////\n\n\n  _onClosing() {\n    this._tickersActive = false;\n\n    this._batchSub.cancel();\n\n    this._batchUnsub.cancel();\n\n    this._sendMessage.cancel();\n\n    this._requestLevel2Snapshot.cancel();\n\n    super._onClosing();\n  }\n\n  _sendSubTicker(remote_id) {\n    if (this.batchTickers) {\n      if (this._tickersActive) return;\n      this._tickersActive = true;\n\n      this._wss.send(JSON.stringify({\n        method: \"SUBSCRIBE\",\n        params: [\"!ticker@arr\"],\n        id: ++this._messageId\n      }));\n    } else {\n      this._wss.send(JSON.stringify({\n        method: \"SUBSCRIBE\",\n        params: [`${remote_id.toLowerCase()}@ticker`],\n        id: ++this._messageId\n      }));\n    }\n  }\n\n  _sendUnsubTicker(remote_id) {\n    if (this.batchTickers) {\n      if (this._tickerSubs.size > 1) return;\n      this._tickersActive = false;\n\n      this._wss.send(JSON.stringify({\n        method: \"UNSUBSCRIBE\",\n        params: [\"!ticker@arr\"],\n        id: ++this._messageId\n      }));\n    } else {\n      this._wss.send(JSON.stringify({\n        method: \"UNSUBSCRIBE\",\n        params: [`${remote_id.toLowerCase()}@ticker`],\n        id: ++this._messageId\n      }));\n    }\n  }\n\n  __batchSub(args) {\n    const params = args.map(p => p[0]);\n    const id = ++this._messageId;\n    const msg = JSON.stringify({\n      method: \"SUBSCRIBE\",\n      params,\n      id\n    });\n\n    this._sendMessage(msg);\n  }\n\n  __batchUnsub(args) {\n    const params = args.map(p => p[0]);\n    const id = ++this._messageId;\n    const msg = JSON.stringify({\n      method: \"UNSUBSCRIBE\",\n      params,\n      id\n    });\n\n    this._sendMessage(msg);\n  }\n\n  __sendMessage(msg) {\n    this._wss.send(msg);\n  }\n\n  _sendSubTrades(remote_id) {\n    const stream = remote_id.toLowerCase() + (this.useAggTrades ? \"@aggTrade\" : \"@trade\");\n\n    this._batchSub(stream);\n  }\n\n  _sendUnsubTrades(remote_id) {\n    const stream = remote_id.toLowerCase() + (this.useAggTrades ? \"@aggTrade\" : \"@trade\");\n\n    this._batchUnsub(stream);\n  }\n\n  _sendSubCandles(remote_id) {\n    const stream = remote_id.toLowerCase() + \"@kline_\" + candlePeriod(this.candlePeriod);\n\n    this._batchSub(stream);\n  }\n\n  _sendUnsubCandles(remote_id) {\n    const stream = remote_id.toLowerCase() + \"@kline_\" + candlePeriod(this.candlePeriod);\n\n    this._batchUnsub(stream);\n  }\n\n  _sendSubLevel2Snapshots(remote_id) {\n    const stream = remote_id.toLowerCase() + \"@depth20\" + (this.l2snapshotSpeed ? `@${this.l2snapshotSpeed}` : \"\");\n\n    this._batchSub(stream);\n  }\n\n  _sendUnsubLevel2Snapshots(remote_id) {\n    const stream = remote_id.toLowerCase() + \"@depth20\" + (this.l2snapshotSpeed ? `@${this.l2snapshotSpeed}` : \"\");\n\n    this._batchUnsub(stream);\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    if (this.requestSnapshot) this._requestLevel2Snapshot(this._level2UpdateSubs.get(remote_id));\n    const stream = remote_id.toLowerCase() + \"@depth\" + (this.l2updateSpeed ? `@${this.l2updateSpeed}` : \"\");\n\n    this._batchSub(stream);\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    const stream = remote_id.toLowerCase() + \"@depth\" + (this.l2updateSpeed ? `@${this.l2updateSpeed}` : \"\");\n\n    this._batchUnsub(stream);\n  }\n\n  _sendSubLevel3Snapshots() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  _sendUnsubLevel3Snapshots() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  _sendSubLevel3Updates() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  _sendUnsubLevel3Updates() {\n    throw new Error(\"Method not implemented.\");\n  } /////////////////////////////////////////////\n\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw); // subscribe/unsubscribe responses\n\n    if (msg.result === null && msg.id) {\n      // console.log(msg);\n      return;\n    } // errors\n\n\n    if (msg.error) {\n      const error = new Error(msg.error.msg);\n      error.msg = msg;\n      this.emit(\"error\", error);\n    } // All code past this point relies on msg.stream in some manner. This code\n    // acts as a guard on msg.stream and aborts prematurely if the property is\n    // not available.\n\n\n    if (!msg.stream) {\n      return;\n    } // ticker\n\n\n    if (msg.stream === \"!ticker@arr\") {\n      for (const raw of msg.data) {\n        const remote_id = raw.s;\n\n        const market = this._tickerSubs.get(remote_id);\n\n        if (!market) continue;\n\n        const ticker = this._constructTicker(raw, market);\n\n        this.emit(\"ticker\", ticker, market);\n      }\n\n      return;\n    } // trades\n\n\n    if (msg.stream.toLowerCase().endsWith(\"trade\")) {\n      const remote_id = msg.data.s;\n\n      const market = this._tradeSubs.get(remote_id);\n\n      if (!market) return;\n      const trade = this.useAggTrades ? this._constructAggTrade(msg, market) : this._constructRawTrade(msg, market);\n      this.emit(\"trade\", trade, market);\n      return;\n    } // candle\n\n\n    if (msg.data.e === \"kline\") {\n      const remote_id = msg.data.s;\n\n      const market = this._candleSubs.get(remote_id);\n\n      if (!market) return;\n\n      const candle = this._constructCandle(msg);\n\n      this.emit(\"candle\", candle, market);\n      return;\n    } // l2snapshot\n\n\n    if (msg.stream.match(/@depth20/)) {\n      const remote_id = msg.stream.split(\"@\")[0].toUpperCase();\n\n      const market = this._level2SnapshotSubs.get(remote_id);\n\n      if (!market) return;\n\n      const snapshot = this._constructLevel2Snapshot(msg, market);\n\n      this.emit(\"l2snapshot\", snapshot, market);\n      return;\n    } // l2update\n\n\n    if (msg.stream.match(/@depth/)) {\n      const remote_id = msg.stream.split(\"@\")[0].toUpperCase();\n\n      const market = this._level2UpdateSubs.get(remote_id);\n\n      if (!market) return;\n\n      const update = this._constructLevel2Update(msg, market);\n\n      this.emit(\"l2update\", update, market);\n      return;\n    }\n  }\n\n  _constructTicker(msg, market) {\n    const {\n      E: timestamp,\n      c: last,\n      v: volume,\n      q: quoteVolume,\n      h: high,\n      l: low,\n      p: change,\n      P: changePercent,\n      a: ask,\n      A: askVolume,\n      b: bid,\n      B: bidVolume\n    } = msg;\n    const open = parseFloat(last) + parseFloat(change);\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: timestamp,\n      last,\n      open: open.toFixed(8),\n      high,\n      low,\n      volume,\n      quoteVolume,\n      change,\n      changePercent,\n      bid,\n      bidVolume,\n      ask,\n      askVolume\n    });\n  }\n\n  _constructAggTrade(_ref, market) {\n    let {\n      data\n    } = _ref;\n    const {\n      a: trade_id,\n      p: price,\n      q: size,\n      T: time,\n      m: buyer\n    } = data;\n    const unix = time;\n    const amount = size;\n    const side = buyer ? \"buy\" : \"sell\";\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: trade_id.toFixed(),\n      unix,\n      side,\n      price,\n      amount\n    });\n  }\n\n  _constructRawTrade(_ref2, market) {\n    let {\n      data\n    } = _ref2;\n    const {\n      t: trade_id,\n      p: price,\n      q: size,\n      b: buyOrderId,\n      a: sellOrderId,\n      T: time,\n      m: buyer\n    } = data;\n    const unix = time;\n    const amount = size;\n    const side = buyer ? \"buy\" : \"sell\";\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: trade_id,\n      unix,\n      side,\n      price,\n      amount,\n      buyOrderId,\n      sellOrderId\n    });\n  }\n  /**\n  * Kline data looks like:\n  { stream: 'btcusdt@kline_1m',\n  data:\n  { e: 'kline',\n    E: 1571068845689,\n    s:  'BTCUSDT',\n    k:\n      { t: 1571068800000,\n        T: 1571068859999,\n        s: 'BTCUSDT',\n        i: '1m',\n        f: 189927800,\n        L: 189928107,\n        o: '8254.05000000',\n        c: '8253.61000000',\n        h: '8256.58000000',\n        l: '8250.93000000',\n        v: '19.10571600',\n        n: 308,\n        x: false,\n        q: '157694.32610840',\n        V: '8.19456200',\n        Q: '67640.56793106',\n        B: '0' } } }\n  */\n\n\n  _constructCandle(_ref3) {\n    let {\n      data\n    } = _ref3;\n    const k = data.k;\n    return new Candle_1.Candle(k.t, k.o, k.h, k.l, k.c, k.v);\n  }\n\n  _constructLevel2Snapshot(msg, market) {\n    const sequenceId = msg.data.lastUpdateId;\n    const asks = msg.data.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    const bids = msg.data.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      asks,\n      bids\n    });\n  }\n  /**\n  {\n    \"e\": \"depthUpdate\", // Event type\n    \"E\": 123456789,     // Event time\n    \"s\": \"BNBBTC\",      // Symbol\n    \"U\": 157,           // First update ID in event\n    \"u\": 160,           // Final update ID in event\n    \"b\": [              // Bids to be updated\n      [\n        \"0.0024\",       // Price level to be updated\n        \"10\"            // Quantity\n      ]\n    ],\n    \"a\": [              // Asks to be updated\n      [\n        \"0.0026\",       // Price level to be updated\n        \"100\"           // Quantity\n      ]\n    ]\n  }\n  */\n\n\n  _constructLevel2Update(msg, market) {\n    const eventMs = msg.data.E;\n    const sequenceId = msg.data.U;\n    const lastSequenceId = msg.data.u;\n    const asks = msg.data.a.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    const bids = msg.data.b.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      lastSequenceId,\n      eventMs,\n      asks,\n      bids\n    });\n  }\n\n  async __requestLevel2Snapshot(market) {\n    let failed = false;\n\n    try {\n      const remote_id = market.id;\n      const uri = `${this._restL2SnapshotPath}?limit=1000&symbol=${remote_id}`;\n      const raw = await https.get(uri);\n      const sequenceId = raw.lastUpdateId;\n      const timestampMs = raw.E;\n      const asks = raw.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n      const bids = raw.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n      const snapshot = new Level2Snapshots_1.Level2Snapshot({\n        exchange: this.name,\n        base: market.base,\n        quote: market.quote,\n        sequenceId,\n        timestampMs,\n        asks,\n        bids\n      });\n      this.emit(\"l2snapshot\", snapshot, market);\n    } catch (ex) {\n      this.emit(\"error\", ex);\n      failed = true;\n    } finally {\n      if (failed) this._requestLevel2Snapshot(market);\n    }\n  }\n\n}\n\nexports.BinanceBase = BinanceBase;\n\nfunction candlePeriod(p) {\n  switch (p) {\n    case CandlePeriod_1.CandlePeriod._1m:\n      return \"1m\";\n\n    case CandlePeriod_1.CandlePeriod._3m:\n      return \"3m\";\n\n    case CandlePeriod_1.CandlePeriod._5m:\n      return \"5m\";\n\n    case CandlePeriod_1.CandlePeriod._15m:\n      return \"15m\";\n\n    case CandlePeriod_1.CandlePeriod._30m:\n      return \"30m\";\n\n    case CandlePeriod_1.CandlePeriod._1h:\n      return \"1h\";\n\n    case CandlePeriod_1.CandlePeriod._2h:\n      return \"2h\";\n\n    case CandlePeriod_1.CandlePeriod._4h:\n      return \"4h\";\n\n    case CandlePeriod_1.CandlePeriod._6h:\n      return \"6h\";\n\n    case CandlePeriod_1.CandlePeriod._8h:\n      return \"8h\";\n\n    case CandlePeriod_1.CandlePeriod._12h:\n      return \"12h\";\n\n    case CandlePeriod_1.CandlePeriod._1d:\n      return \"1d\";\n\n    case CandlePeriod_1.CandlePeriod._3d:\n      return \"3d\";\n\n    case CandlePeriod_1.CandlePeriod._1w:\n      return \"1w\";\n\n    case CandlePeriod_1.CandlePeriod._1M:\n      return \"1M\";\n  }\n}\n\nexports.candlePeriod = candlePeriod;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/BinanceBase.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/**\n * Binance now (as of Nov 2019) has the ability to perform live subscribes using\n * a single socket. With this functionality, there is no longer a need to\n * use the URL-mutation code and we can use a BasicClient and allow subscribing\n * and unsubscribing.\n *\n * Binance allows subscribing to many streams at the same time, however there is\n * a max payload length that cannot be exceeded. This requires the use of a\n * subscription batching method.\n *\n * Binance limits the number of messages that can be sent as well so throttling\n * of batched sends must be performed.\n *\n * _sendSubTrades calls _batchSub\n * _batchSub uses the `batch` flow control helper to batch all calls on the\n *    same tick into a single call\n * _batchSub calls _sendMessage\n * _sendMessage uses the `throttle` flow controler helper to limit calls to\n *    1 per second\n *\n */\n\nimport { BasicClient } from \"../BasicClient\";\nimport { Candle } from \"../Candle\";\nimport { CandlePeriod } from \"../CandlePeriod\";\nimport { batch } from \"../flowcontrol/Batch\";\nimport { CancelableFn } from \"../flowcontrol/Fn\";\nimport { throttle } from \"../flowcontrol/Throttle\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\nimport { Market } from \"../Market\";\nimport { Level2Update } from \"../Level2Update\";\nimport * as https from \"../Https\";\n\nexport type BinanceClientOptions = {\n    name?: string;\n    wssPath?: string;\n    restL2SnapshotPath?: string;\n    watcherMs?: number;\n    useAggTrades?: boolean;\n    requestSnapshot?: boolean;\n    socketBatchSize?: number;\n    socketThrottleMs?: number;\n    restThrottleMs?: number;\n    l2updateSpeed?: string;\n    l2snapshotSpeed?: string;\n    testNet?: boolean;\n    batchTickers?: boolean;\n};\n\nexport class BinanceBase extends BasicClient {\n    public useAggTrades: boolean;\n    public l2updateSpeed: string;\n    public l2snapshotSpeed: string;\n    public requestSnapshot: boolean;\n    public candlePeriod: CandlePeriod;\n    public batchTickers: boolean;\n\n    protected _messageId: number;\n    protected _restL2SnapshotPath: string;\n    protected _tickersActive: boolean;\n    protected _batchSub: CancelableFn;\n    protected _batchUnsub: CancelableFn;\n    protected _sendMessage: CancelableFn;\n    protected _requestLevel2Snapshot: CancelableFn;\n\n    constructor({\n        name,\n        wssPath,\n        restL2SnapshotPath,\n        watcherMs = 30000,\n        useAggTrades = true,\n        requestSnapshot = true,\n        socketBatchSize = 200,\n        socketThrottleMs = 1000,\n        restThrottleMs = 1000,\n        l2updateSpeed = \"\",\n        l2snapshotSpeed = \"\",\n        batchTickers = true,\n    }: BinanceClientOptions = {}) {\n        super(wssPath, name, undefined, watcherMs);\n\n        this._restL2SnapshotPath = restL2SnapshotPath;\n\n        this.useAggTrades = useAggTrades;\n        this.l2updateSpeed = l2updateSpeed;\n        this.l2snapshotSpeed = l2snapshotSpeed;\n        this.requestSnapshot = requestSnapshot;\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasCandles = true;\n        this.hasLevel2Snapshots = true;\n        this.hasLevel2Updates = true;\n        this.batchTickers = batchTickers;\n\n        this._messageId = 0;\n        this._tickersActive = false;\n        this.candlePeriod = CandlePeriod._1m;\n\n        this._batchSub = batch(this.__batchSub.bind(this), socketBatchSize);\n        this._batchUnsub = batch(this.__batchUnsub.bind(this), socketBatchSize);\n\n        this._sendMessage = throttle(this.__sendMessage.bind(this), socketThrottleMs);\n        this._requestLevel2Snapshot = throttle(\n            this.__requestLevel2Snapshot.bind(this),\n            restThrottleMs,\n        );\n    }\n\n    //////////////////////////////////////////////\n\n    protected _onClosing() {\n        this._tickersActive = false;\n        this._batchSub.cancel();\n        this._batchUnsub.cancel();\n        this._sendMessage.cancel();\n        this._requestLevel2Snapshot.cancel();\n        super._onClosing();\n    }\n\n    protected _sendSubTicker(remote_id: string) {\n        if (this.batchTickers) {\n            if (this._tickersActive) return;\n            this._tickersActive = true;\n            this._wss.send(\n                JSON.stringify({\n                    method: \"SUBSCRIBE\",\n                    params: [\"!ticker@arr\"],\n                    id: ++this._messageId,\n                }),\n            );\n        } else {\n            this._wss.send(\n                JSON.stringify({\n                    method: \"SUBSCRIBE\",\n                    params: [`${remote_id.toLowerCase()}@ticker`],\n                    id: ++this._messageId,\n                }),\n            );\n        }\n    }\n\n    protected _sendUnsubTicker(remote_id: string) {\n        if (this.batchTickers) {\n            if (this._tickerSubs.size > 1) return;\n            this._tickersActive = false;\n            this._wss.send(\n                JSON.stringify({\n                    method: \"UNSUBSCRIBE\",\n                    params: [\"!ticker@arr\"],\n                    id: ++this._messageId,\n                }),\n            );\n        } else {\n            this._wss.send(\n                JSON.stringify({\n                    method: \"UNSUBSCRIBE\",\n                    params: [`${remote_id.toLowerCase()}@ticker`],\n                    id: ++this._messageId,\n                }),\n            );\n        }\n    }\n\n    protected __batchSub(args: any[]) {\n        const params = args.map(p => p[0]);\n        const id = ++this._messageId;\n        const msg = JSON.stringify({\n            method: \"SUBSCRIBE\",\n            params,\n            id,\n        });\n        this._sendMessage(msg);\n    }\n\n    protected __batchUnsub(args) {\n        const params = args.map(p => p[0]);\n        const id = ++this._messageId;\n        const msg = JSON.stringify({\n            method: \"UNSUBSCRIBE\",\n            params,\n            id,\n        });\n        this._sendMessage(msg);\n    }\n\n    protected __sendMessage(msg) {\n        this._wss.send(msg);\n    }\n\n    protected _sendSubTrades(remote_id: string) {\n        const stream = remote_id.toLowerCase() + (this.useAggTrades ? \"@aggTrade\" : \"@trade\");\n        this._batchSub(stream);\n    }\n\n    protected _sendUnsubTrades(remote_id: string) {\n        const stream = remote_id.toLowerCase() + (this.useAggTrades ? \"@aggTrade\" : \"@trade\");\n        this._batchUnsub(stream);\n    }\n\n    protected _sendSubCandles(remote_id: string) {\n        const stream = remote_id.toLowerCase() + \"@kline_\" + candlePeriod(this.candlePeriod);\n        this._batchSub(stream);\n    }\n\n    protected _sendUnsubCandles(remote_id: string) {\n        const stream = remote_id.toLowerCase() + \"@kline_\" + candlePeriod(this.candlePeriod);\n        this._batchUnsub(stream);\n    }\n\n    protected _sendSubLevel2Snapshots(remote_id: string) {\n        const stream =\n            remote_id.toLowerCase() +\n            \"@depth20\" +\n            (this.l2snapshotSpeed ? `@${this.l2snapshotSpeed}` : \"\");\n        this._batchSub(stream);\n    }\n\n    protected _sendUnsubLevel2Snapshots(remote_id: string) {\n        const stream =\n            remote_id.toLowerCase() +\n            \"@depth20\" +\n            (this.l2snapshotSpeed ? `@${this.l2snapshotSpeed}` : \"\");\n        this._batchUnsub(stream);\n    }\n\n    protected _sendSubLevel2Updates(remote_id: string) {\n        if (this.requestSnapshot)\n            this._requestLevel2Snapshot(this._level2UpdateSubs.get(remote_id));\n        const stream =\n            remote_id.toLowerCase() +\n            \"@depth\" +\n            (this.l2updateSpeed ? `@${this.l2updateSpeed}` : \"\");\n        this._batchSub(stream);\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id: string) {\n        const stream =\n            remote_id.toLowerCase() +\n            \"@depth\" +\n            (this.l2updateSpeed ? `@${this.l2updateSpeed}` : \"\");\n        this._batchUnsub(stream);\n    }\n\n    protected _sendSubLevel3Snapshots() {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    protected _sendUnsubLevel3Snapshots() {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    protected _sendSubLevel3Updates() {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    protected _sendUnsubLevel3Updates() {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /////////////////////////////////////////////\n\n    protected _onMessage(raw: string) {\n        const msg = JSON.parse(raw);\n\n        // subscribe/unsubscribe responses\n        if (msg.result === null && msg.id) {\n            // console.log(msg);\n            return;\n        }\n\n        // errors\n        if (msg.error) {\n            const error = new Error(msg.error.msg) as any;\n            error.msg = msg;\n            this.emit(\"error\", error);\n        }\n\n        // All code past this point relies on msg.stream in some manner. This code\n        // acts as a guard on msg.stream and aborts prematurely if the property is\n        // not available.\n        if (!msg.stream) {\n            return;\n        }\n\n        // ticker\n        if (msg.stream === \"!ticker@arr\") {\n            for (const raw of msg.data) {\n                const remote_id = raw.s;\n                const market = this._tickerSubs.get(remote_id);\n                if (!market) continue;\n\n                const ticker = this._constructTicker(raw, market);\n                this.emit(\"ticker\", ticker, market);\n            }\n            return;\n        }\n\n        // trades\n        if (msg.stream.toLowerCase().endsWith(\"trade\")) {\n            const remote_id = msg.data.s;\n            const market = this._tradeSubs.get(remote_id);\n            if (!market) return;\n\n            const trade = this.useAggTrades\n                ? this._constructAggTrade(msg, market)\n                : this._constructRawTrade(msg, market);\n            this.emit(\"trade\", trade, market);\n            return;\n        }\n\n        // candle\n        if (msg.data.e === \"kline\") {\n            const remote_id = msg.data.s;\n            const market = this._candleSubs.get(remote_id);\n            if (!market) return;\n\n            const candle = this._constructCandle(msg);\n            this.emit(\"candle\", candle, market);\n            return;\n        }\n\n        // l2snapshot\n        if (msg.stream.match(/@depth20/)) {\n            const remote_id = msg.stream.split(\"@\")[0].toUpperCase();\n            const market = this._level2SnapshotSubs.get(remote_id);\n            if (!market) return;\n\n            const snapshot = this._constructLevel2Snapshot(msg, market);\n            this.emit(\"l2snapshot\", snapshot, market);\n            return;\n        }\n\n        // l2update\n        if (msg.stream.match(/@depth/)) {\n            const remote_id = msg.stream.split(\"@\")[0].toUpperCase();\n            const market = this._level2UpdateSubs.get(remote_id);\n            if (!market) return;\n\n            const update = this._constructLevel2Update(msg, market);\n            this.emit(\"l2update\", update, market);\n            return;\n        }\n    }\n\n    protected _constructTicker(msg, market: Market) {\n        const {\n            E: timestamp,\n            c: last,\n            v: volume,\n            q: quoteVolume,\n            h: high,\n            l: low,\n            p: change,\n            P: changePercent,\n            a: ask,\n            A: askVolume,\n            b: bid,\n            B: bidVolume,\n        } = msg;\n        const open = parseFloat(last) + parseFloat(change);\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: timestamp,\n            last,\n            open: open.toFixed(8),\n            high,\n            low,\n            volume,\n            quoteVolume,\n            change,\n            changePercent,\n            bid,\n            bidVolume,\n            ask,\n            askVolume,\n        });\n    }\n\n    protected _constructAggTrade({ data }, market: Market) {\n        const { a: trade_id, p: price, q: size, T: time, m: buyer } = data;\n        const unix = time;\n        const amount = size;\n        const side = buyer ? \"buy\" : \"sell\";\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: trade_id.toFixed(),\n            unix,\n            side,\n            price,\n            amount,\n        });\n    }\n\n    protected _constructRawTrade({ data }, market: Market) {\n        const {\n            t: trade_id,\n            p: price,\n            q: size,\n            b: buyOrderId,\n            a: sellOrderId,\n            T: time,\n            m: buyer,\n        } = data;\n        const unix = time;\n        const amount = size;\n        const side = buyer ? \"buy\" : \"sell\";\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: trade_id,\n            unix,\n            side,\n            price,\n            amount,\n            buyOrderId,\n            sellOrderId,\n        });\n    }\n\n    /**\n   * Kline data looks like:\n   { stream: 'btcusdt@kline_1m',\n    data:\n    { e: 'kline',\n      E: 1571068845689,\n      s:  'BTCUSDT',\n      k:\n        { t: 1571068800000,\n          T: 1571068859999,\n          s: 'BTCUSDT',\n          i: '1m',\n          f: 189927800,\n          L: 189928107,\n          o: '8254.05000000',\n          c: '8253.61000000',\n          h: '8256.58000000',\n          l: '8250.93000000',\n          v: '19.10571600',\n          n: 308,\n          x: false,\n          q: '157694.32610840',\n          V: '8.19456200',\n          Q: '67640.56793106',\n          B: '0' } } }\n   */\n    protected _constructCandle({ data }) {\n        const k = data.k;\n        return new Candle(k.t, k.o, k.h, k.l, k.c, k.v);\n    }\n\n    protected _constructLevel2Snapshot(msg, market: Market) {\n        const sequenceId = msg.data.lastUpdateId;\n        const asks = msg.data.asks.map(p => new Level2Point(p[0], p[1]));\n        const bids = msg.data.bids.map(p => new Level2Point(p[0], p[1]));\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            asks,\n            bids,\n        });\n    }\n\n    /**\n   {\n      \"e\": \"depthUpdate\", // Event type\n      \"E\": 123456789,     // Event time\n      \"s\": \"BNBBTC\",      // Symbol\n      \"U\": 157,           // First update ID in event\n      \"u\": 160,           // Final update ID in event\n      \"b\": [              // Bids to be updated\n        [\n          \"0.0024\",       // Price level to be updated\n          \"10\"            // Quantity\n        ]\n      ],\n      \"a\": [              // Asks to be updated\n        [\n          \"0.0026\",       // Price level to be updated\n          \"100\"           // Quantity\n        ]\n      ]\n    }\n   */\n    protected _constructLevel2Update(msg, market) {\n        const eventMs = msg.data.E;\n        const sequenceId = msg.data.U;\n        const lastSequenceId = msg.data.u;\n        const asks = msg.data.a.map(p => new Level2Point(p[0], p[1]));\n        const bids = msg.data.b.map(p => new Level2Point(p[0], p[1]));\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            lastSequenceId,\n            eventMs,\n            asks,\n            bids,\n        });\n    }\n\n    protected async __requestLevel2Snapshot(market) {\n        let failed = false;\n        try {\n            const remote_id = market.id;\n            const uri = `${this._restL2SnapshotPath}?limit=1000&symbol=${remote_id}`;\n            const raw = (await https.get(uri)) as any;\n            const sequenceId = raw.lastUpdateId;\n            const timestampMs = raw.E;\n            const asks = raw.asks.map(p => new Level2Point(p[0], p[1]));\n            const bids = raw.bids.map(p => new Level2Point(p[0], p[1]));\n            const snapshot = new Level2Snapshot({\n                exchange: this.name,\n                base: market.base,\n                quote: market.quote,\n                sequenceId,\n                timestampMs,\n                asks,\n                bids,\n            });\n            this.emit(\"l2snapshot\", snapshot, market);\n        } catch (ex) {\n            this.emit(\"error\", ex);\n            failed = true;\n        } finally {\n            if (failed) this._requestLevel2Snapshot(market);\n        }\n    }\n}\n\nexport function candlePeriod(p) {\n    switch (p) {\n        case CandlePeriod._1m:\n            return \"1m\";\n        case CandlePeriod._3m:\n            return \"3m\";\n        case CandlePeriod._5m:\n            return \"5m\";\n        case CandlePeriod._15m:\n            return \"15m\";\n        case CandlePeriod._30m:\n            return \"30m\";\n        case CandlePeriod._1h:\n            return \"1h\";\n        case CandlePeriod._2h:\n            return \"2h\";\n        case CandlePeriod._4h:\n            return \"4h\";\n        case CandlePeriod._6h:\n            return \"6h\";\n        case CandlePeriod._8h:\n            return \"8h\";\n        case CandlePeriod._12h:\n            return \"12h\";\n        case CandlePeriod._1d:\n            return \"1d\";\n        case CandlePeriod._3d:\n            return \"3d\";\n        case CandlePeriod._1w:\n            return \"1w\";\n        case CandlePeriod._1M:\n            return \"1M\";\n    }\n}\n"]},"metadata":{},"sourceType":"script"}