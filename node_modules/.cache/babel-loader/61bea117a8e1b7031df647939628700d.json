{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseProClient = void 0;\n\nconst moment = require(\"moment\");\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst Level3Point_1 = require(\"../Level3Point\");\n\nconst Level3Update_1 = require(\"../Level3Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nclass CoinbaseProClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://ws-feed.pro.coinbase.com\",\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"CoinbasePro\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasLevel2Updates = true;\n    this.hasLevel3Updates = true;\n  }\n\n  _sendSubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      type: \"subscribe\",\n      product_ids: [remote_id],\n      channels: [\"ticker\"]\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      type: \"unsubscribe\",\n      product_ids: [remote_id],\n      channels: [\"ticker\"]\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      type: \"subscribe\",\n      product_ids: [remote_id],\n      channels: [\"matches\"]\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      type: \"unsubscribe\",\n      product_ids: [remote_id],\n      channels: [\"matches\"]\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      type: \"subscribe\",\n      product_ids: [remote_id],\n      channels: [\"level2\"]\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      type: \"unsubscribe\",\n      product_ids: [remote_id],\n      channels: [\"level2\"]\n    }));\n  }\n\n  _sendSubLevel3Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      type: \"subscribe\",\n      product_ids: [remote_id],\n      channels: [\"full\"]\n    }));\n  }\n\n  _sendUnsubLevel3Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      type: \"unsubscribe\",\n      product_ids: [remote_id],\n      channels: [\"full\"]\n    }));\n  }\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw);\n    const {\n      type,\n      product_id\n    } = msg;\n\n    if (type === \"ticker\" && this._tickerSubs.has(product_id)) {\n      const market = this._tickerSubs.get(product_id);\n\n      const ticker = this._constructTicker(msg, market);\n\n      this.emit(\"ticker\", ticker, market);\n    }\n\n    if (type === \"match\" && this._tradeSubs.has(product_id)) {\n      const market = this._tradeSubs.get(product_id);\n\n      const trade = this._constructTrade(msg, market);\n\n      this.emit(\"trade\", trade, market);\n    }\n\n    if (type === \"snapshot\" && this._level2UpdateSubs.has(product_id)) {\n      const market = this._level2UpdateSubs.get(product_id);\n\n      const snapshot = this._constructLevel2Snapshot(msg, market);\n\n      this.emit(\"l2snapshot\", snapshot, market);\n    }\n\n    if (type === \"l2update\" && this._level2UpdateSubs.has(product_id)) {\n      const market = this._level2UpdateSubs.get(product_id);\n\n      const update = this._constructLevel2Update(msg, market);\n\n      this.emit(\"l2update\", update, market);\n    }\n\n    if ((type === \"received\" || type === \"open\" || type === \"done\" || type === \"match\" || type === \"change\") && this._level3UpdateSubs.has(product_id)) {\n      const market = this._level3UpdateSubs.get(product_id);\n\n      const update = this._constructLevel3Update(msg, market);\n\n      this.emit(\"l3update\", update, market);\n      return;\n    }\n  }\n\n  _constructTicker(msg, market) {\n    const {\n      price,\n      volume_24h,\n      open_24h,\n      low_24h,\n      high_24h,\n      best_bid,\n      best_ask,\n      time\n    } = msg;\n    const change = parseFloat(price) - parseFloat(open_24h);\n    const changePercent = (parseFloat(price) - parseFloat(open_24h)) / parseFloat(open_24h) * 100;\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: moment.utc(time).valueOf(),\n      last: price,\n      open: open_24h,\n      high: high_24h,\n      low: low_24h,\n      volume: volume_24h,\n      change: change.toFixed(8),\n      changePercent: changePercent.toFixed(8),\n      bid: best_bid,\n      ask: best_ask\n    });\n  }\n\n  _constructTrade(msg, market) {\n    let {\n      trade_id,\n      time,\n      size,\n      price,\n      side,\n      maker_order_id,\n      taker_order_id\n    } = msg;\n    const unix = moment.utc(time).valueOf();\n    maker_order_id = maker_order_id.replace(/-/g, \"\");\n    taker_order_id = taker_order_id.replace(/-/g, \"\");\n    const buyOrderId = side === \"buy\" ? maker_order_id : taker_order_id;\n    const sellOrderId = side === \"sell\" ? maker_order_id : taker_order_id;\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: trade_id.toFixed(),\n      unix,\n      side,\n      price,\n      amount: size,\n      buyOrderId,\n      sellOrderId\n    });\n  }\n\n  _constructLevel2Snapshot(msg, market) {\n    let {\n      bids,\n      asks\n    } = msg;\n    bids = bids.map(_ref => {\n      let [price, size] = _ref;\n      return new Level2Point_1.Level2Point(price, size);\n    });\n    asks = asks.map(_ref2 => {\n      let [price, size] = _ref2;\n      return new Level2Point_1.Level2Point(price, size);\n    });\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: \"CoinbasePro\",\n      base: market.base,\n      quote: market.quote,\n      bids,\n      asks\n    });\n  }\n\n  _constructLevel2Update(msg, market) {\n    const {\n      changes,\n      time\n    } = msg;\n    const timestampMs = new Date(time).getTime();\n    const asks = [];\n    const bids = [];\n\n    for (const [side, price, size] of changes) {\n      const point = new Level2Point_1.Level2Point(price, size);\n      if (side === \"buy\") bids.push(point);else asks.push(point);\n    }\n\n    return new Level2Update_1.Level2Update({\n      exchange: \"CoinbasePro\",\n      base: market.base,\n      quote: market.quote,\n      timestampMs,\n      asks,\n      bids\n    });\n  }\n\n  _constructLevel3Update(msg, market) {\n    const timestampMs = moment(msg.time).valueOf();\n    const sequenceId = msg.sequence;\n    const asks = [];\n    const bids = [];\n    let point;\n\n    switch (msg.type) {\n      case \"received\":\n        point = new Level3Point_1.Level3Point(msg.order_id, msg.price, msg.size, {\n          type: msg.type,\n          side: msg.side,\n          order_type: msg.order_type,\n          funds: msg.funds\n        });\n        break;\n\n      case \"open\":\n        point = new Level3Point_1.Level3Point(msg.order_id, msg.price, msg.remaining_size, {\n          type: msg.type,\n          remaining_size: msg.remaining_size\n        });\n        break;\n\n      case \"done\":\n        point = new Level3Point_1.Level3Point(msg.order_id, msg.price, msg.remaining_size, {\n          type: msg.type,\n          reason: msg.reason,\n          remaining_size: msg.remaining_size\n        });\n        break;\n\n      case \"match\":\n        point = new Level3Point_1.Level3Point(msg.maker_order_id, msg.price, msg.size, {\n          type: msg.type,\n          trade_id: msg.trade_id,\n          maker_order_id: msg.maker_order_id,\n          taker_order_id: msg.taker_order_id\n        });\n        break;\n\n      case \"change\":\n        point = new Level3Point_1.Level3Point(msg.order_id, msg.price, msg.new_size, {\n          type: msg.type,\n          new_size: msg.new_size,\n          old_size: msg.old_size,\n          new_funds: msg.new_funds,\n          old_funds: msg.old_funds\n        });\n        break;\n    }\n\n    if (msg.side === \"sell\") asks.push(point);else bids.push(point);\n    return new Level3Update_1.Level3Update({\n      exchange: \"CoinbasePro\",\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      timestampMs,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.CoinbaseProClient = CoinbaseProClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/CoinbaseProClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nimport moment = require(\"moment\");\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { Level3Point } from \"../Level3Point\";\nimport { Level3Update } from \"../Level3Update\";\nimport { Market } from \"../Market\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\nexport class CoinbaseProClient extends BasicClient {\n    constructor({ wssPath = \"wss://ws-feed.pro.coinbase.com\", watcherMs }: ClientOptions = {}) {\n        super(wssPath, \"CoinbasePro\", undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasLevel2Updates = true;\n        this.hasLevel3Updates = true;\n    }\n\n    protected _sendSubTicker(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                type: \"subscribe\",\n                product_ids: [remote_id],\n                channels: [\"ticker\"],\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                type: \"unsubscribe\",\n                product_ids: [remote_id],\n                channels: [\"ticker\"],\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                type: \"subscribe\",\n                product_ids: [remote_id],\n                channels: [\"matches\"],\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                type: \"unsubscribe\",\n                product_ids: [remote_id],\n                channels: [\"matches\"],\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                type: \"subscribe\",\n                product_ids: [remote_id],\n                channels: [\"level2\"],\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                type: \"unsubscribe\",\n                product_ids: [remote_id],\n                channels: [\"level2\"],\n            }),\n        );\n    }\n\n    protected _sendSubLevel3Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                type: \"subscribe\",\n                product_ids: [remote_id],\n                channels: [\"full\"],\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel3Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                type: \"unsubscribe\",\n                product_ids: [remote_id],\n                channels: [\"full\"],\n            }),\n        );\n    }\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n\n    protected _onMessage(raw) {\n        const msg = JSON.parse(raw);\n\n        const { type, product_id } = msg;\n\n        if (type === \"ticker\" && this._tickerSubs.has(product_id)) {\n            const market = this._tickerSubs.get(product_id);\n            const ticker = this._constructTicker(msg, market);\n            this.emit(\"ticker\", ticker, market);\n        }\n\n        if (type === \"match\" && this._tradeSubs.has(product_id)) {\n            const market = this._tradeSubs.get(product_id);\n            const trade = this._constructTrade(msg, market);\n            this.emit(\"trade\", trade, market);\n        }\n\n        if (type === \"snapshot\" && this._level2UpdateSubs.has(product_id)) {\n            const market = this._level2UpdateSubs.get(product_id);\n            const snapshot = this._constructLevel2Snapshot(msg, market);\n            this.emit(\"l2snapshot\", snapshot, market);\n        }\n\n        if (type === \"l2update\" && this._level2UpdateSubs.has(product_id)) {\n            const market = this._level2UpdateSubs.get(product_id);\n            const update = this._constructLevel2Update(msg, market);\n            this.emit(\"l2update\", update, market);\n        }\n\n        if (\n            (type === \"received\" ||\n                type === \"open\" ||\n                type === \"done\" ||\n                type === \"match\" ||\n                type === \"change\") &&\n            this._level3UpdateSubs.has(product_id)\n        ) {\n            const market = this._level3UpdateSubs.get(product_id);\n            const update = this._constructLevel3Update(msg, market);\n            this.emit(\"l3update\", update, market);\n            return;\n        }\n    }\n\n    protected _constructTicker(msg, market: Market) {\n        const { price, volume_24h, open_24h, low_24h, high_24h, best_bid, best_ask, time } = msg;\n        const change = parseFloat(price) - parseFloat(open_24h);\n        const changePercent =\n            ((parseFloat(price) - parseFloat(open_24h)) / parseFloat(open_24h)) * 100;\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: moment.utc(time).valueOf(),\n            last: price,\n            open: open_24h,\n            high: high_24h,\n            low: low_24h,\n            volume: volume_24h,\n            change: change.toFixed(8),\n            changePercent: changePercent.toFixed(8),\n            bid: best_bid,\n            ask: best_ask,\n        });\n    }\n\n    protected _constructTrade(msg, market: Market) {\n        let { trade_id, time, size, price, side, maker_order_id, taker_order_id } = msg;\n\n        const unix = moment.utc(time).valueOf();\n\n        maker_order_id = maker_order_id.replace(/-/g, \"\");\n        taker_order_id = taker_order_id.replace(/-/g, \"\");\n\n        const buyOrderId = side === \"buy\" ? maker_order_id : taker_order_id;\n        const sellOrderId = side === \"sell\" ? maker_order_id : taker_order_id;\n\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: trade_id.toFixed(),\n            unix,\n            side,\n            price,\n            amount: size,\n            buyOrderId,\n            sellOrderId,\n        });\n    }\n\n    protected _constructLevel2Snapshot(msg, market: Market) {\n        let { bids, asks } = msg;\n        bids = bids.map(([price, size]) => new Level2Point(price, size));\n        asks = asks.map(([price, size]) => new Level2Point(price, size));\n\n        return new Level2Snapshot({\n            exchange: \"CoinbasePro\",\n            base: market.base,\n            quote: market.quote,\n            bids,\n            asks,\n        });\n    }\n\n    protected _constructLevel2Update(msg, market: Market) {\n        const { changes, time } = msg;\n        const timestampMs = new Date(time).getTime();\n        const asks = [];\n        const bids = [];\n        for (const [side, price, size] of changes) {\n            const point = new Level2Point(price, size);\n            if (side === \"buy\") bids.push(point);\n            else asks.push(point);\n        }\n\n        return new Level2Update({\n            exchange: \"CoinbasePro\",\n            base: market.base,\n            quote: market.quote,\n            timestampMs,\n            asks,\n            bids,\n        });\n    }\n\n    protected _constructLevel3Update(msg, market: Market) {\n        const timestampMs = moment(msg.time).valueOf();\n        const sequenceId = msg.sequence;\n\n        const asks = [];\n        const bids = [];\n        let point;\n\n        switch (msg.type) {\n            case \"received\":\n                point = new Level3Point(msg.order_id, msg.price, msg.size, {\n                    type: msg.type,\n                    side: msg.side,\n                    order_type: msg.order_type,\n                    funds: msg.funds,\n                });\n                break;\n            case \"open\":\n                point = new Level3Point(msg.order_id, msg.price, msg.remaining_size, {\n                    type: msg.type,\n                    remaining_size: msg.remaining_size,\n                });\n                break;\n            case \"done\":\n                point = new Level3Point(msg.order_id, msg.price, msg.remaining_size, {\n                    type: msg.type,\n                    reason: msg.reason,\n                    remaining_size: msg.remaining_size,\n                });\n                break;\n            case \"match\":\n                point = new Level3Point(msg.maker_order_id, msg.price, msg.size, {\n                    type: msg.type,\n                    trade_id: msg.trade_id,\n                    maker_order_id: msg.maker_order_id,\n                    taker_order_id: msg.taker_order_id,\n                });\n                break;\n            case \"change\":\n                point = new Level3Point(msg.order_id, msg.price, msg.new_size, {\n                    type: msg.type,\n                    new_size: msg.new_size,\n                    old_size: msg.old_size,\n                    new_funds: msg.new_funds,\n                    old_funds: msg.old_funds,\n                });\n                break;\n        }\n\n        if (msg.side === \"sell\") asks.push(point);\n        else bids.push(point);\n\n        return new Level3Update({\n            exchange: \"CoinbasePro\",\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            timestampMs,\n            asks,\n            bids,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}