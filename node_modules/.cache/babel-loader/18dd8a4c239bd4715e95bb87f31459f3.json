{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LedgerXClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/* eslint-disable @typescript-eslint/no-floating-promises */\n\n/* eslint-disable @typescript-eslint/no-empty-function */\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level3Point_1 = require(\"../Level3Point\");\n\nconst Level3Snapshot_1 = require(\"../Level3Snapshot\");\n\nconst https = __importStar(require(\"../Https\"));\n\nconst Trade_1 = require(\"../Trade\");\n\nconst Level3Update_1 = require(\"../Level3Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n/**\n * LedgerX is defined in https://docs.ledgerx.com/reference#connecting\n * This socket uses a unified stream for ALL market data. So we will leverage\n * subscription filtering to only reply with values that of are of interest.\n */\n\n\nclass LedgerXClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://api.ledgerx.com/ws?token=\",\n      apiKey,\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath + apiKey, \"LedgerX\", undefined, watcherMs);\n    this._sendSubTicker = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubTicker = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTrades = true;\n    this.hasLevel3Updates = true;\n    this.runId = 0;\n    this.apiKey = apiKey;\n  }\n\n  _sendSubTrades() {}\n\n  _sendUnsubTrades() {}\n\n  _sendSubLevel3Updates(remote_id, market) {\n    this._requestLevel3Snapshot(market);\n  }\n\n  _sendUnSubLevel3Updates() {}\n\n  _onMessage(msg) {\n    this.emit(\"raw\", msg);\n    const json = JSON.parse(msg);\n\n    if (json.type === \"auth_success\") {\n      return;\n    }\n\n    if (json.type === \"book_top\") {\n      return;\n    }\n\n    if (json.positions !== undefined) {\n      return;\n    }\n\n    if (json.collateral !== undefined) {\n      return;\n    }\n\n    if (json.type === \"exposure_reports\") {\n      return;\n    }\n\n    if (json.type === \"heartbeat\") {\n      this._watcher.markAlive(); // update the run_id if it's changed\n\n\n      if (this.runId !== json.run_id) {\n        this.runId = json.run_id;\n      }\n\n      return;\n    }\n\n    if (json.type === \"action_report\") {\n      // insert event\n      if (json.status_type === 200) {\n        const market = this._level3UpdateSubs.get(json.contract_id) || this._level3UpdateSubs.get(json.contract_id.toString());\n\n        if (!market) return;\n\n        const update = this._constructL3Insert(json, market);\n\n        this.emit(\"l3update\", update, market, json);\n        return;\n      } // trade event, filled either partial or fully\n\n\n      if (json.status_type === 201) {\n        // check for trade subscription\n        let market = this._tradeSubs.get(json.contract_id) || this._tradeSubs.get(json.contract_id.toString()); // prettier-ignore\n\n\n        if (market) {\n          const trade = this._constructTrade(json, market);\n\n          this.emit(\"trade\", trade, market, json);\n        } // check for l3 subscription\n\n\n        market = this._level3UpdateSubs.get(json.contract_id) || this._level3UpdateSubs.get(json.contract_id.toString());\n\n        if (market) {\n          const update = this._constructL3Trade(json, market);\n\n          this.emit(\"l3update\", update, market, json);\n        }\n\n        return;\n      } // cancel event\n\n\n      if (json.status_type === 203) {\n        const market = this._level3UpdateSubs.get(json.contract_id) || this._level3UpdateSubs.get(json.contract_id.toString());\n\n        if (!market) return;\n\n        const update = this._constructL3Cancel(json, market);\n\n        this.emit(\"l3update\", update, market, json);\n        return;\n      } // cancelled and replaced event\n\n\n      if (json.status_type === 204) {\n        const market = this._level3UpdateSubs.get(json.contract_id) || this._level3UpdateSubs.get(json.contract_id.toString());\n\n        if (!market) return;\n\n        const update = this._constructL3Replace(json, market);\n\n        this.emit(\"l3update\", update, market, json);\n        return;\n      }\n    }\n  }\n  /**\n   * Obtains the orderbook via REST\n   */\n\n\n  async _requestLevel3Snapshot(market) {\n    try {\n      const uri = `https://trade.ledgerx.com/api/book-states/${market.id}?token=${this.apiKey}`;\n      const {\n        data\n      } = await https.get(uri);\n      const sequenceId = data.clock;\n      const asks = [];\n      const bids = [];\n\n      for (const row of data.book_states) {\n        const orderId = row.mid;\n        const price = row.price.toFixed(2);\n        const size = row.size.toFixed();\n        const point = new Level3Point_1.Level3Point(orderId, price, size);\n        if (row.is_ask) asks.push(point);else bids.push(point);\n      }\n\n      const snapshot = new Level3Snapshot_1.Level3Snapshot({\n        exchange: this.name,\n        base: market.base,\n        quote: market.quote,\n        sequenceId,\n        asks,\n        bids\n      });\n      this.emit(\"l3snapshot\", snapshot, market);\n    } catch (ex) {\n      // TODO handle this properly\n      this.emit(\"error\", ex);\n    }\n  }\n  /**\n  {\n    mid: 'f4c34b09de0b4064a33b7b46f8180022',\n    filled_size: 5,\n    size: 0,\n    inserted_price: 0,\n    updated_time: 1597173352257155800,\n    inserted_size: 0,\n    timestamp: 1597173352257176800,\n    ticks: 78678024531551,\n    price: 0,\n    original_price: 16000,\n    status_type: 201,\n    order_type: 'customer_limit_order',\n    status_reason: 52,\n    filled_price: 16000,\n    is_volatile: false,\n    clock: 24823,\n    vwap: 16000,\n    is_ask: false,\n    inserted_time: 1597173352257155800,\n    type: 'action_report',\n    original_size: 5,\n    contract_id: 22204639\n  }\n  {\n    mid: '885be81549974faf88e4430f6046513d',\n    filled_size: 5,\n    size: 0,\n    inserted_price: 0,\n    updated_time: 1597164994095326700,\n    inserted_size: 0,\n    timestamp: 1597173352258250800,\n    ticks: 78678025605522,\n    price: 0,\n    original_price: 16000,\n    status_type: 201,\n    order_type: 'customer_limit_order',\n    status_reason: 0,\n    filled_price: 16000,\n    is_volatile: false,\n    clock: 24824,\n    vwap: 16000,\n    is_ask: true,\n    inserted_time: 1597164994095326700,\n    type: 'action_report',\n    original_size: 10,\n    contract_id: 22204639\n  }\n  */\n\n\n  _constructTrade(msg, market) {\n    let buyOrderId;\n    let sellOrderId;\n    if (msg.is_ask) sellOrderId = msg.mid;else buyOrderId = msg.mid;\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: undefined,\n      unix: Math.floor(msg.timestamp / 1e6),\n      side: msg.is_ask ? \"sell\" : \"buy\",\n      price: msg.filled_price.toFixed(8),\n      amount: msg.filled_size.toFixed(8),\n      buyOrderId,\n      sellOrderId,\n      open_interest: msg.open_interest\n    });\n  }\n  /**\n  * 200 - A resting limit order of size inserted_size @ price\n  * inserted_price was inserted into book depth.\n  {\n    inserted_time: 1597176131501325800,\n    timestamp: 1597176131501343700,\n    filled_size: 0,\n    ticks: 81457268698527,\n    size: 1000,\n    contract_id: 22202469,\n    filled_price: 0,\n    inserted_price: 165100,\n    inserted_size: 1000,\n    vwap: 0,\n    is_volatile: true,\n    mid: 'eecd8297c1dc42f1985f67c909540631',\n    original_price: 165100,\n    order_type: 'customer_limit_order',\n    updated_time: 1597176131501325800,\n    original_size: 1000,\n    status_type: 200,\n    status_reason: 0,\n    type: 'action_report',\n    price: 165100,\n    clock: 260,\n    is_ask: false\n  }\n  */\n\n\n  _constructL3Insert(msg, market) {\n    const price = msg.price.toFixed(8);\n    const size = msg.inserted_size.toFixed(8);\n    const point = new Level3Point_1.Level3Point(msg.mid, price, size, {\n      order_type: msg.order_type,\n      status_type: msg.status_type,\n      status_reason: msg.status_reason,\n      is_volatile: msg.is_volatile,\n      timestamp: msg.timestamp,\n      ticks: msg.ticks,\n      inserted_time: msg.inserted_time,\n      updated_time: msg.updated_time,\n      original_price: msg.original_price,\n      original_size: msg.original_size,\n      inserted_price: msg.inserted_price,\n      inserted_size: msg.inserted_size,\n      filled_price: msg.filled_price,\n      filled_size: msg.filled_size,\n      price: msg.price,\n      size: msg.size,\n      vwap: msg.vwap\n    });\n    const asks = [];\n    const bids = [];\n    if (msg.is_ask) asks.push(point);else bids.push(point);\n    return new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: msg.clock,\n      timestampMs: Math.floor(msg.inserted_time / 1e6),\n      runId: this.runId,\n      asks,\n      bids\n    });\n  }\n  /**\n  * 201 - A cross of size filled_size @ price filled_price occurred.\n  * Subtract filled_size from the resting size for this order.\n  {\n    mid: '885be81549974faf88e4430f6046513d',\n    filled_size: 5,\n    size: 0,\n    inserted_price: 0,\n    updated_time: 1597164994095326700,\n    inserted_size: 0,\n    timestamp: 1597173352258250800,\n    ticks: 78678025605522,\n    price: 0,\n    original_price: 16000,\n    status_type: 201,\n    order_type: 'customer_limit_order',\n    status_reason: 0,\n    filled_price: 16000,\n    is_volatile: false,\n    clock: 24824,\n    vwap: 16000,\n    is_ask: true,\n    inserted_time: 1597164994095326700,\n    type: 'action_report',\n    original_size: 10,\n    contract_id: 22204639\n  }\n  */\n\n\n  _constructL3Trade(msg, market) {\n    const price = msg.original_price.toFixed(8);\n    const size = (msg.original_size - msg.filled_size).toFixed(8);\n    const point = new Level3Point_1.Level3Point(msg.mid, price, size, {\n      order_type: msg.order_type,\n      status_type: msg.status_type,\n      status_reason: msg.status_reason,\n      is_volatile: msg.is_volatile,\n      timestamp: msg.timestamp,\n      ticks: msg.ticks,\n      inserted_time: msg.inserted_time,\n      updated_time: msg.updated_time,\n      original_price: msg.original_price,\n      original_size: msg.original_size,\n      inserted_price: msg.inserted_price,\n      inserted_size: msg.inserted_size,\n      filled_price: msg.filled_price,\n      filled_size: msg.filled_size,\n      price: msg.price,\n      size: msg.size,\n      vwap: msg.vwap,\n      open_interest: msg.open_interest\n    });\n    const asks = [];\n    const bids = [];\n    if (msg.is_ask) asks.push(point);else bids.push(point);\n    return new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: msg.clock,\n      timestampMs: Math.floor(msg.inserted_time / 1e6),\n      runId: this.runId,\n      asks,\n      bids\n    });\n  }\n  /**\n  * 203 - An order was cancelled. Remove this order from book depth.\n  {\n    inserted_time: 1597176853952381700,\n    timestamp: 1597176857137740800,\n    filled_size: 0,\n    ticks: 82182905095242,\n    size: 0,\n    contract_id: 22204631,\n    filled_price: 0,\n    inserted_price: 0,\n    inserted_size: 0,\n    vwap: 0,\n    is_volatile: true,\n    mid: 'b623fdd6fae14fcbbcb9ab3b6b9b3771',\n    original_price: 51300,\n    order_type: 'customer_limit_order',\n    updated_time: 1597176853952381700,\n    original_size: 1,\n    status_type: 203,\n    status_reason: 0,\n    type: 'action_report',\n    price: 0,\n    clock: 506,\n    is_ask: false\n  }\n  */\n\n\n  _constructL3Cancel(msg, market) {\n    const price = msg.original_price.toFixed(8);\n    const size = 0 .toFixed(8);\n    const point = new Level3Point_1.Level3Point(msg.mid, price, size, {\n      order_type: msg.order_type,\n      status_type: msg.status_type,\n      status_reason: msg.status_reason,\n      is_volatile: msg.is_volatile,\n      timestamp: msg.timestamp,\n      ticks: msg.ticks,\n      inserted_time: msg.inserted_time,\n      updated_time: msg.updated_time,\n      original_price: msg.original_price,\n      original_size: msg.original_size,\n      inserted_price: msg.inserted_price,\n      inserted_size: msg.inserted_size,\n      filled_price: msg.filled_price,\n      filled_size: msg.filled_size,\n      price: msg.price,\n      size: msg.size,\n      vwap: msg.vwap,\n      open_interest: msg.open_interest\n    });\n    const asks = [];\n    const bids = [];\n    if (msg.is_ask) asks.push(point);else bids.push(point);\n    return new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: msg.clock,\n      timestampMs: Math.floor(msg.inserted_time / 1e6),\n      runId: this.runId,\n      asks,\n      bids\n    });\n  }\n  /**\n  * 204 - An order was cancelled and replaced. The new order retains the\n  * existing mid, and can only reflect an update in size and not price.\n  * Overwrite the resting order size with inserted_size.\n  *\n  {\n  \"status_type\": 204,\n  \"inserted_size\": 12,\n  \"original_price\": 59000,\n  \"open_interest\": 121,\n  \"filled_size\": 0,\n  \"updated_time\": 1623074768372895949,\n  \"clock\": 40011,\n  \"size\": 12,\n  \"timestamp\": 1623074768372897897,\n  \"status_reason\": 0,\n  \"vwap\": 0,\n  \"inserted_time\": 1623074764668677182,\n  \"price\": 59000,\n  \"type\": \"action_report\",\n  \"is_ask\": true,\n  \"original_size\": 12,\n  \"order_type\": \"customer_limit_order\",\n  \"is_volatile\": true,\n  \"ticks\": 25980094140252686,\n  \"filled_price\": 0,\n  \"mid\": \"c071baaa458a411db184cb6874e86d69\",\n  \"inserted_price\": 59000,\n  \"contract_id\": 22216779\n  }\n  */\n\n\n  _constructL3Replace(msg, market) {\n    const price = msg.original_price.toFixed(8);\n    const size = msg.inserted_size.toFixed(8);\n    const point = new Level3Point_1.Level3Point(msg.mid, price, size, {\n      order_type: msg.order_type,\n      status_type: msg.status_type,\n      status_reason: msg.status_reason,\n      is_volatile: msg.is_volatile,\n      timestamp: msg.timestamp,\n      ticks: msg.ticks,\n      inserted_time: msg.inserted_time,\n      updated_time: msg.updated_time,\n      original_price: msg.original_price,\n      original_size: msg.original_size,\n      inserted_price: msg.inserted_price,\n      inserted_size: msg.inserted_size,\n      filled_price: msg.filled_price,\n      filled_size: msg.filled_size,\n      price: msg.price,\n      size: msg.size,\n      vwap: msg.vwap,\n      open_interest: msg.open_interest\n    });\n    const asks = [];\n    const bids = [];\n    if (msg.is_ask) asks.push(point);else bids.push(point);\n    return new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: msg.clock,\n      timestampMs: Math.floor(msg.inserted_time / 1e6),\n      runId: this.runId,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.LedgerXClient = LedgerXClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/LedgerXClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { Level3Point } from \"../Level3Point\";\nimport { Level3Snapshot } from \"../Level3Snapshot\";\nimport * as https from \"../Https\";\nimport { Trade } from \"../Trade\";\nimport { Level3Update } from \"../Level3Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\n\nexport type LedgerXClientOptions = ClientOptions & {\n    apiKey?: string;\n};\n\n/**\n * LedgerX is defined in https://docs.ledgerx.com/reference#connecting\n * This socket uses a unified stream for ALL market data. So we will leverage\n * subscription filtering to only reply with values that of are of interest.\n */\nexport class LedgerXClient extends BasicClient {\n    public runId: number;\n    public apiKey: string;\n\n    constructor({\n        wssPath = \"wss://api.ledgerx.com/ws?token=\",\n        apiKey,\n        watcherMs,\n    }: LedgerXClientOptions = {}) {\n        super(wssPath + apiKey, \"LedgerX\", undefined, watcherMs);\n\n        this.hasTrades = true;\n        this.hasLevel3Updates = true;\n        this.runId = 0;\n        this.apiKey = apiKey;\n    }\n\n    protected _sendSubTrades() {}\n\n    protected _sendUnsubTrades() {}\n\n    protected _sendSubLevel3Updates(remote_id, market) {\n        this._requestLevel3Snapshot(market);\n    }\n\n    protected _sendUnSubLevel3Updates() {}\n\n    protected _sendSubTicker = NotImplementedFn;\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendUnsubTicker = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel2Updates = NotImplementedFn;\n    protected _sendUnsubLevel2Updates = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(msg: string) {\n        this.emit(\"raw\", msg);\n\n        const json = JSON.parse(msg);\n\n        if (json.type === \"auth_success\") {\n            return;\n        }\n\n        if (json.type === \"book_top\") {\n            return;\n        }\n\n        if (json.positions !== undefined) {\n            return;\n        }\n\n        if (json.collateral !== undefined) {\n            return;\n        }\n\n        if (json.type === \"exposure_reports\") {\n            return;\n        }\n\n        if (json.type === \"heartbeat\") {\n            this._watcher.markAlive();\n\n            // update the run_id if it's changed\n            if (this.runId !== json.run_id) {\n                this.runId = json.run_id;\n            }\n            return;\n        }\n\n        if (json.type === \"action_report\") {\n            // insert event\n            if (json.status_type === 200) {\n                const market =\n                    this._level3UpdateSubs.get(json.contract_id) ||\n                    this._level3UpdateSubs.get(json.contract_id.toString());\n                if (!market) return;\n\n                const update = this._constructL3Insert(json, market);\n                this.emit(\"l3update\", update, market, json);\n                return;\n            }\n\n            // trade event, filled either partial or fully\n            if (json.status_type === 201) {\n                // check for trade subscription\n                let market =\n          this._tradeSubs.get(json.contract_id) ||\n          this._tradeSubs.get(json.contract_id.toString()); // prettier-ignore\n                if (market) {\n                    const trade = this._constructTrade(json, market);\n                    this.emit(\"trade\", trade, market, json);\n                }\n\n                // check for l3 subscription\n                market =\n                    this._level3UpdateSubs.get(json.contract_id) ||\n                    this._level3UpdateSubs.get(json.contract_id.toString());\n                if (market) {\n                    const update = this._constructL3Trade(json, market);\n                    this.emit(\"l3update\", update, market, json);\n                }\n\n                return;\n            }\n\n            // cancel event\n            if (json.status_type === 203) {\n                const market =\n                    this._level3UpdateSubs.get(json.contract_id) ||\n                    this._level3UpdateSubs.get(json.contract_id.toString());\n                if (!market) return;\n\n                const update = this._constructL3Cancel(json, market);\n                this.emit(\"l3update\", update, market, json);\n                return;\n            }\n\n            // cancelled and replaced event\n            if (json.status_type === 204) {\n                const market =\n                    this._level3UpdateSubs.get(json.contract_id) ||\n                    this._level3UpdateSubs.get(json.contract_id.toString());\n                if (!market) return;\n\n                const update = this._constructL3Replace(json, market);\n                this.emit(\"l3update\", update, market, json);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Obtains the orderbook via REST\n     */\n    protected async _requestLevel3Snapshot(market) {\n        try {\n            const uri = `https://trade.ledgerx.com/api/book-states/${market.id}?token=${this.apiKey}`;\n            const { data } = await https.get(uri);\n            const sequenceId = data.clock;\n            const asks = [];\n            const bids = [];\n            for (const row of data.book_states) {\n                const orderId = row.mid;\n                const price = row.price.toFixed(2);\n                const size = row.size.toFixed();\n                const point = new Level3Point(orderId, price, size);\n                if (row.is_ask) asks.push(point);\n                else bids.push(point);\n            }\n            const snapshot = new Level3Snapshot({\n                exchange: this.name,\n                base: market.base,\n                quote: market.quote,\n                sequenceId,\n                asks,\n                bids,\n            });\n            this.emit(\"l3snapshot\", snapshot, market);\n        } catch (ex) {\n            // TODO handle this properly\n            this.emit(\"error\", ex);\n        }\n    }\n\n    /**\n   {\n      mid: 'f4c34b09de0b4064a33b7b46f8180022',\n      filled_size: 5,\n      size: 0,\n      inserted_price: 0,\n      updated_time: 1597173352257155800,\n      inserted_size: 0,\n      timestamp: 1597173352257176800,\n      ticks: 78678024531551,\n      price: 0,\n      original_price: 16000,\n      status_type: 201,\n      order_type: 'customer_limit_order',\n      status_reason: 52,\n      filled_price: 16000,\n      is_volatile: false,\n      clock: 24823,\n      vwap: 16000,\n      is_ask: false,\n      inserted_time: 1597173352257155800,\n      type: 'action_report',\n      original_size: 5,\n      contract_id: 22204639\n    }\n    {\n      mid: '885be81549974faf88e4430f6046513d',\n      filled_size: 5,\n      size: 0,\n      inserted_price: 0,\n      updated_time: 1597164994095326700,\n      inserted_size: 0,\n      timestamp: 1597173352258250800,\n      ticks: 78678025605522,\n      price: 0,\n      original_price: 16000,\n      status_type: 201,\n      order_type: 'customer_limit_order',\n      status_reason: 0,\n      filled_price: 16000,\n      is_volatile: false,\n      clock: 24824,\n      vwap: 16000,\n      is_ask: true,\n      inserted_time: 1597164994095326700,\n      type: 'action_report',\n      original_size: 10,\n      contract_id: 22204639\n    }\n   */\n    protected _constructTrade(msg, market) {\n        let buyOrderId;\n        let sellOrderId;\n        if (msg.is_ask) sellOrderId = msg.mid;\n        else buyOrderId = msg.mid;\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: undefined, // doesn't emit or match REST API\n            unix: Math.floor(msg.timestamp / 1e6),\n            side: msg.is_ask ? \"sell\" : \"buy\",\n            price: msg.filled_price.toFixed(8),\n            amount: msg.filled_size.toFixed(8),\n            buyOrderId,\n            sellOrderId,\n            open_interest: msg.open_interest,\n        });\n    }\n\n    /**\n   * 200 - A resting limit order of size inserted_size @ price\n   * inserted_price was inserted into book depth.\n   {\n      inserted_time: 1597176131501325800,\n      timestamp: 1597176131501343700,\n      filled_size: 0,\n      ticks: 81457268698527,\n      size: 1000,\n      contract_id: 22202469,\n      filled_price: 0,\n      inserted_price: 165100,\n      inserted_size: 1000,\n      vwap: 0,\n      is_volatile: true,\n      mid: 'eecd8297c1dc42f1985f67c909540631',\n      original_price: 165100,\n      order_type: 'customer_limit_order',\n      updated_time: 1597176131501325800,\n      original_size: 1000,\n      status_type: 200,\n      status_reason: 0,\n      type: 'action_report',\n      price: 165100,\n      clock: 260,\n      is_ask: false\n    }\n   */\n    protected _constructL3Insert(msg, market) {\n        const price = msg.price.toFixed(8);\n        const size = msg.inserted_size.toFixed(8);\n        const point = new Level3Point(msg.mid, price, size, {\n            order_type: msg.order_type,\n            status_type: msg.status_type,\n            status_reason: msg.status_reason,\n            is_volatile: msg.is_volatile,\n            timestamp: msg.timestamp,\n            ticks: msg.ticks,\n            inserted_time: msg.inserted_time,\n            updated_time: msg.updated_time,\n            original_price: msg.original_price,\n            original_size: msg.original_size,\n            inserted_price: msg.inserted_price,\n            inserted_size: msg.inserted_size,\n            filled_price: msg.filled_price,\n            filled_size: msg.filled_size,\n            price: msg.price,\n            size: msg.size,\n            vwap: msg.vwap,\n        });\n\n        const asks = [];\n        const bids = [];\n\n        if (msg.is_ask) asks.push(point);\n        else bids.push(point);\n\n        return new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: msg.clock,\n            timestampMs: Math.floor(msg.inserted_time / 1e6),\n            runId: this.runId,\n            asks,\n            bids,\n        });\n    }\n\n    /**\n   * 201 - A cross of size filled_size @ price filled_price occurred.\n   * Subtract filled_size from the resting size for this order.\n  {\n      mid: '885be81549974faf88e4430f6046513d',\n      filled_size: 5,\n      size: 0,\n      inserted_price: 0,\n      updated_time: 1597164994095326700,\n      inserted_size: 0,\n      timestamp: 1597173352258250800,\n      ticks: 78678025605522,\n      price: 0,\n      original_price: 16000,\n      status_type: 201,\n      order_type: 'customer_limit_order',\n      status_reason: 0,\n      filled_price: 16000,\n      is_volatile: false,\n      clock: 24824,\n      vwap: 16000,\n      is_ask: true,\n      inserted_time: 1597164994095326700,\n      type: 'action_report',\n      original_size: 10,\n      contract_id: 22204639\n    }\n  */\n    protected _constructL3Trade(msg, market) {\n        const price = msg.original_price.toFixed(8);\n        const size = (msg.original_size - msg.filled_size).toFixed(8);\n        const point = new Level3Point(msg.mid, price, size, {\n            order_type: msg.order_type,\n            status_type: msg.status_type,\n            status_reason: msg.status_reason,\n            is_volatile: msg.is_volatile,\n            timestamp: msg.timestamp,\n            ticks: msg.ticks,\n            inserted_time: msg.inserted_time,\n            updated_time: msg.updated_time,\n            original_price: msg.original_price,\n            original_size: msg.original_size,\n            inserted_price: msg.inserted_price,\n            inserted_size: msg.inserted_size,\n            filled_price: msg.filled_price,\n            filled_size: msg.filled_size,\n            price: msg.price,\n            size: msg.size,\n            vwap: msg.vwap,\n            open_interest: msg.open_interest,\n        });\n\n        const asks = [];\n        const bids = [];\n\n        if (msg.is_ask) asks.push(point);\n        else bids.push(point);\n\n        return new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: msg.clock,\n            timestampMs: Math.floor(msg.inserted_time / 1e6),\n            runId: this.runId,\n            asks,\n            bids,\n        });\n    }\n\n    /**\n   * 203 - An order was cancelled. Remove this order from book depth.\n   {\n      inserted_time: 1597176853952381700,\n      timestamp: 1597176857137740800,\n      filled_size: 0,\n      ticks: 82182905095242,\n      size: 0,\n      contract_id: 22204631,\n      filled_price: 0,\n      inserted_price: 0,\n      inserted_size: 0,\n      vwap: 0,\n      is_volatile: true,\n      mid: 'b623fdd6fae14fcbbcb9ab3b6b9b3771',\n      original_price: 51300,\n      order_type: 'customer_limit_order',\n      updated_time: 1597176853952381700,\n      original_size: 1,\n      status_type: 203,\n      status_reason: 0,\n      type: 'action_report',\n      price: 0,\n      clock: 506,\n      is_ask: false\n    }\n   */\n    protected _constructL3Cancel(msg, market) {\n        const price = msg.original_price.toFixed(8);\n        const size = (0).toFixed(8);\n        const point = new Level3Point(msg.mid, price, size, {\n            order_type: msg.order_type,\n            status_type: msg.status_type,\n            status_reason: msg.status_reason,\n            is_volatile: msg.is_volatile,\n            timestamp: msg.timestamp,\n            ticks: msg.ticks,\n            inserted_time: msg.inserted_time,\n            updated_time: msg.updated_time,\n            original_price: msg.original_price,\n            original_size: msg.original_size,\n            inserted_price: msg.inserted_price,\n            inserted_size: msg.inserted_size,\n            filled_price: msg.filled_price,\n            filled_size: msg.filled_size,\n            price: msg.price,\n            size: msg.size,\n            vwap: msg.vwap,\n            open_interest: msg.open_interest,\n        });\n\n        const asks = [];\n        const bids = [];\n\n        if (msg.is_ask) asks.push(point);\n        else bids.push(point);\n\n        return new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: msg.clock,\n            timestampMs: Math.floor(msg.inserted_time / 1e6),\n            runId: this.runId,\n            asks,\n            bids,\n        });\n    }\n\n    /**\n   * 204 - An order was cancelled and replaced. The new order retains the\n   * existing mid, and can only reflect an update in size and not price.\n   * Overwrite the resting order size with inserted_size.\n   *\n   {\n    \"status_type\": 204,\n    \"inserted_size\": 12,\n    \"original_price\": 59000,\n    \"open_interest\": 121,\n    \"filled_size\": 0,\n    \"updated_time\": 1623074768372895949,\n    \"clock\": 40011,\n    \"size\": 12,\n    \"timestamp\": 1623074768372897897,\n    \"status_reason\": 0,\n    \"vwap\": 0,\n    \"inserted_time\": 1623074764668677182,\n    \"price\": 59000,\n    \"type\": \"action_report\",\n    \"is_ask\": true,\n    \"original_size\": 12,\n    \"order_type\": \"customer_limit_order\",\n    \"is_volatile\": true,\n    \"ticks\": 25980094140252686,\n    \"filled_price\": 0,\n    \"mid\": \"c071baaa458a411db184cb6874e86d69\",\n    \"inserted_price\": 59000,\n    \"contract_id\": 22216779\n  }\n   */\n    protected _constructL3Replace(msg, market) {\n        const price = msg.original_price.toFixed(8);\n        const size = msg.inserted_size.toFixed(8);\n        const point = new Level3Point(msg.mid, price, size, {\n            order_type: msg.order_type,\n            status_type: msg.status_type,\n            status_reason: msg.status_reason,\n            is_volatile: msg.is_volatile,\n            timestamp: msg.timestamp,\n            ticks: msg.ticks,\n            inserted_time: msg.inserted_time,\n            updated_time: msg.updated_time,\n            original_price: msg.original_price,\n            original_size: msg.original_size,\n            inserted_price: msg.inserted_price,\n            inserted_size: msg.inserted_size,\n            filled_price: msg.filled_price,\n            filled_size: msg.filled_size,\n            price: msg.price,\n            size: msg.size,\n            vwap: msg.vwap,\n            open_interest: msg.open_interest,\n        });\n\n        const asks = [];\n        const bids = [];\n\n        if (msg.is_ask) asks.push(point);\n        else bids.push(point);\n\n        return new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: msg.clock,\n            timestampMs: Math.floor(msg.inserted_time / 1e6),\n            runId: this.runId,\n            asks,\n            bids,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}