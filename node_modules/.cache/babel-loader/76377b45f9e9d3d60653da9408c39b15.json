{"ast":null,"code":"var _jsxFileName = \"/Users/Derek/workspace/crypto-visualizer-wip/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Canvas from './components/Canvas/Canvas';\nimport Menu from './components/Menu/Menu';\nimport TransactionBubble from './components/TransactionBubble/TransactionBubble';\nimport { ReadyState } from 'react-use-websocket';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Initiate WebSocket connection\n  // const wsBase = process.env.REACT_APP_WS_BASE_URL\n  // const apiKey = process.env.REACT_APP_API_KEY\n  // const {\n  //   lastMessage,\n  //   sendMessage,\n  //   readyState\n  // } = useWebSocket(`${wsBase}?api_key=${apiKey}`)\n  // Respond to new messages coming in from the data provider\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const data = JSON.parse(lastMessage.data); // If the welcome message is received, the app is ready\n      // to request trade updates over the socket\n      // e.g. BTC-USD on Coinbase\n\n      if ((data === null || data === void 0 ? void 0 : data.MESSAGE) === 'STREAMERWELCOME') {\n        console.log('subscribing to channel...');\n        var subRequest = {\n          \"action\": \"SubAdd\",\n          \"subs\": [\"0~Coinbase~BTC~USD\"]\n        };\n        sendMessage(JSON.stringify(subRequest));\n      } // If the app receives a trade update,\n      // create a Transaction and log it to the console for now\n      else if ((data === null || data === void 0 ? void 0 : data.TYPE) === '0') {\n        const transaction = {\n          exchange: data.M,\n          coin: data.FSYM,\n          price: data.P,\n          amount: data.Q\n        };\n        console.log(`${transaction.exchange}: ${transaction.amount} ${transaction.coin} for $${transaction.price}`);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [lastMessage]); // React to the state of the WebSocket connection\n  // and just log it to the console for now\n\n  useEffect(() => {\n    console.log('Connection is', readyState === ReadyState.OPEN ? 'ACTIVE' : 'INACTIVE');\n  }, [readyState]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionBubble, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer-wip/src/App.tsx"],"names":["Canvas","Menu","TransactionBubble","ReadyState","useEffect","App","lastMessage","data","JSON","parse","MESSAGE","console","log","subRequest","sendMessage","stringify","TYPE","transaction","exchange","M","coin","FSYM","price","P","amount","Q","readyState","OPEN"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,iBAAP,MAA8B,kDAA9B;AACA,SAAuBC,UAAvB,QAAyC,qBAAzC;AACA,SAASC,SAAT,QAA0B,OAA1B;;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,WAAW,KAAK,IAApB,EAA0B;AACxB,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,WAAW,CAACC,IAAvB,CAAb,CADwB,CAGxB;AACA;AACA;;AACA,UAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,OAAN,MAAkB,iBAAtB,EAAyC;AACvCC,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,YAAIC,UAAU,GAAG;AACf,oBAAU,QADK;AAEf,kBAAQ,CAAC,oBAAD;AAFO,SAAjB;AAIAC,QAAAA,WAAW,CAACN,IAAI,CAACO,SAAL,CAAeF,UAAf,CAAD,CAAX;AAED,OARD,CAUA;AACA;AAXA,WAYK,IAAI,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAES,IAAN,MAAe,GAAnB,EAAwB;AAC3B,cAAMC,WAAwB,GAAG;AAC/BC,UAAAA,QAAQ,EAAEX,IAAI,CAACY,CADgB;AAE/BC,UAAAA,IAAI,EAAEb,IAAI,CAACc,IAFoB;AAG/BC,UAAAA,KAAK,EAAEf,IAAI,CAACgB,CAHmB;AAI/BC,UAAAA,MAAM,EAAEjB,IAAI,CAACkB;AAJkB,SAAjC;AAMAd,QAAAA,OAAO,CAACC,GAAR,CAAa,GAAEK,WAAW,CAACC,QAAS,KAAID,WAAW,CAACO,MAAO,IAAGP,WAAW,CAACG,IAAK,SAAQH,WAAW,CAACK,KAAM,EAAzG;AACD;AACF,KA5Ba,CA8BhB;;AACC,GA/BQ,EA+BN,CAAChB,WAAD,CA/BM,CAAT,CAXa,CA4Cb;AACA;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bc,UAAU,KAAKvB,UAAU,CAACwB,IAA1B,GAAiC,QAAjC,GAA4C,UAAzE;AACD,GAFQ,EAEN,CAACD,UAAD,CAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAOD;;GAzDQrB,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Canvas from './components/Canvas/Canvas';\nimport Menu from './components/Menu/Menu';\nimport TransactionBubble from './components/TransactionBubble/TransactionBubble';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { useEffect } from 'react';\nimport { Transaction } from './models/transaction';\n\nfunction App() {\n  // Initiate WebSocket connection\n  // const wsBase = process.env.REACT_APP_WS_BASE_URL\n  // const apiKey = process.env.REACT_APP_API_KEY\n  // const {\n  //   lastMessage,\n  //   sendMessage,\n  //   readyState\n  // } = useWebSocket(`${wsBase}?api_key=${apiKey}`)\n  \n  // Respond to new messages coming in from the data provider\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const data = JSON.parse(lastMessage.data)\n\n      // If the welcome message is received, the app is ready\n      // to request trade updates over the socket\n      // e.g. BTC-USD on Coinbase\n      if (data?.MESSAGE === 'STREAMERWELCOME') {\n        console.log('subscribing to channel...')\n        var subRequest = {\n          \"action\": \"SubAdd\",\n          \"subs\": [\"0~Coinbase~BTC~USD\"]\n        };\n        sendMessage(JSON.stringify(subRequest))\n\n      }\n      \n      // If the app receives a trade update,\n      // create a Transaction and log it to the console for now\n      else if (data?.TYPE === '0') {\n        const transaction: Transaction = {\n          exchange: data.M,\n          coin: data.FSYM,\n          price: data.P,\n          amount: data.Q\n        }\n        console.log(`${transaction.exchange}: ${transaction.amount} ${transaction.coin} for $${transaction.price}`);\n      }\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lastMessage])\n\n  // React to the state of the WebSocket connection\n  // and just log it to the console for now\n  useEffect(() => {\n    console.log('Connection is', readyState === ReadyState.OPEN ? 'ACTIVE' : 'INACTIVE')\n  }, [readyState])\n  \n  return (\n    <>\n      <Canvas />\n      <Menu />\n      <TransactionBubble />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}