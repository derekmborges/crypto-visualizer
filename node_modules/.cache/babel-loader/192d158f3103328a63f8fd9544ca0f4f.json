{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Queue = void 0;\n\nconst CircularBuffer_1 = require(\"./CircularBuffer\");\n/**\n * Implements a fast FIFO Queue using a circular buffer.\n */\n\n\nclass Queue {\n  constructor() {\n    let bufferSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1 << 12;\n    this.bufferSize = bufferSize;\n    this.buffer = new CircularBuffer_1.CircularBuffer(bufferSize);\n  }\n\n  shift() {\n    return this.buffer.read();\n  }\n\n  push(val) {\n    if (!this.buffer.write(val)) {\n      this._resize();\n\n      this.buffer.write(val);\n    }\n  }\n\n  _resize() {\n    // construct a new buffer\n    const newBuf = new CircularBuffer_1.CircularBuffer(this.buffer.size * 2); // eslint-disable-next-line no-constant-condition\n\n    while (true) {\n      const val = this.buffer.read();\n      if (val === undefined) break;\n      newBuf.write(val);\n    }\n\n    this.buffer = newBuf;\n  }\n\n}\n\nexports.Queue = Queue;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/flowcontrol/Queue.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,KAAb,CAAkB;AAGd,EAAA,WAAA,GAAyC;AAAA,QAApB,UAAoB,uEAAP,KAAK,EAAE;AAApB,SAAA,UAAA,GAAA,UAAA;AACjB,SAAK,MAAL,GAAc,IAAI,gBAAA,CAAA,cAAJ,CAAmB,UAAnB,CAAd;AACH;;AAEM,EAAA,KAAK,GAAA;AACR,WAAO,KAAK,MAAL,CAAY,IAAZ,EAAP;AACH;;AAEM,EAAA,IAAI,CAAC,GAAD,EAAO;AACd,QAAI,CAAC,KAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB,CAAL,EAA6B;AACzB,WAAK,OAAL;;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB;AACH;AACJ;;AAES,EAAA,OAAO,GAAA;AACb;AACA,UAAM,MAAM,GAAG,IAAI,gBAAA,CAAA,cAAJ,CAAsB,KAAK,MAAL,CAAY,IAAZ,GAAmB,CAAzC,CAAf,CAFa,CAIb;;AACA,WAAO,IAAP,EAAa;AACT,YAAM,GAAG,GAAG,KAAK,MAAL,CAAY,IAAZ,EAAZ;AACA,UAAI,GAAG,KAAK,SAAZ,EAAuB;AACvB,MAAA,MAAM,CAAC,KAAP,CAAa,GAAb;AACH;;AAED,SAAK,MAAL,GAAc,MAAd;AACH;;AA9Ba;;AAAlB,OAAA,CAAA,KAAA,GAAA,KAAA","sourcesContent":["import { CircularBuffer } from \"./CircularBuffer\";\n\n/**\n * Implements a fast FIFO Queue using a circular buffer.\n */\nexport class Queue<T> {\n    public buffer: CircularBuffer<T>;\n\n    constructor(readonly bufferSize = 1 << 12) {\n        this.buffer = new CircularBuffer(bufferSize);\n    }\n\n    public shift(): T {\n        return this.buffer.read();\n    }\n\n    public push(val: T) {\n        if (!this.buffer.write(val)) {\n            this._resize();\n            this.buffer.write(val);\n        }\n    }\n\n    protected _resize() {\n        // construct a new buffer\n        const newBuf = new CircularBuffer<T>(this.buffer.size * 2);\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const val = this.buffer.read();\n            if (val === undefined) break;\n            newBuf.write(val);\n        }\n\n        this.buffer = newBuf;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}