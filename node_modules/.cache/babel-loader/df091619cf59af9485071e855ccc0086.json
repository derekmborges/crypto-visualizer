{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/* eslint-disable @typescript-eslint/no-implied-eval */\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst https = __importStar(require(\"../Https\"));\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n/**\n * Liquid client as implemented by:\n * https://developers.liquid.com/#public-channels\n */\n\n\nclass LiquidClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://tap.liquid.com/app/LiquidTapClient\",\n      autoloadSymbolMaps = true,\n      requestSnapshot = false,\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"Liquid\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.requestSnapshot = requestSnapshot;\n    this.hasTrades = true;\n    this.hasTickers = true;\n    this.hasLevel2Updates = true;\n    this.productIdMap = new Map();\n\n    if (autoloadSymbolMaps) {\n      this.loadSymbolMaps().catch(err => this.emit(\"error\", err));\n    }\n  }\n\n  _beforeConnect() {\n    this._wss.on(\"connected\", this._startPing.bind(this));\n\n    this._wss.on(\"disconnected\", this._stopPing.bind(this));\n\n    this._wss.on(\"closed\", this._stopPing.bind(this));\n  }\n\n  _startPing() {\n    clearInterval(this._pingInterval);\n    this._pingInterval = setInterval(this._sendPing.bind(this), 60000);\n  }\n\n  _stopPing() {\n    clearInterval(this._pingInterval);\n  }\n\n  _sendPing() {\n    if (this._wss) {\n      this._wss.send(JSON.stringify({\n        event: \"pusher:ping\",\n        data: {}\n      }));\n    }\n  }\n  /**\n  * Liquid endpoints brilliantly/s require you to include the product id\n  * in addition to the market symbol. So we need a way to reference this.\n  * Results from the products API look like:\n  * {\n    \"id\": 5,\n    \"product_type\": \"CurrencyPair\",\n    \"code\": \"CASH\",\n    \"name\": \"CASH Trading\",\n    \"market_ask\": \"48203.05\",\n    \"market_bid\": \"48188.15\",\n    \"indicator\": -1,\n    \"currency\": \"JPY\",\n    \"currency_pair_code\": \"BTCJPY\",\n    \"symbol\": \"¥\",\n    \"fiat_minimum_withdraw\": \"1500.0\",\n    \"pusher_channel\": \"product_cash_btcjpy_5\",\n    \"taker_fee\": \"0.0\",\n    \"maker_fee\": \"0.0\",\n    \"low_market_bid\": \"47630.99\",\n    \"high_market_ask\": \"48396.71\",\n    \"volume_24h\": \"2915.627366519999999998\",\n    \"last_price_24h\": \"48217.2\",\n    \"last_traded_price\": \"48203.05\",\n    \"last_traded_quantity\": \"1.0\",\n    \"quoted_currency\": \"JPY\",\n    \"base_currency\": \"BTC\",\n    \"exchange_rate\": \"0.009398151671149725\",\n    \"timestamp\": \"1576739219.195353100\"\n  },\n  */\n\n\n  async loadSymbolMaps() {\n    const uri = \"https://api.liquid.com/products\";\n    const results = await https.get(uri);\n\n    for (const result of results) {\n      this.productIdMap.set(result.currency_pair_code.toLowerCase(), result.id);\n    }\n  }\n\n  _sendSubTicker(remote_id) {\n    remote_id = remote_id.toLowerCase();\n    const product_id = this.productIdMap.get(remote_id);\n\n    this._wss.send(JSON.stringify({\n      event: \"pusher:subscribe\",\n      data: {\n        channel: `product_cash_${remote_id}_${product_id}`\n      }\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    remote_id = remote_id.toLowerCase();\n    const product_id = this.productIdMap.get(remote_id);\n\n    this._wss.send(JSON.stringify({\n      event: \"pusher:unsubscribe\",\n      data: {\n        channel: `product_cash_${remote_id}_${product_id}`\n      }\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"pusher:subscribe\",\n      data: {\n        channel: `executions_cash_${remote_id.toLowerCase()}`\n      }\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"pusher:unsubscribe\",\n      data: {\n        channel: `executions_cash_${remote_id.toLowerCase()}`\n      }\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    remote_id = remote_id.toLowerCase();\n\n    this._wss.send(JSON.stringify({\n      event: \"pusher:subscribe\",\n      data: {\n        channel: `price_ladders_cash_${remote_id}_buy`\n      }\n    }));\n\n    this._wss.send(JSON.stringify({\n      event: \"pusher:subscribe\",\n      data: {\n        channel: `price_ladders_cash_${remote_id}_sell`\n      }\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    remote_id = remote_id.toLowerCase();\n\n    this._wss.send(JSON.stringify({\n      event: \"pusher:unsubscribe\",\n      data: {\n        channel: `price_ladders_cash_${remote_id}_buy`\n      }\n    }));\n\n    this._wss.send(JSON.stringify({\n      event: \"pusher:unsubscribe\",\n      data: {\n        channel: `price_ladders_cash_${remote_id}_sell`\n      }\n    }));\n  } /////////////////////////////////////////////\n\n\n  _onMessage(raw) {\n    let msg;\n\n    try {\n      msg = JSON.parse(raw);\n    } catch (e) {\n      this.emit(\"error\", e);\n      return;\n    } // success messages look like:\n    // {\n    //   channel: 'executions_cash_btcjpy',\n    //   data: {},\n    //   event: 'pusher_internal:subscription_succeeded'\n    // }\n\n\n    if (msg.channel) {\n      if (msg.channel.startsWith(\"executions_cash_\")) {\n        this._onTrade(msg);\n\n        return;\n      }\n\n      if (msg.channel.startsWith(\"product_cash_\")) {\n        this._onTicker(msg);\n\n        return;\n      }\n\n      if (msg.channel.startsWith(\"price_ladders_cash_\")) {\n        this._onOrderBook(msg);\n\n        return;\n      }\n    }\n  }\n  /**\n   * Ticker message in the format:\n   * {\n   *   channel: 'product_cash_btcjpy_5',\n   *   data: '{\"base_currency\":\"BTC\",\"btc_minimum_withdraw\":null,\"cfd_enabled\":false,\"code\":\"CASH\",\"currency\":\"JPY\",\"currency_pair_code\":\"BTCJPY\",\"disabled\":false,\"fiat_minimum_withdraw\":null,\"high_market_ask\":\"772267.0\",\"id\":\"5\",\"indicator\":-1,\"last_event_timestamp\":\"1587066660.016599696\",\"last_price_24h\":\"725777.0\",\"last_traded_price\":\"764242.0\",\"last_traded_quantity\":\"0.05805448\",\"low_market_bid\":\"698763.0\",\"margin_enabled\":false,\"market_ask\":\"764291.0\",\"market_bid\":\"764242.0\",\"name\":\" CASH Trading\",\"perpetual_enabled\":false,\"product_type\":\"CurrencyPair\",\"pusher_channel\":\"product_cash_btcjpy_5\",\"quoted_currency\":\"JPY\",\"symbol\":\"¥\",\"tick_size\":\"1.0\",\"timestamp\":\"1587066660.016599696\",\"volume_24h\":\"20739.2916905799999999\"}',\n   *   event: 'updated'\n   * }\n   */\n\n\n  _onTicker(msg) {\n    let data;\n\n    try {\n      data = JSON.parse(msg.data);\n    } catch (e) {\n      return;\n    }\n\n    const remote_id = /(product_cash_)(\\w+)_\\d+/.exec(msg.channel)[2];\n\n    const market = this._tickerSubs.get(remote_id);\n\n    if (!market) return;\n    const open = Number(data.last_price_24h);\n    const close = Number(data.last_traded_price);\n    const change = close - open;\n    const changePercent = change / open * 100;\n    const ticker = new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: Math.round(Number(data.timestamp) * 1000),\n      last: data.last_traded_price,\n      open: data.last_price_24h,\n      high: undefined,\n      low: undefined,\n      volume: data.volume_24h,\n      quoteVolume: undefined,\n      change: change.toFixed(8),\n      changePercent: changePercent.toFixed(2),\n      bid: data.market_bid,\n      bidVolume: undefined,\n      ask: data.market_ask,\n      askVolume: undefined\n    });\n    this.emit(\"ticker\", ticker, market);\n  }\n  /**\n   * Trade message in the format:\n   * {\n   *   channel: 'executions_cash_btcjpy',\n   *   data: '{\"created_at\":1587056568,\"id\":297058474,\"price\":757584.0,\"quantity\":0.178,\"taker_side\":\"sell\"}',\n   *   event: 'created'\n   * }\n   */\n\n\n  _onTrade(msg) {\n    let data;\n\n    try {\n      data = JSON.parse(msg.data);\n    } catch (e) {\n      return;\n    }\n\n    const remote_id = msg.channel.substr(msg.channel.lastIndexOf(\"_\") + 1);\n\n    const market = this._tradeSubs.get(remote_id);\n\n    if (!market) return;\n    const trade = new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: data.id.toFixed(),\n      unix: parseInt(data.created_at) * 1000,\n      side: data.taker_side == \"buy\" ? \"buy\" : \"sell\",\n      price: data.price.toFixed(8),\n      amount: data.quantity.toFixed(8),\n      buyOrderId: undefined,\n      sellOrderId: undefined\n    });\n    this.emit(\"trade\", trade, market);\n  }\n  /**\n  * {\n      channel: 'price_ladders_cash_btcjpy_buy',\n      data: '[[\"755089.00000\",\"0.03319269\"],[\"755087.00000\",\"0.00593314\"],[\"755068.00000\",\"0.00150000\"],[\"755060.00000\",\"0.00100000\"],[\"755059.00000\",\"0.03244832\"],[\"755050.00000\",\"0.03244969\"],[\"755044.00000\",\"0.47500000\"],[\"754978.00000\",\"0.47500000\"],[\"754941.00000\",\"0.00100000\"],[\"754929.00000\",\"0.00100000\"],[\"754913.00000\",\"0.05409938\"],[\"754891.00000\",\"0.37872763\"],[\"754890.00000\",\"0.03974826\"],[\"754869.00000\",\"0.04059000\"],[\"754850.00000\",\"0.05000000\"],[\"754835.00000\",\"0.03300000\"],[\"754834.00000\",\"0.25000000\"],[\"754776.00000\",\"0.03000000\"],[\"754738.00000\",\"0.00960000\"],[\"754715.00000\",\"0.00500000\"],[\"754713.00000\",\"0.05000000\"],[\"754701.00000\",\"0.03244949\"],[\"754698.00000\",\"0.00100000\"],[\"754695.00000\",\"0.03245118\"],[\"754685.00000\",\"0.48000000\"],[\"754674.00000\",\"0.00900000\"],[\"754625.00000\",\"0.50000013\"],[\"754611.00000\",\"0.10000000\"],[\"754604.00000\",\"0.05000000\"],[\"754602.00000\",\"0.05000000\"],[\"754601.00000\",\"0.03000000\"],[\"754593.00000\",\"0.01000000\"],[\"754581.00000\",\"0.01000000\"],[\"754578.00000\",\"0.01020000\"],[\"754479.00000\",\"0.01840000\"],[\"754469.00000\",\"1.00000013\"],[\"754401.00000\",\"0.02500000\"],[\"754400.00000\",\"0.01000000\"],[\"754398.00000\",\"0.03000000\"],[\"754390.00000\",\"0.25000000\"]]',\n      event: 'updated'\n    }\n  */\n\n\n  _onOrderBook(msg) {\n    let data;\n\n    try {\n      data = JSON.parse(msg.data);\n    } catch (e) {\n      return;\n    }\n\n    const remote_id = /(price_ladders_cash_)(\\w+)_(buy|sell)+/.exec(msg.channel)[2];\n\n    const market = this._level2UpdateSubs.get(remote_id);\n\n    if (!market) return;\n    const side = msg.channel.endsWith(\"buy\") ? \"buy\" : \"sell\";\n    const points = data.map(_ref => {\n      let [price, amount] = _ref;\n      return new Level2Point_1.Level2Point(price, amount);\n    });\n    let bids;\n    let asks;\n\n    if (side == \"buy\") {\n      bids = points;\n      asks = [];\n    } else {\n      bids = [];\n      asks = points;\n    }\n\n    const update = new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      bids,\n      asks\n    });\n    this.emit(\"l2update\", update, market);\n  }\n\n}\n\nexports.LiquidClient = LiquidClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/LiquidClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-implied-eval */\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport * as https from \"../Https\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\nexport type LiquidClientOptions = ClientOptions & {\n    autoloadSymbolMaps?: boolean;\n    requestSnapshot?: boolean;\n};\n\n/**\n * Liquid client as implemented by:\n * https://developers.liquid.com/#public-channels\n */\nexport class LiquidClient extends BasicClient {\n    public requestSnapshot: boolean;\n    protected productIdMap: Map<string, string>;\n    protected _pingInterval: NodeJS.Timeout;\n\n    constructor({\n        wssPath = \"wss://tap.liquid.com/app/LiquidTapClient\",\n        autoloadSymbolMaps = true,\n        requestSnapshot = false,\n        watcherMs,\n    }: LiquidClientOptions = {}) {\n        super(wssPath, \"Liquid\", undefined, watcherMs);\n\n        this.requestSnapshot = requestSnapshot;\n        this.hasTrades = true;\n        this.hasTickers = true;\n        this.hasLevel2Updates = true;\n\n        this.productIdMap = new Map();\n        if (autoloadSymbolMaps) {\n            this.loadSymbolMaps().catch(err => this.emit(\"error\", err));\n        }\n    }\n\n    protected _beforeConnect() {\n        this._wss.on(\"connected\", this._startPing.bind(this));\n        this._wss.on(\"disconnected\", this._stopPing.bind(this));\n        this._wss.on(\"closed\", this._stopPing.bind(this));\n    }\n\n    protected _startPing() {\n        clearInterval(this._pingInterval);\n        this._pingInterval = setInterval(this._sendPing.bind(this), 60000);\n    }\n\n    protected _stopPing() {\n        clearInterval(this._pingInterval);\n    }\n\n    protected _sendPing() {\n        if (this._wss) {\n            this._wss.send(JSON.stringify({ event: \"pusher:ping\", data: {} }));\n        }\n    }\n\n    /**\n   * Liquid endpoints brilliantly/s require you to include the product id\n   * in addition to the market symbol. So we need a way to reference this.\n   * Results from the products API look like:\n   * {\n      \"id\": 5,\n      \"product_type\": \"CurrencyPair\",\n      \"code\": \"CASH\",\n      \"name\": \"CASH Trading\",\n      \"market_ask\": \"48203.05\",\n      \"market_bid\": \"48188.15\",\n      \"indicator\": -1,\n      \"currency\": \"JPY\",\n      \"currency_pair_code\": \"BTCJPY\",\n      \"symbol\": \"¥\",\n      \"fiat_minimum_withdraw\": \"1500.0\",\n      \"pusher_channel\": \"product_cash_btcjpy_5\",\n      \"taker_fee\": \"0.0\",\n      \"maker_fee\": \"0.0\",\n      \"low_market_bid\": \"47630.99\",\n      \"high_market_ask\": \"48396.71\",\n      \"volume_24h\": \"2915.627366519999999998\",\n      \"last_price_24h\": \"48217.2\",\n      \"last_traded_price\": \"48203.05\",\n      \"last_traded_quantity\": \"1.0\",\n      \"quoted_currency\": \"JPY\",\n      \"base_currency\": \"BTC\",\n      \"exchange_rate\": \"0.009398151671149725\",\n      \"timestamp\": \"1576739219.195353100\"\n    },\n   */\n    protected async loadSymbolMaps() {\n        const uri = \"https://api.liquid.com/products\";\n        const results: any = await https.get(uri);\n        for (const result of results) {\n            this.productIdMap.set(result.currency_pair_code.toLowerCase(), result.id);\n        }\n    }\n\n    protected _sendSubTicker(remote_id: string) {\n        remote_id = remote_id.toLowerCase();\n        const product_id = this.productIdMap.get(remote_id);\n        this._wss.send(\n            JSON.stringify({\n                event: \"pusher:subscribe\",\n                data: {\n                    channel: `product_cash_${remote_id}_${product_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id: string) {\n        remote_id = remote_id.toLowerCase();\n        const product_id = this.productIdMap.get(remote_id);\n        this._wss.send(\n            JSON.stringify({\n                event: \"pusher:unsubscribe\",\n                data: {\n                    channel: `product_cash_${remote_id}_${product_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"pusher:subscribe\",\n                data: {\n                    channel: `executions_cash_${remote_id.toLowerCase()}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"pusher:unsubscribe\",\n                data: {\n                    channel: `executions_cash_${remote_id.toLowerCase()}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id: string) {\n        remote_id = remote_id.toLowerCase();\n        this._wss.send(\n            JSON.stringify({\n                event: \"pusher:subscribe\",\n                data: {\n                    channel: `price_ladders_cash_${remote_id}_buy`,\n                },\n            }),\n        );\n        this._wss.send(\n            JSON.stringify({\n                event: \"pusher:subscribe\",\n                data: {\n                    channel: `price_ladders_cash_${remote_id}_sell`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id: string) {\n        remote_id = remote_id.toLowerCase();\n        this._wss.send(\n            JSON.stringify({\n                event: \"pusher:unsubscribe\",\n                data: {\n                    channel: `price_ladders_cash_${remote_id}_buy`,\n                },\n            }),\n        );\n        this._wss.send(\n            JSON.stringify({\n                event: \"pusher:unsubscribe\",\n                data: {\n                    channel: `price_ladders_cash_${remote_id}_sell`,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    /////////////////////////////////////////////\n\n    protected _onMessage(raw: string) {\n        let msg: any;\n        try {\n            msg = JSON.parse(raw);\n        } catch (e) {\n            this.emit(\"error\", e);\n            return;\n        }\n\n        // success messages look like:\n        // {\n        //   channel: 'executions_cash_btcjpy',\n        //   data: {},\n        //   event: 'pusher_internal:subscription_succeeded'\n        // }\n\n        if (msg.channel) {\n            if (msg.channel.startsWith(\"executions_cash_\")) {\n                this._onTrade(msg);\n                return;\n            }\n\n            if (msg.channel.startsWith(\"product_cash_\")) {\n                this._onTicker(msg);\n                return;\n            }\n\n            if (msg.channel.startsWith(\"price_ladders_cash_\")) {\n                this._onOrderBook(msg);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Ticker message in the format:\n     * {\n     *   channel: 'product_cash_btcjpy_5',\n     *   data: '{\"base_currency\":\"BTC\",\"btc_minimum_withdraw\":null,\"cfd_enabled\":false,\"code\":\"CASH\",\"currency\":\"JPY\",\"currency_pair_code\":\"BTCJPY\",\"disabled\":false,\"fiat_minimum_withdraw\":null,\"high_market_ask\":\"772267.0\",\"id\":\"5\",\"indicator\":-1,\"last_event_timestamp\":\"1587066660.016599696\",\"last_price_24h\":\"725777.0\",\"last_traded_price\":\"764242.0\",\"last_traded_quantity\":\"0.05805448\",\"low_market_bid\":\"698763.0\",\"margin_enabled\":false,\"market_ask\":\"764291.0\",\"market_bid\":\"764242.0\",\"name\":\" CASH Trading\",\"perpetual_enabled\":false,\"product_type\":\"CurrencyPair\",\"pusher_channel\":\"product_cash_btcjpy_5\",\"quoted_currency\":\"JPY\",\"symbol\":\"¥\",\"tick_size\":\"1.0\",\"timestamp\":\"1587066660.016599696\",\"volume_24h\":\"20739.2916905799999999\"}',\n     *   event: 'updated'\n     * }\n     */\n    protected _onTicker(msg) {\n        let data: any;\n        try {\n            data = JSON.parse(msg.data);\n        } catch (e) {\n            return;\n        }\n\n        const remote_id = /(product_cash_)(\\w+)_\\d+/.exec(msg.channel)[2];\n        const market = this._tickerSubs.get(remote_id);\n        if (!market) return;\n\n        const open = Number(data.last_price_24h);\n        const close = Number(data.last_traded_price);\n        const change = close - open;\n        const changePercent = (change / open) * 100;\n\n        const ticker = new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: Math.round(Number(data.timestamp) * 1000),\n            last: data.last_traded_price,\n            open: data.last_price_24h,\n            high: undefined,\n            low: undefined,\n            volume: data.volume_24h,\n            quoteVolume: undefined,\n            change: change.toFixed(8),\n            changePercent: changePercent.toFixed(2),\n            bid: data.market_bid,\n            bidVolume: undefined,\n            ask: data.market_ask,\n            askVolume: undefined,\n        });\n\n        this.emit(\"ticker\", ticker, market);\n    }\n\n    /**\n     * Trade message in the format:\n     * {\n     *   channel: 'executions_cash_btcjpy',\n     *   data: '{\"created_at\":1587056568,\"id\":297058474,\"price\":757584.0,\"quantity\":0.178,\"taker_side\":\"sell\"}',\n     *   event: 'created'\n     * }\n     */\n    protected _onTrade(msg) {\n        let data;\n        try {\n            data = JSON.parse(msg.data);\n        } catch (e) {\n            return;\n        }\n\n        const remote_id = msg.channel.substr(msg.channel.lastIndexOf(\"_\") + 1);\n\n        const market = this._tradeSubs.get(remote_id);\n        if (!market) return;\n\n        const trade = new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: data.id.toFixed(),\n            unix: parseInt(data.created_at) * 1000,\n            side: data.taker_side == \"buy\" ? \"buy\" : \"sell\",\n            price: data.price.toFixed(8),\n            amount: data.quantity.toFixed(8),\n            buyOrderId: undefined,\n            sellOrderId: undefined,\n        });\n\n        this.emit(\"trade\", trade, market);\n    }\n\n    /**\n   * {\n        channel: 'price_ladders_cash_btcjpy_buy',\n        data: '[[\"755089.00000\",\"0.03319269\"],[\"755087.00000\",\"0.00593314\"],[\"755068.00000\",\"0.00150000\"],[\"755060.00000\",\"0.00100000\"],[\"755059.00000\",\"0.03244832\"],[\"755050.00000\",\"0.03244969\"],[\"755044.00000\",\"0.47500000\"],[\"754978.00000\",\"0.47500000\"],[\"754941.00000\",\"0.00100000\"],[\"754929.00000\",\"0.00100000\"],[\"754913.00000\",\"0.05409938\"],[\"754891.00000\",\"0.37872763\"],[\"754890.00000\",\"0.03974826\"],[\"754869.00000\",\"0.04059000\"],[\"754850.00000\",\"0.05000000\"],[\"754835.00000\",\"0.03300000\"],[\"754834.00000\",\"0.25000000\"],[\"754776.00000\",\"0.03000000\"],[\"754738.00000\",\"0.00960000\"],[\"754715.00000\",\"0.00500000\"],[\"754713.00000\",\"0.05000000\"],[\"754701.00000\",\"0.03244949\"],[\"754698.00000\",\"0.00100000\"],[\"754695.00000\",\"0.03245118\"],[\"754685.00000\",\"0.48000000\"],[\"754674.00000\",\"0.00900000\"],[\"754625.00000\",\"0.50000013\"],[\"754611.00000\",\"0.10000000\"],[\"754604.00000\",\"0.05000000\"],[\"754602.00000\",\"0.05000000\"],[\"754601.00000\",\"0.03000000\"],[\"754593.00000\",\"0.01000000\"],[\"754581.00000\",\"0.01000000\"],[\"754578.00000\",\"0.01020000\"],[\"754479.00000\",\"0.01840000\"],[\"754469.00000\",\"1.00000013\"],[\"754401.00000\",\"0.02500000\"],[\"754400.00000\",\"0.01000000\"],[\"754398.00000\",\"0.03000000\"],[\"754390.00000\",\"0.25000000\"]]',\n        event: 'updated'\n      }\n   */\n    protected _onOrderBook(msg) {\n        let data;\n        try {\n            data = JSON.parse(msg.data);\n        } catch (e) {\n            return;\n        }\n\n        const remote_id = /(price_ladders_cash_)(\\w+)_(buy|sell)+/.exec(msg.channel)[2];\n        const market = this._level2UpdateSubs.get(remote_id);\n        if (!market) return;\n\n        const side = msg.channel.endsWith(\"buy\") ? \"buy\" : \"sell\";\n        const points = data.map(([price, amount]) => new Level2Point(price, amount));\n\n        let bids;\n        let asks;\n\n        if (side == \"buy\") {\n            bids = points;\n            asks = [];\n        } else {\n            bids = [];\n            asks = points;\n        }\n\n        const update = new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            bids,\n            asks,\n        });\n\n        this.emit(\"l2update\", update, market);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}