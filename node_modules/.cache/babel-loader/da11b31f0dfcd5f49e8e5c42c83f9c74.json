{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BlockTrade = void 0;\n\nclass BlockTrade {\n  constructor(_ref) {\n    let {\n      exchange,\n      base,\n      quote,\n      tradeId,\n      unix,\n      price,\n      amount\n    } = _ref;\n    this.exchange = exchange;\n    this.quote = quote;\n    this.base = base;\n    this.tradeId = tradeId;\n    this.unix = unix;\n    this.price = price;\n    this.amount = amount;\n  }\n\n  get marketId() {\n    return `${this.base}/${this.quote}`;\n  }\n  /**\n   * @deprecated use Market object (second argument to each event) to determine exchange and trade pair\n   */\n\n\n  get fullId() {\n    return `${this.exchange}:${this.base}/${this.quote}`;\n  }\n\n}\n\nexports.BlockTrade = BlockTrade;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/BlockTrade.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAa,UAAb,CAAuB;AASnB,EAAA,WAAA,OAAwF;AAAA,QAA5E;AAAE,MAAA,QAAF;AAAY,MAAA,IAAZ;AAAkB,MAAA,KAAlB;AAAyB,MAAA,OAAzB;AAAkC,MAAA,IAAlC;AAAwC,MAAA,KAAxC;AAA+C,MAAA;AAA/C,KAA4E;AACpF,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AACH;;AAEkB,MAAR,QAAQ,GAAA;AACf,WAAO,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,EAAjC;AACH;AAED;;AAEG;;;AACc,MAAN,MAAM,GAAA;AACb,WAAO,GAAG,KAAK,QAAQ,IAAI,KAAK,IAAI,IAAI,KAAK,KAAK,EAAlD;AACH;;AA5BkB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["export class BlockTrade {\n    public exchange: string;\n    public quote: string;\n    public base: string;\n    public tradeId: string;\n    public unix: string;\n    public price: string;\n    public amount: string;\n\n    constructor({ exchange, base, quote, tradeId, unix, price, amount }: Partial<BlockTrade>) {\n        this.exchange = exchange;\n        this.quote = quote;\n        this.base = base;\n        this.tradeId = tradeId;\n        this.unix = unix;\n        this.price = price;\n        this.amount = amount;\n    }\n\n    public get marketId() {\n        return `${this.base}/${this.quote}`;\n    }\n\n    /**\n     * @deprecated use Market object (second argument to each event) to determine exchange and trade pair\n     */\n    public get fullId() {\n        return `${this.exchange}:${this.base}/${this.quote}`;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}