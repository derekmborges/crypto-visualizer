{"ast":null,"code":"var _jsxFileName = \"/Users/Derek/workspace/crypto-visualizer-wip/src/components/TransactionBubble/TransactionBubble.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './TransactionBubble.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sizes = new Map([0.0001, {\n  size: 100\n}]);\n\nfunction TransactionBubble(_ref) {\n  _s();\n\n  var _document$documentEle, _document$body, _document$documentEle2, _document$body2;\n\n  let {\n    size = 0\n  } = _ref;\n  // const bubbleRef = useRef()\n  const [canvasWidth, setCanvasWidth] = useState(((_document$documentEle = document.documentElement) === null || _document$documentEle === void 0 ? void 0 : _document$documentEle.clientWidth) || ((_document$body = document.body) === null || _document$body === void 0 ? void 0 : _document$body.clientWidth) || 0);\n  const [canvasHeight, setCanvasHeight] = useState(((_document$documentEle2 = document.documentElement) === null || _document$documentEle2 === void 0 ? void 0 : _document$documentEle2.clientHeight) || ((_document$body2 = document.body) === null || _document$body2 === void 0 ? void 0 : _document$body2.clientHeight) || 0);\n  const [bubbleSize, setBubbleSize] = useState(0);\n  const [position, setPosition] = useState(0);\n  const [random, setRandom] = useState(Math.random()); // Calculate size of bubble\n\n  const min = 0.0001;\n  const max = 0.05;\n  const maxPixels = 1000;\n  const ratio = Number.parseFloat((Math.max(size, min) / (min + (max - min))).toFixed(1));\n  setBubbleSize(100 + ratio * maxPixels); // const getWindowSize = () => {\n  //     setCanvasWidth(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n  //     setCanvasHeight(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n  // }\n  // useEffect(() => {\n  //     window.addEventListener('resize', getWindowSize)\n  //     // return () => window.removeEventListener('resize', getWindowSize)\n  // }, [])\n  // Position bubble within canvas\n  // useEffect(() => {\n  //     console.log('canvas:', canvasWidth, 'x', canvasHeight)\n  //     const availablePixels = canvasWidth - bubbleSize\n  //     console.log('Position:', random * availablePixels)\n  //     setPosition(random * availablePixels)\n  // }, [canvasWidth, canvasHeight, bubbleSize, random])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bubble flex flex-col place-items-center justify-center\",\n    style: {\n      left: `${position}px`,\n      width: `${bubbleSize}px`,\n      height: `${bubbleSize}px`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"transaction-amount mb-2 text-2xl\",\n      children: \"#.###### BTC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"transaction-price mt-2 text-xl\",\n      children: \"$#####.##\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionBubble, \"UstcAoDOt80QN4MW0z2WT8o5oy0=\");\n\n_c = TransactionBubble;\nexport default TransactionBubble;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionBubble\");","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer-wip/src/components/TransactionBubble/TransactionBubble.tsx"],"names":["React","useState","sizes","Map","size","TransactionBubble","canvasWidth","setCanvasWidth","document","documentElement","clientWidth","body","canvasHeight","setCanvasHeight","clientHeight","bubbleSize","setBubbleSize","position","setPosition","random","setRandom","Math","min","max","maxPixels","ratio","Number","parseFloat","toFixed","left","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAO,yBAAP;;AAMA,MAAMC,KAAK,GAAG,IAAIC,GAAJ,CACV,CAAC,MAAD,EAAS;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAT,CADU,CAAd;;AAIA,SAASC,iBAAT,OAAyC;AAAA;;AAAA;;AAAA,MAAd;AAAED,IAAAA,IAAI,GAAG;AAAT,GAAc;AACrC;AACA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,0BAAAO,QAAQ,CAACC,eAAT,gFAA0BC,WAA1B,wBAAyCF,QAAQ,CAACG,IAAlD,mDAAyC,eAAeD,WAAxD,KAAuE,CAAxE,CAA9C;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,2BAAAO,QAAQ,CAACC,eAAT,kFAA0BK,YAA1B,yBAA0CN,QAAQ,CAACG,IAAnD,oDAA0C,gBAAeG,YAAzD,KAAyE,CAA1E,CAAhD;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAACoB,IAAI,CAACF,MAAL,EAAD,CAApC,CANqC,CAQrC;;AACA,QAAMG,GAAG,GAAG,MAAZ;AACA,QAAMC,GAAG,GAAG,IAAZ;AACA,QAAMC,SAAS,GAAG,IAAlB;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAAP,CAAkB,CAACN,IAAI,CAACE,GAAL,CAASnB,IAAT,EAAekB,GAAf,KAAuBA,GAAG,IAAIC,GAAG,GAAGD,GAAV,CAA1B,CAAD,EAA4CM,OAA5C,CAAoD,CAApD,CAAlB,CAAd;AACAZ,EAAAA,aAAa,CAAC,MAAMS,KAAK,GAAGD,SAAf,CAAb,CAbqC,CAerC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,wDAAf;AACI,IAAA,KAAK,EAAE;AACHK,MAAAA,IAAI,EAAG,GAAEZ,QAAS,IADf;AAEHa,MAAAA,KAAK,EAAG,GAAEf,UAAW,IAFlB;AAGHgB,MAAAA,MAAM,EAAG,GAAEhB,UAAW;AAHnB,KADX;AAAA,4BAMI;AAAM,MAAA,SAAS,EAAC,kCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAM,MAAA,SAAS,EAAC,gCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA7CQV,iB;;KAAAA,iB;AA+CT,eAAeA,iBAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Transaction, TransactionSize } from '../../models/transaction'\nimport './TransactionBubble.css';\n\ninterface BubbleStyle {\n    size: number;\n}\n\nconst sizes = new Map<number, BubbleStyle>(\n    [0.0001, { size: 100 }]\n)\n\nfunction TransactionBubble({ size = 0 }) {\n    // const bubbleRef = useRef()\n    const [canvasWidth, setCanvasWidth] = useState(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n    const [canvasHeight, setCanvasHeight] = useState(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n    const [bubbleSize, setBubbleSize] = useState(0)\n    const [position, setPosition] = useState(0)\n    const [random, setRandom] = useState(Math.random())\n\n    // Calculate size of bubble\n    const min = 0.0001\n    const max = 0.05\n    const maxPixels = 1000\n    const ratio = Number.parseFloat((Math.max(size, min) / (min + (max - min))).toFixed(1))\n    setBubbleSize(100 + ratio * maxPixels)\n\n    // const getWindowSize = () => {\n    //     setCanvasWidth(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n    //     setCanvasHeight(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n    // }\n\n    // useEffect(() => {\n    //     window.addEventListener('resize', getWindowSize)\n    //     // return () => window.removeEventListener('resize', getWindowSize)\n    // }, [])\n\n    // Position bubble within canvas\n    // useEffect(() => {\n    //     console.log('canvas:', canvasWidth, 'x', canvasHeight)\n\n    //     const availablePixels = canvasWidth - bubbleSize\n    //     console.log('Position:', random * availablePixels)\n    //     setPosition(random * availablePixels)\n    // }, [canvasWidth, canvasHeight, bubbleSize, random])\n\n    return (\n        <div className=\"bubble flex flex-col place-items-center justify-center\"\n            style={{\n                left: `${position}px`,\n                width: `${bubbleSize}px`,\n                height: `${bubbleSize}px`,\n            }}>\n            <span className='transaction-amount mb-2 text-2xl'>#.###### BTC</span>\n            <span className='transaction-price mt-2 text-xl'>$#####.##</span>\n        </div>\n    );\n}\n\nexport default TransactionBubble;"]},"metadata":{},"sourceType":"module"}