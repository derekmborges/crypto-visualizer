{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinanceFuturesCoinmClient = void 0;\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst BinanceBase_1 = require(\"./BinanceBase\");\n\nclass BinanceFuturesCoinmClient extends BinanceBase_1.BinanceBase {\n  constructor() {\n    let {\n      useAggTrades = true,\n      requestSnapshot = true,\n      socketBatchSize = 200,\n      socketThrottleMs = 1000,\n      restThrottleMs = 1000,\n      l2snapshotSpeed = \"100ms\",\n      l2updateSpeed = \"100ms\",\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      name: \"Binance Futures COIN-M\",\n      wssPath: \"wss://dstream.binance.com/stream\",\n      restL2SnapshotPath: \"https://dapi.binance.com/dapi/v1/depth\",\n      useAggTrades,\n      requestSnapshot,\n      socketBatchSize,\n      socketThrottleMs,\n      restThrottleMs,\n      l2snapshotSpeed,\n      l2updateSpeed,\n      watcherMs\n    });\n  }\n  /**\n  * Custom construction for a partial depth update. This deviates from\n  * the spot market by including the `pu` property where updates may\n  * not be sequential. The update message looks like:\n  {\n    \"e\": \"depthUpdate\",           // Event type\n    \"E\": 1591270260907,           // Event time\n    \"T\": 1591270260891,           // Transction time\n    \"s\": \"BTCUSD_200626\",         // Symbol\n    \"ps\": \"BTCUSD\",               // Pair\n    \"U\": 17285681,                // First update ID in event\n    \"u\": 17285702,                // Final update ID in event\n    \"pu\": 17285675,               // Final update Id in last stream(ie `u` in last stream)\n    \"b\": [                        // Bids to be updated\n      [\n        \"9517.6\",                 // Price level to be updated\n        \"10\"                      // Quantity\n      ]\n    ],\n    \"a\": [                        // Asks to be updated\n      [\n        \"9518.5\",                 // Price level to be updated\n        \"45\"                      // Quantity\n      ]\n    ]\n  }\n  */\n\n\n  _constructLevel2Update(msg, market) {\n    const eventMs = msg.data.E;\n    const timestampMs = msg.data.T;\n    const sequenceId = msg.data.U;\n    const lastSequenceId = msg.data.u;\n    const previousLastSequenceId = msg.data.pu;\n    const asks = msg.data.a.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    const bids = msg.data.b.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      lastSequenceId,\n      previousLastSequenceId,\n      timestampMs,\n      eventMs,\n      asks,\n      bids\n    });\n  }\n  /**\n  * Partial book snapshot that. This deviates from the spot market by\n  * including a previous last update id, `pu`.\n    {\n      \"e\":\"depthUpdate\",        // Event type\n      \"E\":1591269996801,        // Event time\n      \"T\":1591269996646,        // Transaction time\n      \"s\":\"BTCUSD_200626\",      // Symbol\n      \"ps\":\"BTCUSD\",            // Pair\n      \"U\":17276694,\n      \"u\":17276701,\n      \"pu\":17276678,\n      \"b\":[                     // Bids to be updated\n        [\n          \"9523.0\",             // Price Level\n          \"5\"                   // Quantity\n        ],\n        [\n          \"9522.8\",\n          \"8\"\n        ]\n      ],\n      \"a\":[                     // Asks to be updated\n        [\n          \"9524.6\",             // Price level to be\n          \"2\"                   // Quantity\n        ],\n        [\n          \"9524.7\",\n          \"3\"\n        ]\n      ]\n    }\n  */\n\n\n  _constructLevel2Snapshot(msg, market) {\n    const timestampMs = msg.data.E;\n    const sequenceId = msg.data.U;\n    const lastSequenceId = msg.data.u;\n    const previousLastSequenceId = msg.data.pu;\n    const asks = msg.data.a.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    const bids = msg.data.b.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId,\n      lastSequenceId,\n      previousLastSequenceId,\n      timestampMs,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.BinanceFuturesCoinmClient = BinanceFuturesCoinmClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/BinanceFuturesCoinmClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { Market } from \"../Market\";\nimport { BinanceBase } from \"./BinanceBase\";\nimport { BinanceClientOptions } from \"./BinanceBase\";\n\nexport class BinanceFuturesCoinmClient extends BinanceBase {\n    constructor({\n        useAggTrades = true,\n        requestSnapshot = true,\n        socketBatchSize = 200,\n        socketThrottleMs = 1000,\n        restThrottleMs = 1000,\n        l2snapshotSpeed = \"100ms\",\n        l2updateSpeed = \"100ms\",\n        watcherMs,\n    }: BinanceClientOptions = {}) {\n        super({\n            name: \"Binance Futures COIN-M\",\n            wssPath: \"wss://dstream.binance.com/stream\",\n            restL2SnapshotPath: \"https://dapi.binance.com/dapi/v1/depth\",\n            useAggTrades,\n            requestSnapshot,\n            socketBatchSize,\n            socketThrottleMs,\n            restThrottleMs,\n            l2snapshotSpeed,\n            l2updateSpeed,\n            watcherMs,\n        });\n    }\n\n    /**\n   * Custom construction for a partial depth update. This deviates from\n   * the spot market by including the `pu` property where updates may\n   * not be sequential. The update message looks like:\n    {\n      \"e\": \"depthUpdate\",           // Event type\n      \"E\": 1591270260907,           // Event time\n      \"T\": 1591270260891,           // Transction time\n      \"s\": \"BTCUSD_200626\",         // Symbol\n      \"ps\": \"BTCUSD\",               // Pair\n      \"U\": 17285681,                // First update ID in event\n      \"u\": 17285702,                // Final update ID in event\n      \"pu\": 17285675,               // Final update Id in last stream(ie `u` in last stream)\n      \"b\": [                        // Bids to be updated\n        [\n          \"9517.6\",                 // Price level to be updated\n          \"10\"                      // Quantity\n        ]\n      ],\n      \"a\": [                        // Asks to be updated\n        [\n          \"9518.5\",                 // Price level to be updated\n          \"45\"                      // Quantity\n        ]\n      ]\n    }\n   */\n    protected _constructLevel2Update(msg, market: Market) {\n        const eventMs = msg.data.E;\n        const timestampMs = msg.data.T;\n        const sequenceId = msg.data.U;\n        const lastSequenceId = msg.data.u;\n        const previousLastSequenceId = msg.data.pu;\n        const asks = msg.data.a.map(p => new Level2Point(p[0], p[1]));\n        const bids = msg.data.b.map(p => new Level2Point(p[0], p[1]));\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            lastSequenceId,\n            previousLastSequenceId,\n            timestampMs,\n            eventMs,\n            asks,\n            bids,\n        });\n    }\n\n    /**\n   * Partial book snapshot that. This deviates from the spot market by\n   * including a previous last update id, `pu`.\n      {\n        \"e\":\"depthUpdate\",        // Event type\n        \"E\":1591269996801,        // Event time\n        \"T\":1591269996646,        // Transaction time\n        \"s\":\"BTCUSD_200626\",      // Symbol\n        \"ps\":\"BTCUSD\",            // Pair\n        \"U\":17276694,\n        \"u\":17276701,\n        \"pu\":17276678,\n        \"b\":[                     // Bids to be updated\n          [\n            \"9523.0\",             // Price Level\n            \"5\"                   // Quantity\n          ],\n          [\n            \"9522.8\",\n            \"8\"\n          ]\n        ],\n        \"a\":[                     // Asks to be updated\n          [\n            \"9524.6\",             // Price level to be\n            \"2\"                   // Quantity\n          ],\n          [\n            \"9524.7\",\n            \"3\"\n          ]\n        ]\n      }\n   */\n    protected _constructLevel2Snapshot(msg, market: Market) {\n        const timestampMs = msg.data.E;\n        const sequenceId = msg.data.U;\n        const lastSequenceId = msg.data.u;\n        const previousLastSequenceId = msg.data.pu;\n        const asks = msg.data.a.map(p => new Level2Point(p[0], p[1]));\n        const bids = msg.data.b.map(p => new Level2Point(p[0], p[1]));\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId,\n            lastSequenceId,\n            previousLastSequenceId,\n            timestampMs,\n            asks,\n            bids,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}