{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FtxBaseClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nconst moment = require(\"moment\");\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nclass FtxBaseClient extends BasicClient_1.BasicClient {\n  constructor(_ref) {\n    let {\n      name,\n      wssPath,\n      watcherMs\n    } = _ref;\n    super(wssPath, name, undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasLevel2Updates = true;\n  }\n\n  _sendSubTicker(market) {\n    this._wss.send(JSON.stringify({\n      op: \"subscribe\",\n      channel: \"ticker\",\n      market\n    }));\n  }\n\n  _sendUnsubTicker(market) {\n    this._wss.send(JSON.stringify({\n      op: \"unsubscribe\",\n      channel: \"ticker\",\n      market\n    }));\n  }\n\n  _sendSubTrades(market) {\n    this._wss.send(JSON.stringify({\n      op: \"subscribe\",\n      channel: \"trades\",\n      market\n    }));\n  }\n\n  _sendUnsubTrades(market) {\n    this._wss.send(JSON.stringify({\n      op: \"unsubscribe\",\n      channel: \"trades\",\n      market\n    }));\n  }\n\n  _sendSubLevel2Updates(market) {\n    this._wss.send(JSON.stringify({\n      op: \"subscribe\",\n      channel: \"orderbook\",\n      market\n    }));\n  }\n\n  _sendUnsubLevel2Updates(market) {\n    this._wss.send(JSON.stringify({\n      op: \"subscribe\",\n      channel: \"orderbook\",\n      market\n    }));\n  }\n\n  _onMessage(raw) {\n    const {\n      type,\n      channel,\n      market: symbol,\n      data\n    } = JSON.parse(raw);\n\n    if (!data || !type || !channel || !symbol) {\n      return;\n    }\n\n    switch (channel) {\n      case \"ticker\":\n        this._tickerMessageHandler(data, symbol);\n\n        break;\n\n      case \"trades\":\n        this._tradesMessageHandler(data, symbol);\n\n        break;\n\n      case \"orderbook\":\n        this._orderbookMessageHandler(data, symbol, type);\n\n        break;\n    }\n  }\n\n  _tickerMessageHandler(data, symbol) {\n    const market = this._tickerSubs.get(symbol);\n\n    if (!market || !market.base || !market.quote) {\n      return;\n    }\n\n    const timestamp = this._timeToTimestampMs(data.time);\n\n    const {\n      last,\n      bid,\n      ask,\n      bidSize: bidVolume,\n      askSize: askVolume\n    } = data;\n    const ticker = new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp,\n      last: last !== undefined && last !== null ? last.toFixed(8) : undefined,\n      bid: bid !== undefined && bid !== null ? bid.toFixed(8) : undefined,\n      ask: ask !== undefined && ask !== null ? ask.toFixed(8) : undefined,\n      bidVolume: bidVolume !== undefined && bidVolume !== null ? bidVolume.toFixed(8) : undefined,\n      askVolume: askVolume !== undefined && askVolume !== null ? askVolume.toFixed(8) : undefined\n    });\n    this.emit(\"ticker\", ticker, market);\n  }\n\n  _tradesMessageHandler(data, symbol) {\n    const market = this._tradeSubs.get(symbol);\n\n    if (!market || !market.base || !market.quote) {\n      return;\n    }\n\n    for (const entry of data) {\n      const {\n        id,\n        price,\n        size,\n        side,\n        time,\n        liquidation\n      } = entry;\n      const unix = moment.utc(time).valueOf();\n      const trade = new Trade_1.Trade({\n        exchange: this.name,\n        base: market.base,\n        quote: market.quote,\n        tradeId: id.toString(),\n        side,\n        unix,\n        price: price.toFixed(8),\n        amount: size.toFixed(8),\n        liquidation\n      });\n      this.emit(\"trade\", trade, market);\n    }\n  }\n\n  _orderbookMessageHandler(data, symbol, type) {\n    const market = this._level2UpdateSubs.get(symbol);\n\n    if (!market || !market.base || !market.quote || !data.asks.length && !data.bids.length) {\n      return;\n    }\n\n    switch (type) {\n      case \"partial\":\n        this._orderbookSnapshotEvent(data, market);\n\n        break;\n\n      case \"update\":\n        this._orderbookUpdateEvent(data, market);\n\n        break;\n    }\n  }\n\n  _orderbookUpdateEvent(data, market) {\n    const content = this._orderbookEventContent(data, market);\n\n    const eventData = new Level2Update_1.Level2Update(content);\n    this.emit(\"l2update\", eventData, market);\n  }\n\n  _orderbookSnapshotEvent(data, market) {\n    const content = this._orderbookEventContent(data, market);\n\n    const eventData = new Level2Snapshots_1.Level2Snapshot(content);\n    this.emit(\"l2snapshot\", eventData, market);\n  }\n\n  _orderbookEventContent(data, market) {\n    const {\n      time,\n      asks,\n      bids,\n      checksum\n    } = data;\n    const level2PointAsks = asks.map(p => new Level2Point_1.Level2Point(p[0].toFixed(8), p[1].toFixed(8)));\n    const level2PointBids = bids.map(p => new Level2Point_1.Level2Point(p[0].toFixed(8), p[1].toFixed(8)));\n\n    const timestampMs = this._timeToTimestampMs(time);\n\n    return {\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestampMs,\n      asks: level2PointAsks,\n      bids: level2PointBids,\n      checksum\n    };\n  }\n\n  _timeToTimestampMs(time) {\n    return new decimal_js_1.default(time).mul(1000).toDecimalPlaces(0).toNumber();\n  }\n\n}\n\nexports.FtxBaseClient = FtxBaseClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/FtxBase.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport Decimal from \"decimal.js\";\nimport moment = require(\"moment\");\nimport { BasicClient } from \"../BasicClient\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\nexport class FtxBaseClient extends BasicClient {\n    constructor({ name, wssPath, watcherMs }) {\n        super(wssPath, name, undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasLevel2Updates = true;\n    }\n\n    protected _sendSubTicker(market) {\n        this._wss.send(\n            JSON.stringify({\n                op: \"subscribe\",\n                channel: \"ticker\",\n                market,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(market) {\n        this._wss.send(\n            JSON.stringify({\n                op: \"unsubscribe\",\n                channel: \"ticker\",\n                market,\n            }),\n        );\n    }\n\n    protected _sendSubTrades(market) {\n        this._wss.send(\n            JSON.stringify({\n                op: \"subscribe\",\n                channel: \"trades\",\n                market,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(market) {\n        this._wss.send(\n            JSON.stringify({\n                op: \"unsubscribe\",\n                channel: \"trades\",\n                market,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(market) {\n        this._wss.send(\n            JSON.stringify({\n                op: \"subscribe\",\n                channel: \"orderbook\",\n                market,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(market) {\n        this._wss.send(\n            JSON.stringify({\n                op: \"subscribe\",\n                channel: \"orderbook\",\n                market,\n            }),\n        );\n    }\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(raw) {\n        const { type, channel, market: symbol, data } = JSON.parse(raw);\n        if (!data || !type || !channel || !symbol) {\n            return;\n        }\n\n        switch (channel) {\n            case \"ticker\":\n                this._tickerMessageHandler(data, symbol);\n                break;\n            case \"trades\":\n                this._tradesMessageHandler(data, symbol);\n                break;\n            case \"orderbook\":\n                this._orderbookMessageHandler(data, symbol, type);\n                break;\n        }\n    }\n\n    protected _tickerMessageHandler(data, symbol) {\n        const market = this._tickerSubs.get(symbol);\n        if (!market || !market.base || !market.quote) {\n            return;\n        }\n\n        const timestamp = this._timeToTimestampMs(data.time);\n        const { last, bid, ask, bidSize: bidVolume, askSize: askVolume } = data;\n        const ticker = new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp,\n            last: last !== undefined && last !== null ? last.toFixed(8) : undefined,\n            bid: bid !== undefined && bid !== null ? bid.toFixed(8) : undefined,\n            ask: ask !== undefined && ask !== null ? ask.toFixed(8) : undefined,\n            bidVolume:\n                bidVolume !== undefined && bidVolume !== null ? bidVolume.toFixed(8) : undefined,\n            askVolume:\n                askVolume !== undefined && askVolume !== null ? askVolume.toFixed(8) : undefined,\n        });\n\n        this.emit(\"ticker\", ticker, market);\n    }\n\n    protected _tradesMessageHandler(data, symbol) {\n        const market = this._tradeSubs.get(symbol);\n        if (!market || !market.base || !market.quote) {\n            return;\n        }\n\n        for (const entry of data) {\n            const { id, price, size, side, time, liquidation } = entry;\n            const unix = moment.utc(time).valueOf();\n\n            const trade = new Trade({\n                exchange: this.name,\n                base: market.base,\n                quote: market.quote,\n                tradeId: id.toString(),\n                side,\n                unix,\n                price: price.toFixed(8),\n                amount: size.toFixed(8),\n                liquidation,\n            });\n\n            this.emit(\"trade\", trade, market);\n        }\n    }\n\n    protected _orderbookMessageHandler(data, symbol, type) {\n        const market = this._level2UpdateSubs.get(symbol);\n        if (!market || !market.base || !market.quote || (!data.asks.length && !data.bids.length)) {\n            return;\n        }\n\n        switch (type) {\n            case \"partial\":\n                this._orderbookSnapshotEvent(data, market);\n                break;\n            case \"update\":\n                this._orderbookUpdateEvent(data, market);\n                break;\n        }\n    }\n\n    protected _orderbookUpdateEvent(data, market) {\n        const content = this._orderbookEventContent(data, market);\n        const eventData = new Level2Update(content);\n        this.emit(\"l2update\", eventData, market);\n    }\n\n    protected _orderbookSnapshotEvent(data, market) {\n        const content = this._orderbookEventContent(data, market);\n        const eventData = new Level2Snapshot(content);\n        this.emit(\"l2snapshot\", eventData, market);\n    }\n\n    protected _orderbookEventContent(data, market) {\n        const { time, asks, bids, checksum } = data;\n        const level2PointAsks = asks.map(p => new Level2Point(p[0].toFixed(8), p[1].toFixed(8)));\n        const level2PointBids = bids.map(p => new Level2Point(p[0].toFixed(8), p[1].toFixed(8)));\n        const timestampMs = this._timeToTimestampMs(time);\n\n        return {\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestampMs,\n            asks: level2PointAsks,\n            bids: level2PointBids,\n            checksum,\n        };\n    }\n\n    protected _timeToTimestampMs(time) {\n        return new Decimal(time).mul(1000).toDecimalPlaces(0).toNumber();\n    }\n}\n"]},"metadata":{},"sourceType":"script"}