{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HuobiBase = void 0;\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Candle_1 = require(\"../Candle\");\n\nconst CandlePeriod_1 = require(\"../CandlePeriod\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nconst zlib = __importStar(require(\"../ZlibUtils\"));\n\nclass HuobiBase extends BasicClient_1.BasicClient {\n  constructor(_ref) {\n    let {\n      name,\n      wssPath,\n      watcherMs\n    } = _ref;\n    super(wssPath, name, undefined, watcherMs);\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasCandles = true;\n    this.hasLevel2Snapshots = true;\n    this.hasLevel2Updates = false;\n    this.candlePeriod = CandlePeriod_1.CandlePeriod._1m;\n  }\n\n  _sendPong(ts) {\n    if (this._wss) {\n      this._wss.send(JSON.stringify({\n        pong: ts\n      }));\n    }\n  }\n\n  _sendSubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      sub: `market.${remote_id}.detail`,\n      id: remote_id\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    this._wss.send(JSON.stringify({\n      unsub: `market.${remote_id}.detail`,\n      id: remote_id\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      sub: `market.${remote_id}.trade.detail`,\n      id: remote_id\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      unsub: `market.${remote_id}.trade.detail`,\n      id: remote_id\n    }));\n  }\n\n  _sendSubCandles(remote_id) {\n    this._wss.send(JSON.stringify({\n      sub: `market.${remote_id}.kline.${candlePeriod(this.candlePeriod)}`,\n      id: remote_id\n    }));\n  }\n\n  _sendUnsubCandles(remote_id) {\n    this._wss.send(JSON.stringify({\n      unsub: `market.${remote_id}.kline.${candlePeriod(this.candlePeriod)}`,\n      id: remote_id\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      sub: `market.${remote_id}.depth.size_150.high_freq`,\n      data_type: \"incremental\",\n      id: \"depth_update_\" + remote_id\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      unsub: `market.${remote_id}.depth.size_150.high_freq`,\n      data_type: \"incremental\",\n      id: \"depth_update_\" + remote_id\n    }));\n  }\n\n  _sendSubLevel2Snapshots(remote_id) {\n    this._wss.send(JSON.stringify({\n      sub: `market.${remote_id}.depth.step0`,\n      id: \"depth_\" + remote_id\n    }));\n  }\n\n  _sendUnsubLevel2Snapshots(remote_id) {\n    this._wss.send(JSON.stringify({\n      unsub: `market.${remote_id}.depth.step0`\n    }));\n  }\n\n  _onMessage(raw) {\n    zlib.unzip(raw, (err, resp) => {\n      if (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n\n      let msgs = JSON.parse(resp.toString()); // handle pongs\n\n      if (msgs.ping) {\n        this._sendPong(msgs.ping);\n\n        return;\n      }\n\n      if (!msgs.ch) return; // trades\n\n      if (msgs.ch.endsWith(\"trade.detail\")) {\n        msgs = JSON.parse(resp.toString().replace(/:([0-9]{1,}\\.{0,1}[0-9]{0,}),/g, ':\"$1\",'));\n        const remoteId = msgs.ch.split(\".\")[1]; //market.ethbtc.trade.detail\n\n        const market = this._tradeSubs.get(remoteId);\n\n        if (!market) return;\n\n        for (const datum of msgs.tick.data) {\n          const trade = this._constructTradesFromMessage(datum, market);\n\n          this.emit(\"trade\", trade, market);\n        }\n\n        return;\n      } // candles\n\n\n      if (msgs.ch.includes(\"kline\")) {\n        const remoteId = msgs.ch.split(\".\")[1]; //market.ethbtc.kline.1min\n\n        const market = this._candleSubs.get(remoteId);\n\n        if (!market) return;\n\n        const candle = this._constructCandle(msgs);\n\n        this.emit(\"candle\", candle, market);\n      } // tickers\n\n\n      if (msgs.ch.endsWith(\".detail\")) {\n        const remoteId = msgs.ch.split(\".\")[1];\n\n        const market = this._tickerSubs.get(remoteId);\n\n        if (!market) return;\n\n        const ticker = this._constructTicker(msgs.tick, market);\n\n        this.emit(\"ticker\", ticker, market);\n        return;\n      } // l2update\n\n\n      if (msgs.ch.endsWith(\"depth.size_150.high_freq\")) {\n        const remoteId = msgs.ch.split(\".\")[1];\n\n        const market = this._level2UpdateSubs.get(remoteId);\n\n        if (!market) return;\n\n        if (msgs.tick.event === \"snapshot\") {\n          const snapshot = this._constructL2UpdateSnapshot(msgs, market);\n\n          this.emit(\"l2snapshot\", snapshot, market);\n        } else {\n          const update = this._constructL2Update(msgs, market);\n\n          this.emit(\"l2update\", update, market);\n        }\n\n        return;\n      } // l2snapshot\n\n\n      if (msgs.ch.endsWith(\"depth.step0\")) {\n        const remoteId = msgs.ch.split(\".\")[1];\n\n        const market = this._level2SnapshotSubs.get(remoteId);\n\n        if (!market) return;\n\n        const snapshot = this._constructLevel2Snapshot(msgs, market);\n\n        this.emit(\"l2snapshot\", snapshot, market);\n        return;\n      }\n    });\n  }\n\n  _constructTicker(data, market) {\n    const {\n      open,\n      close,\n      high,\n      low,\n      vol,\n      amount\n    } = data;\n    const dayChange = close - open;\n    const dayChangePercent = (close - open) / open * 100;\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: Date.now(),\n      last: close.toFixed(10),\n      open: open.toFixed(10),\n      high: high.toFixed(10),\n      low: low.toFixed(10),\n      volume: amount.toFixed(8),\n      quoteVolume: vol.toFixed(8),\n      change: dayChange.toFixed(8),\n      changePercent: dayChangePercent.toFixed(8)\n    });\n  }\n\n  _constructTradesFromMessage(datum, market) {\n    const {\n      amount,\n      direction,\n      ts,\n      price,\n      id\n    } = datum;\n    const unix = Math.trunc(parseInt(ts));\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: id,\n      side: direction,\n      unix,\n      price,\n      amount: typeof amount === \"number\" ? amount.toFixed(8) : amount\n    });\n  }\n\n  _constructCandle(msg) {\n    const tick = msg.tick;\n    const ms = tick.id * 1000;\n    return new Candle_1.Candle(ms, tick.open.toFixed(8), tick.high.toFixed(8), tick.low.toFixed(8), tick.close.toFixed(8), tick.amount.toFixed(8));\n  }\n  /**\n  {\n    \"ch\": \"market.BTC_CQ.depth.size_150.high_freq\",\n    \"tick\": {\n      \"asks\": [\n        [11756.82, 1966],\n        [11756.91, 3],\n        [11756.93, 936]\n      ],\n      \"bids\": [\n        [11756.81, 2639],\n        [11755.13, 73],\n        [11754.93, 1]\n      ],\n      \"ch\": \"market.BTC_CQ.depth.size_150.high_freq\",\n      \"event\": \"snapshot\",\n      \"id\": 91435179848,\n      \"mrid\": 91435179848,\n      \"ts\": 1597347675927,\n      \"version\": 279029079\n    },\n    \"ts\": 1597347675927\n  }\n  */\n\n\n  _constructL2UpdateSnapshot(msg, market) {\n    const {\n      tick\n    } = msg;\n    const asks = tick.asks ? tick.asks.map(p => new Level2Point_1.Level2Point(p[0].toFixed(8), p[1].toFixed(2))) : [];\n    const bids = tick.bids ? tick.bids.map(p => new Level2Point_1.Level2Point(p[0].toFixed(8), p[1].toFixed(2))) : [];\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: tick.version,\n      timestampMs: tick.ts,\n      asks,\n      bids,\n      id: tick.id,\n      mrid: tick.mrid\n    });\n  }\n  /**\n  {\n    \"ch\": \"market.BTC_CQ.depth.size_150.high_freq\",\n    \"tick\": {\n      \"asks\": [],\n      \"bids\": [\n        [11750.4, 0],\n        [11742.49, 44]\n      ],\n      \"ch\": \"market.BTC_CQ.depth.size_150.high_freq\",\n      \"event\": \"update\",\n      \"id\": 91435179926,\n      \"mrid\": 91435179926,\n      \"ts\": 1597347675971,\n      \"version\": 279029080\n    },\n    \"ts\": 1597347675971\n  }\n  */\n\n\n  _constructL2Update(msg, market) {\n    const {\n      tick\n    } = msg;\n    const asks = tick.asks ? tick.asks.map(p => new Level2Point_1.Level2Point(p[0].toFixed(8), p[1].toFixed(2))) : [];\n    const bids = tick.bids ? tick.bids.map(p => new Level2Point_1.Level2Point(p[0].toFixed(8), p[1].toFixed(2))) : [];\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: tick.version,\n      timestampMs: tick.ts,\n      asks,\n      bids,\n      id: tick.id,\n      mrid: tick.mrid\n    });\n  }\n\n  _constructLevel2Snapshot(msg, market) {\n    const {\n      tick\n    } = msg;\n    const bids = tick.bids.map(p => new Level2Point_1.Level2Point(p[0].toFixed(10), p[1].toFixed(8)));\n    const asks = tick.asks.map(p => new Level2Point_1.Level2Point(p[0].toFixed(10), p[1].toFixed(8)));\n    const {\n      ts,\n      version\n    } = tick;\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: version,\n      timestampMs: ts,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.HuobiBase = HuobiBase;\n\nfunction candlePeriod(period) {\n  switch (period) {\n    case CandlePeriod_1.CandlePeriod._1m:\n      return \"1min\";\n\n    case CandlePeriod_1.CandlePeriod._5m:\n      return \"5min\";\n\n    case CandlePeriod_1.CandlePeriod._15m:\n      return \"15min\";\n\n    case CandlePeriod_1.CandlePeriod._30m:\n      return \"30min\";\n\n    case CandlePeriod_1.CandlePeriod._1h:\n      return \"60min\";\n\n    case CandlePeriod_1.CandlePeriod._4h:\n      return \"4hour\";\n\n    case CandlePeriod_1.CandlePeriod._1d:\n      return \"1day\";\n\n    case CandlePeriod_1.CandlePeriod._1w:\n      return \"1week\";\n\n    case CandlePeriod_1.CandlePeriod._1M:\n      return \"1mon\";\n  }\n}","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/HuobiBase.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport { BasicClient } from \"../BasicClient\";\nimport { Candle } from \"../Candle\";\nimport { CandlePeriod } from \"../CandlePeriod\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\nimport * as zlib from \"../ZlibUtils\";\n\nexport class HuobiBase extends BasicClient {\n    public candlePeriod: CandlePeriod;\n\n    constructor({ name, wssPath, watcherMs }) {\n        super(wssPath, name, undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasCandles = true;\n        this.hasLevel2Snapshots = true;\n        this.hasLevel2Updates = false;\n        this.candlePeriod = CandlePeriod._1m;\n    }\n\n    protected _sendPong(ts: number) {\n        if (this._wss) {\n            this._wss.send(JSON.stringify({ pong: ts }));\n        }\n    }\n\n    protected _sendSubTicker(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                sub: `market.${remote_id}.detail`,\n                id: remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                unsub: `market.${remote_id}.detail`,\n                id: remote_id,\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                sub: `market.${remote_id}.trade.detail`,\n                id: remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                unsub: `market.${remote_id}.trade.detail`,\n                id: remote_id,\n            }),\n        );\n    }\n\n    protected _sendSubCandles(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                sub: `market.${remote_id}.kline.${candlePeriod(this.candlePeriod)}`,\n                id: remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubCandles(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                unsub: `market.${remote_id}.kline.${candlePeriod(this.candlePeriod)}`,\n                id: remote_id,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                sub: `market.${remote_id}.depth.size_150.high_freq`,\n                data_type: \"incremental\",\n                id: \"depth_update_\" + remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                unsub: `market.${remote_id}.depth.size_150.high_freq`,\n                data_type: \"incremental\",\n                id: \"depth_update_\" + remote_id,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Snapshots(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                sub: `market.${remote_id}.depth.step0`,\n                id: \"depth_\" + remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Snapshots(remote_id: string) {\n        this._wss.send(\n            JSON.stringify({\n                unsub: `market.${remote_id}.depth.step0`,\n            }),\n        );\n    }\n\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(raw: Buffer) {\n        zlib.unzip(raw, (err, resp) => {\n            if (err) {\n                this.emit(\"error\", err);\n                return;\n            }\n\n            let msgs = JSON.parse(resp.toString());\n\n            // handle pongs\n            if (msgs.ping) {\n                this._sendPong(msgs.ping);\n                return;\n            }\n\n            if (!msgs.ch) return;\n\n            // trades\n            if (msgs.ch.endsWith(\"trade.detail\")) {\n                msgs = JSON.parse(\n                    resp.toString().replace(/:([0-9]{1,}\\.{0,1}[0-9]{0,}),/g, ':\"$1\",'),\n                );\n\n                const remoteId = msgs.ch.split(\".\")[1]; //market.ethbtc.trade.detail\n                const market = this._tradeSubs.get(remoteId);\n                if (!market) return;\n\n                for (const datum of msgs.tick.data) {\n                    const trade = this._constructTradesFromMessage(datum, market);\n                    this.emit(\"trade\", trade, market);\n                }\n                return;\n            }\n\n            // candles\n            if (msgs.ch.includes(\"kline\")) {\n                const remoteId = msgs.ch.split(\".\")[1]; //market.ethbtc.kline.1min\n                const market = this._candleSubs.get(remoteId);\n                if (!market) return;\n\n                const candle = this._constructCandle(msgs);\n                this.emit(\"candle\", candle, market);\n            }\n\n            // tickers\n            if (msgs.ch.endsWith(\".detail\")) {\n                const remoteId = msgs.ch.split(\".\")[1];\n                const market = this._tickerSubs.get(remoteId);\n                if (!market) return;\n\n                const ticker = this._constructTicker(msgs.tick, market);\n                this.emit(\"ticker\", ticker, market);\n                return;\n            }\n\n            // l2update\n            if (msgs.ch.endsWith(\"depth.size_150.high_freq\")) {\n                const remoteId = msgs.ch.split(\".\")[1];\n                const market = this._level2UpdateSubs.get(remoteId);\n                if (!market) return;\n\n                if (msgs.tick.event === \"snapshot\") {\n                    const snapshot = this._constructL2UpdateSnapshot(msgs, market);\n                    this.emit(\"l2snapshot\", snapshot, market);\n                } else {\n                    const update = this._constructL2Update(msgs, market);\n                    this.emit(\"l2update\", update, market);\n                }\n                return;\n            }\n\n            // l2snapshot\n            if (msgs.ch.endsWith(\"depth.step0\")) {\n                const remoteId = msgs.ch.split(\".\")[1];\n                const market = this._level2SnapshotSubs.get(remoteId);\n                if (!market) return;\n\n                const snapshot = this._constructLevel2Snapshot(msgs, market);\n                this.emit(\"l2snapshot\", snapshot, market);\n                return;\n            }\n        });\n    }\n\n    protected _constructTicker(data, market) {\n        const { open, close, high, low, vol, amount } = data;\n        const dayChange = close - open;\n        const dayChangePercent = ((close - open) / open) * 100;\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: Date.now(),\n            last: close.toFixed(10),\n            open: open.toFixed(10),\n            high: high.toFixed(10),\n            low: low.toFixed(10),\n            volume: amount.toFixed(8),\n            quoteVolume: vol.toFixed(8),\n            change: dayChange.toFixed(8),\n            changePercent: dayChangePercent.toFixed(8),\n        });\n    }\n\n    protected _constructTradesFromMessage(datum, market) {\n        const { amount, direction, ts, price, id } = datum;\n        const unix = Math.trunc(parseInt(ts));\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: id,\n            side: direction,\n            unix,\n            price,\n            amount: typeof amount === \"number\" ? amount.toFixed(8) : amount,\n        });\n    }\n\n    protected _constructCandle(msg) {\n        const tick = msg.tick;\n        const ms = tick.id * 1000;\n        return new Candle(\n            ms,\n            tick.open.toFixed(8),\n            tick.high.toFixed(8),\n            tick.low.toFixed(8),\n            tick.close.toFixed(8),\n            tick.amount.toFixed(8),\n        );\n    }\n\n    /**\n   {\n      \"ch\": \"market.BTC_CQ.depth.size_150.high_freq\",\n      \"tick\": {\n        \"asks\": [\n          [11756.82, 1966],\n          [11756.91, 3],\n          [11756.93, 936]\n        ],\n        \"bids\": [\n          [11756.81, 2639],\n          [11755.13, 73],\n          [11754.93, 1]\n        ],\n        \"ch\": \"market.BTC_CQ.depth.size_150.high_freq\",\n        \"event\": \"snapshot\",\n        \"id\": 91435179848,\n        \"mrid\": 91435179848,\n        \"ts\": 1597347675927,\n        \"version\": 279029079\n      },\n      \"ts\": 1597347675927\n    }\n   */\n    protected _constructL2UpdateSnapshot(msg, market) {\n        const { tick } = msg;\n\n        const asks = tick.asks\n            ? tick.asks.map(p => new Level2Point(p[0].toFixed(8), p[1].toFixed(2)))\n            : [];\n        const bids = tick.bids\n            ? tick.bids.map(p => new Level2Point(p[0].toFixed(8), p[1].toFixed(2)))\n            : [];\n\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: tick.version,\n            timestampMs: tick.ts,\n            asks,\n            bids,\n            id: tick.id,\n            mrid: tick.mrid,\n        });\n    }\n\n    /**\n   {\n      \"ch\": \"market.BTC_CQ.depth.size_150.high_freq\",\n      \"tick\": {\n        \"asks\": [],\n        \"bids\": [\n          [11750.4, 0],\n          [11742.49, 44]\n        ],\n        \"ch\": \"market.BTC_CQ.depth.size_150.high_freq\",\n        \"event\": \"update\",\n        \"id\": 91435179926,\n        \"mrid\": 91435179926,\n        \"ts\": 1597347675971,\n        \"version\": 279029080\n      },\n      \"ts\": 1597347675971\n    }\n   */\n    protected _constructL2Update(msg, market) {\n        const { tick } = msg;\n\n        const asks = tick.asks\n            ? tick.asks.map(p => new Level2Point(p[0].toFixed(8), p[1].toFixed(2)))\n            : [];\n        const bids = tick.bids\n            ? tick.bids.map(p => new Level2Point(p[0].toFixed(8), p[1].toFixed(2)))\n            : [];\n\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: tick.version,\n            timestampMs: tick.ts,\n            asks,\n            bids,\n            id: tick.id,\n            mrid: tick.mrid,\n        });\n    }\n\n    protected _constructLevel2Snapshot(msg, market) {\n        const { tick } = msg;\n        const bids = tick.bids.map(p => new Level2Point(p[0].toFixed(10), p[1].toFixed(8)));\n        const asks = tick.asks.map(p => new Level2Point(p[0].toFixed(10), p[1].toFixed(8)));\n        const { ts, version } = tick;\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: version,\n            timestampMs: ts,\n            asks,\n            bids,\n        });\n    }\n}\n\nfunction candlePeriod(period) {\n    switch (period) {\n        case CandlePeriod._1m:\n            return \"1min\";\n        case CandlePeriod._5m:\n            return \"5min\";\n        case CandlePeriod._15m:\n            return \"15min\";\n        case CandlePeriod._30m:\n            return \"30min\";\n        case CandlePeriod._1h:\n            return \"60min\";\n        case CandlePeriod._4h:\n            return \"4hour\";\n        case CandlePeriod._1d:\n            return \"1day\";\n        case CandlePeriod._1w:\n            return \"1week\";\n        case CandlePeriod._1M:\n            return \"1mon\";\n    }\n}\n"]},"metadata":{},"sourceType":"script"}