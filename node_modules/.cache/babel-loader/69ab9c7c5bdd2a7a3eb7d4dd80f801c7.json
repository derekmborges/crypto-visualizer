{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GateioClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/* eslint-disable @typescript-eslint/no-implied-eval */\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n/**\n * Gate.io now supports subscribing to multiple markets from a single socket connection.\n * These requests will be debounced so that multiple subscriptions will trigger a\n * single call to subscribe.\n *\n * Additionally, depending on the REST method used, the market_id's will be lower\n * or uppercase. Websockets require market_id in uppercase, however the client\n * can handle either.\n */\n\n\nclass GateioClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://ws.gate.io/v3\",\n      watcherMs = 900 * 1000\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"Gateio\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasLevel2Snapshots = false;\n    this.hasLevel2Updates = true;\n    this.hasLevel3Updates = false;\n    this.debounceWait = 100;\n    this._debounceHandles = new Map();\n  }\n\n  _debounce(type, fn) {\n    clearTimeout(this._debounceHandles.get(type));\n\n    this._debounceHandles.set(type, setTimeout(fn, this.debounceWait));\n  }\n\n  _beforeConnect() {\n    this._wss.on(\"connected\", this._startPing.bind(this));\n\n    this._wss.on(\"disconnected\", this._stopPing.bind(this));\n\n    this._wss.on(\"closed\", this._stopPing.bind(this));\n  }\n\n  _startPing() {\n    clearInterval(this._pingInterval);\n    this._pingInterval = setInterval(this._sendPing.bind(this), 30000);\n  }\n\n  _stopPing() {\n    clearInterval(this._pingInterval);\n  }\n\n  _sendPing() {\n    if (this._wss) {\n      this._wss.send(JSON.stringify({\n        method: \"server.ping\"\n      }));\n    }\n  }\n\n  _sendSubTicker() {\n    this._debounce(\"sub-ticker\", () => {\n      const markets = Array.from(this._tickerSubs.keys()).map(m => m.toUpperCase()); // must be uppercase\n\n      this._wss.send(JSON.stringify({\n        method: \"ticker.subscribe\",\n        params: markets,\n        id: 1\n      }));\n    });\n  }\n\n  _sendUnsubTicker() {\n    this._wss.send(JSON.stringify({\n      method: \"ticker.unsubscribe\"\n    }));\n  }\n\n  _sendSubTrades() {\n    this._debounce(\"sub-trades\", () => {\n      const markets = Array.from(this._tradeSubs.keys()).map(m => m.toUpperCase()); // must be uppercase\n\n      this._wss.send(JSON.stringify({\n        method: \"trades.subscribe\",\n        params: markets,\n        id: 1\n      }));\n    });\n  }\n\n  _sendUnsubTrades() {\n    this._wss.send(JSON.stringify({\n      method: \"trades.unsubscribe\"\n    }));\n  }\n\n  _sendSubLevel2Updates() {\n    this._debounce(\"sub-l2updates\", () => {\n      const markets = Array.from(this._level2UpdateSubs.keys()).map(m => m.toUpperCase()); // must be uppercase\n\n      this._wss.send(JSON.stringify({\n        method: \"depth.subscribe\",\n        params: markets.map(m => [m, 30, \"0\"]),\n        id: 1\n      }));\n    });\n  }\n\n  _sendUnsubLevel2Updates() {\n    this._wss.send(JSON.stringify({\n      method: \"depth.unsubscribe\"\n    }));\n  }\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw);\n    const {\n      method,\n      params\n    } = msg; // if params is not defined, then this is a response to an event that we don't care about (like the initial connection event)\n\n    if (!params) return;\n\n    if (method === \"ticker.update\") {\n      const marketId = params[0];\n\n      const market = this._tickerSubs.get(marketId.toUpperCase()) || this._tickerSubs.get(marketId.toLowerCase());\n\n      if (!market) return;\n\n      const ticker = this._constructTicker(params[1], market); //params[0][marketId] -> params[1]\n\n\n      this.emit(\"ticker\", ticker, market);\n      return;\n    }\n\n    if (method === \"trades.update\") {\n      const marketId = params[0];\n\n      const market = this._tradeSubs.get(marketId.toUpperCase()) || this._tradeSubs.get(marketId.toLowerCase());\n\n      if (!market) return;\n\n      for (const t of params[1].reverse()) {\n        const trade = this._constructTrade(t, market);\n\n        this.emit(\"trade\", trade, market);\n      }\n\n      return;\n    }\n\n    if (method === \"depth.update\") {\n      const marketId = params[2];\n\n      const market = this._level2UpdateSubs.get(marketId.toUpperCase()) || this._level2UpdateSubs.get(marketId.toLowerCase());\n\n      if (!market) return;\n      const isLevel2Snapshot = params[0];\n\n      if (isLevel2Snapshot) {\n        const l2snapshot = this._constructLevel2Snapshot(params[1], market);\n\n        this.emit(\"l2snapshot\", l2snapshot, market);\n      } else {\n        const l2update = this._constructLevel2Update(params[1], market);\n\n        this.emit(\"l2update\", l2update, market);\n      }\n\n      return;\n    }\n  }\n\n  _constructTicker(rawTick, market) {\n    const change = parseFloat(rawTick.last) - parseFloat(rawTick.open);\n    const changePercent = (parseFloat(rawTick.last) - parseFloat(rawTick.open)) / parseFloat(rawTick.open) * 100;\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: Date.now(),\n      last: rawTick.last,\n      open: rawTick.open,\n      high: rawTick.high,\n      low: rawTick.low,\n      volume: rawTick.baseVolume,\n      quoteVolume: rawTick.quoteVolume,\n      change: change.toFixed(8),\n      changePercent: changePercent.toFixed(8)\n    });\n  }\n\n  _constructTrade(rawTrade, market) {\n    const {\n      id,\n      time,\n      type,\n      price,\n      amount\n    } = rawTrade;\n    const unix = moment_1.default.utc(time * 1000).valueOf();\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: id.toFixed(),\n      unix,\n      side: type,\n      price,\n      amount\n    });\n  }\n\n  _constructLevel2Snapshot(rawUpdate, market) {\n    let {\n      bids,\n      asks\n    } = rawUpdate,\n        structuredBids = bids ? bids.map(_ref => {\n      let [price, size] = _ref;\n      return new Level2Point_1.Level2Point(price, size);\n    }) : [],\n        structuredAsks = asks ? asks.map(_ref2 => {\n      let [price, size] = _ref2;\n      return new Level2Point_1.Level2Point(price, size);\n    }) : [];\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      bids: structuredBids,\n      asks: structuredAsks\n    });\n  }\n\n  _constructLevel2Update(rawUpdate, market) {\n    let {\n      bids,\n      asks\n    } = rawUpdate,\n        structuredBids = bids ? bids.map(_ref3 => {\n      let [price, size] = _ref3;\n      return new Level2Point_1.Level2Point(price, size);\n    }) : [],\n        structuredAsks = asks ? asks.map(_ref4 => {\n      let [price, size] = _ref4;\n      return new Level2Point_1.Level2Point(price, size);\n    }) : [];\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      bids: structuredBids,\n      asks: structuredAsks\n    });\n  }\n\n}\n\nexports.GateioClient = GateioClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/GateioClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-implied-eval */\nimport moment from \"moment\";\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\n/**\n * Gate.io now supports subscribing to multiple markets from a single socket connection.\n * These requests will be debounced so that multiple subscriptions will trigger a\n * single call to subscribe.\n *\n * Additionally, depending on the REST method used, the market_id's will be lower\n * or uppercase. Websockets require market_id in uppercase, however the client\n * can handle either.\n */\nexport class GateioClient extends BasicClient {\n    public debounceWait: number;\n    protected _debounceHandles: Map<any, any>;\n    protected _pingInterval: NodeJS.Timeout;\n\n    constructor({ wssPath = \"wss://ws.gate.io/v3\", watcherMs = 900 * 1000 }: ClientOptions = {}) {\n        super(wssPath, \"Gateio\", undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasLevel2Snapshots = false;\n        this.hasLevel2Updates = true;\n        this.hasLevel3Updates = false;\n        this.debounceWait = 100;\n        this._debounceHandles = new Map();\n    }\n\n    protected _debounce(type, fn) {\n        clearTimeout(this._debounceHandles.get(type));\n        this._debounceHandles.set(type, setTimeout(fn, this.debounceWait));\n    }\n\n    protected _beforeConnect() {\n        this._wss.on(\"connected\", this._startPing.bind(this));\n        this._wss.on(\"disconnected\", this._stopPing.bind(this));\n        this._wss.on(\"closed\", this._stopPing.bind(this));\n    }\n\n    protected _startPing() {\n        clearInterval(this._pingInterval);\n        this._pingInterval = setInterval(this._sendPing.bind(this), 30000);\n    }\n\n    protected _stopPing() {\n        clearInterval(this._pingInterval);\n    }\n\n    protected _sendPing() {\n        if (this._wss) {\n            this._wss.send(\n                JSON.stringify({\n                    method: \"server.ping\",\n                }),\n            );\n        }\n    }\n\n    protected _sendSubTicker() {\n        this._debounce(\"sub-ticker\", () => {\n            const markets = Array.from(this._tickerSubs.keys()).map(m => m.toUpperCase()); // must be uppercase\n            this._wss.send(\n                JSON.stringify({\n                    method: \"ticker.subscribe\",\n                    params: markets,\n                    id: 1,\n                }),\n            );\n        });\n    }\n\n    protected _sendUnsubTicker() {\n        this._wss.send(\n            JSON.stringify({\n                method: \"ticker.unsubscribe\",\n            }),\n        );\n    }\n\n    protected _sendSubTrades() {\n        this._debounce(\"sub-trades\", () => {\n            const markets = Array.from(this._tradeSubs.keys()).map(m => m.toUpperCase()); // must be uppercase\n            this._wss.send(\n                JSON.stringify({\n                    method: \"trades.subscribe\",\n                    params: markets,\n                    id: 1,\n                }),\n            );\n        });\n    }\n\n    protected _sendUnsubTrades() {\n        this._wss.send(\n            JSON.stringify({\n                method: \"trades.unsubscribe\",\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates() {\n        this._debounce(\"sub-l2updates\", () => {\n            const markets = Array.from(this._level2UpdateSubs.keys()).map(m => m.toUpperCase()); // must be uppercase\n            this._wss.send(\n                JSON.stringify({\n                    method: \"depth.subscribe\",\n                    params: markets.map(m => [m, 30, \"0\"]),\n                    id: 1,\n                }),\n            );\n        });\n    }\n\n    protected _sendUnsubLevel2Updates() {\n        this._wss.send(\n            JSON.stringify({\n                method: \"depth.unsubscribe\",\n            }),\n        );\n    }\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(raw) {\n        const msg = JSON.parse(raw);\n        const { method, params } = msg;\n\n        // if params is not defined, then this is a response to an event that we don't care about (like the initial connection event)\n        if (!params) return;\n\n        if (method === \"ticker.update\") {\n            const marketId = params[0];\n            const market =\n                this._tickerSubs.get(marketId.toUpperCase()) ||\n                this._tickerSubs.get(marketId.toLowerCase());\n            if (!market) return;\n\n            const ticker = this._constructTicker(params[1], market); //params[0][marketId] -> params[1]\n            this.emit(\"ticker\", ticker, market);\n            return;\n        }\n\n        if (method === \"trades.update\") {\n            const marketId = params[0];\n            const market =\n                this._tradeSubs.get(marketId.toUpperCase()) ||\n                this._tradeSubs.get(marketId.toLowerCase());\n            if (!market) return;\n\n            for (const t of params[1].reverse()) {\n                const trade = this._constructTrade(t, market);\n                this.emit(\"trade\", trade, market);\n            }\n            return;\n        }\n\n        if (method === \"depth.update\") {\n            const marketId = params[2];\n            const market =\n                this._level2UpdateSubs.get(marketId.toUpperCase()) ||\n                this._level2UpdateSubs.get(marketId.toLowerCase());\n            if (!market) return;\n\n            const isLevel2Snapshot = params[0];\n            if (isLevel2Snapshot) {\n                const l2snapshot = this._constructLevel2Snapshot(params[1], market);\n                this.emit(\"l2snapshot\", l2snapshot, market);\n            } else {\n                const l2update = this._constructLevel2Update(params[1], market);\n                this.emit(\"l2update\", l2update, market);\n            }\n            return;\n        }\n    }\n\n    protected _constructTicker(rawTick, market) {\n        const change = parseFloat(rawTick.last) - parseFloat(rawTick.open);\n        const changePercent =\n            ((parseFloat(rawTick.last) - parseFloat(rawTick.open)) / parseFloat(rawTick.open)) *\n            100;\n\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: Date.now(),\n            last: rawTick.last,\n            open: rawTick.open,\n            high: rawTick.high,\n            low: rawTick.low,\n            volume: rawTick.baseVolume,\n            quoteVolume: rawTick.quoteVolume,\n            change: change.toFixed(8),\n            changePercent: changePercent.toFixed(8),\n        });\n    }\n\n    protected _constructTrade(rawTrade, market) {\n        const { id, time, type, price, amount } = rawTrade;\n\n        const unix = moment.utc(time * 1000).valueOf();\n\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: id.toFixed(),\n            unix,\n            side: type,\n            price,\n            amount,\n        });\n    }\n\n    protected _constructLevel2Snapshot(rawUpdate, market) {\n        let { bids, asks } = rawUpdate,\n            structuredBids = bids ? bids.map(([price, size]) => new Level2Point(price, size)) : [],\n            structuredAsks = asks ? asks.map(([price, size]) => new Level2Point(price, size)) : [];\n\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            bids: structuredBids,\n            asks: structuredAsks,\n        });\n    }\n\n    protected _constructLevel2Update(rawUpdate, market) {\n        let { bids, asks } = rawUpdate,\n            structuredBids = bids ? bids.map(([price, size]) => new Level2Point(price, size)) : [],\n            structuredAsks = asks ? asks.map(([price, size]) => new Level2Point(price, size)) : [];\n\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            bids: structuredBids,\n            asks: structuredAsks,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}