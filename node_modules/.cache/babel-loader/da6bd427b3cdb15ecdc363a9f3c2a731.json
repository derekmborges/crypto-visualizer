{"ast":null,"code":"var _jsxFileName = \"/Users/Derek/workspace/crypto-visualizer-wip/src/components/TransactionBubble/TransactionBubble.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './TransactionBubble.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sizeMap = {\n  0.00001: {\n    size: 100\n  },\n  0.0001: {\n    size: 300\n  },\n  0.0005: {\n    size: 400\n  },\n  0.001: {\n    size: 800\n  },\n  0.01: {\n    size: 1500\n  }\n};\n\nfunction TransactionBubble(_ref) {\n  _s();\n\n  let {\n    amount = 0\n  } = _ref;\n  // const bubbleRef = useRef()\n  // const [canvasWidth, setCanvasWidth] = useState(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n  const [canvasWidth, setCanvasWidth] = useState(900); // const [canvasHeight, setCanvasHeight] = useState(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n\n  const [bubbleSize, setBubbleSize] = useState(0);\n  const [position, setPosition] = useState(0);\n  const [random, setRandom] = useState(Math.random()); // Determine size of bubble\n\n  console.log(Object.keys(sizeMap));\n\n  for (let cutoffString of Object.keys(sizeMap)) {\n    const cutoffAmount = Number.parseFloat(cutoffString);\n\n    if (amount <= cutoffAmount) {\n      setBubbleSize(sizeMap[cutoffAmount].size);\n      break;\n    }\n  } // Set position\n  // setPosition(random * canvasWidth)\n  // console.log('Position:', position)\n  // const min = 0.0001\n  // const max = 0.05\n  // const maxPixels = 1000\n  // const ratio = Number.parseFloat((Math.max(size, min) / (min + (max - min))).toFixed(1))\n  // setBubbleSize(100 + ratio * maxPixels)\n  // const getWindowSize = () => {\n  //     setCanvasWidth(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n  //     setCanvasHeight(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n  // }\n  // useEffect(() => {\n  //     window.addEventListener('resize', getWindowSize)\n  //     // return () => window.removeEventListener('resize', getWindowSize)\n  // }, [])\n  // Position bubble within canvas\n  // useEffect(() => {\n  //     console.log('canvas:', canvasWidth, 'x', canvasHeight)\n  //     const availablePixels = canvasWidth - bubbleSize\n  //     console.log('Position:', random * availablePixels)\n  //     setPosition(random * availablePixels)\n  // }, [canvasWidth, canvasHeight, bubbleSize, random])\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bubble flex flex-col place-items-center justify-center left-5 w-84 h-84\" // style={{\n    //     left: `${position}px`,\n    //     width: `${bubbleSize}px`,\n    //     height: `${bubbleSize}px`,\n    // }}>\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"transaction-amount mb-2 text-2xl\",\n      children: \"#.###### BTC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"transaction-price mt-2 text-xl\",\n      children: \"$#####.##\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionBubble, \"tOhIcOzXPnidzOLaUggQr0rS+0M=\");\n\n_c = TransactionBubble;\nexport default TransactionBubble;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionBubble\");","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer-wip/src/components/TransactionBubble/TransactionBubble.tsx"],"names":["React","useState","sizeMap","size","TransactionBubble","amount","canvasWidth","setCanvasWidth","bubbleSize","setBubbleSize","position","setPosition","random","setRandom","Math","console","log","Object","keys","cutoffString","cutoffAmount","Number","parseFloat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAO,yBAAP;;AAMA,MAAMC,OAAuC,GAAG;AAC5C,WAAS;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADmC;AAE5C,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFoC;AAG5C,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAHoC;AAI5C,SAAO;AAACA,IAAAA,IAAI,EAAE;AAAP,GAJqC;AAK5C,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR;AALsC,CAAhD;;AAQA,SAASC,iBAAT,OAA2C;AAAA;;AAAA,MAAhB;AAAEC,IAAAA,MAAM,GAAG;AAAX,GAAgB;AACvC;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,GAAD,CAA9C,CAHuC,CAIvC;;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAACa,IAAI,CAACF,MAAL,EAAD,CAApC,CAPuC,CASvC;;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYhB,OAAZ,CAAZ;;AACA,OAAK,IAAIiB,YAAT,IAAyBF,MAAM,CAACC,IAAP,CAAYhB,OAAZ,CAAzB,EAA+C;AAC3C,UAAMkB,YAAY,GAAGC,MAAM,CAACC,UAAP,CAAkBH,YAAlB,CAArB;;AACA,QAAId,MAAM,IAAIe,YAAd,EAA4B;AACxBX,MAAAA,aAAa,CAACP,OAAO,CAACkB,YAAD,CAAP,CAAsBjB,IAAvB,CAAb;AACA;AACH;AACJ,GAjBsC,CAmBvC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,yEAAf,CACI;AACA;AACA;AACA;AACA;AALJ;AAAA,4BAOI;AAAM,MAAA,SAAS,EAAC,kCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAM,MAAA,SAAS,EAAC,gCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GA5DQC,iB;;KAAAA,iB;AA8DT,eAAeA,iBAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { TransactionSize } from '../../models/transaction'\nimport './TransactionBubble.css';\n\ninterface BubbleStyle {\n    size: number;\n}\n\nconst sizeMap: { [key: number]: BubbleStyle } = {\n    0.00001: { size: 100 },\n    0.0001: { size: 300 },\n    0.0005: { size: 400 },\n    0.001: {size: 800 },\n    0.01: { size: 1500 },\n}\n\nfunction TransactionBubble({ amount = 0 }) {\n    // const bubbleRef = useRef()\n    // const [canvasWidth, setCanvasWidth] = useState(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n    const [canvasWidth, setCanvasWidth] = useState(900)\n    // const [canvasHeight, setCanvasHeight] = useState(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n    const [bubbleSize, setBubbleSize] = useState(0)\n    const [position, setPosition] = useState(0)\n    const [random, setRandom] = useState(Math.random())\n\n    // Determine size of bubble\n    console.log(Object.keys(sizeMap))\n    for (let cutoffString of Object.keys(sizeMap)) {\n        const cutoffAmount = Number.parseFloat(cutoffString)\n        if (amount <= cutoffAmount) {\n            setBubbleSize(sizeMap[cutoffAmount].size)\n            break;\n        }\n    }\n\n    // Set position\n    // setPosition(random * canvasWidth)\n    // console.log('Position:', position)\n\n    // const min = 0.0001\n    // const max = 0.05\n    // const maxPixels = 1000\n    // const ratio = Number.parseFloat((Math.max(size, min) / (min + (max - min))).toFixed(1))\n    // setBubbleSize(100 + ratio * maxPixels)\n\n    // const getWindowSize = () => {\n    //     setCanvasWidth(document.documentElement?.clientWidth || document.body?.clientWidth || 0)\n    //     setCanvasHeight(document.documentElement?.clientHeight || document.body?.clientHeight || 0)\n    // }\n\n    // useEffect(() => {\n    //     window.addEventListener('resize', getWindowSize)\n    //     // return () => window.removeEventListener('resize', getWindowSize)\n    // }, [])\n\n    // Position bubble within canvas\n    // useEffect(() => {\n    //     console.log('canvas:', canvasWidth, 'x', canvasHeight)\n\n    //     const availablePixels = canvasWidth - bubbleSize\n    //     console.log('Position:', random * availablePixels)\n    //     setPosition(random * availablePixels)\n    // }, [canvasWidth, canvasHeight, bubbleSize, random])\n\n    return (\n        <div className=\"bubble flex flex-col place-items-center justify-center left-5 w-84 h-84\"\n            // style={{\n            //     left: `${position}px`,\n            //     width: `${bubbleSize}px`,\n            //     height: `${bubbleSize}px`,\n            // }}>\n            >\n            <span className='transaction-amount mb-2 text-2xl'>#.###### BTC</span>\n            <span className='transaction-price mt-2 text-xl'>$#####.##</span>\n        </div>\n    );\n}\n\nexport default TransactionBubble;"]},"metadata":{},"sourceType":"module"}