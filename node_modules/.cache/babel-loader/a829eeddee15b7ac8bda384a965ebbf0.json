{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErisXClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst moment = require(\"moment\");\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst jwt = __importStar(require(\"../Jwt\"));\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level3Point_1 = require(\"../Level3Point\");\n\nconst Level3Snapshot_1 = require(\"../Level3Snapshot\");\n\nconst Level3Update_1 = require(\"../Level3Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Trade_1 = require(\"../Trade\");\n/**\n * ErisX has limited market data and presently only supports trades and\n * level3 order books. It requires authenticating with a token to view\n * the market data, which is performed on initial connection. ErisX also\n * requires a unique \"correlationId\" for each request sent to the server.\n * Requests are limited to 40 per second.\n */\n\n\nclass ErisXClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://trade-api.erisx.com/\",\n      watcherMs = 600000,\n      apiKey,\n      apiSecret,\n      l2depth = 20\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"ErisX\", undefined, watcherMs);\n    this._sendSubTicker = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubTicker = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n    this.hasTrades = true;\n    this.hasLevel2Snapshots = true;\n    this.hasLevel3Updates = true;\n    this.l2depth = l2depth;\n    this._messageId = 0;\n  }\n\n  fetchSecurities() {\n    this._wss.send(JSON.stringify({\n      correlation: \"SecurityList\",\n      type: \"SecurityList\",\n      securityGroup: \"ALL\"\n    }));\n  }\n\n  _onConnected() {\n    this._sendAuthentication();\n  }\n\n  _sendAuthentication() {\n    this._wss.send(JSON.stringify({\n      correlation: this._nextId(),\n      type: \"AuthenticationRequest\",\n      token: this._createToken()\n    }));\n  }\n\n  _nextId() {\n    return (++this._messageId).toString();\n  }\n\n  _createToken() {\n    const payload = {\n      iat: Date.now(),\n      sub: this.apiKey\n    };\n    return jwt.hs256(payload, this.apiSecret);\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      correlation: this._nextId(),\n      type: \"MarketDataSubscribe\",\n      symbol: remote_id,\n      tradeOnly: true\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      correlation: this._nextId(),\n      type: \"MarketDataUnsubscribe\",\n      symbol: remote_id,\n      tradeOnly: true\n    }));\n  }\n\n  _sendSubLevel2Snapshots(remote_id) {\n    this._wss.send(JSON.stringify({\n      correlation: this._nextId(),\n      type: \"TopOfBookMarketDataSubscribe\",\n      symbol: remote_id,\n      topOfBookDepth: this.l2depth\n    }));\n  }\n\n  _sendUnsubLevel2Snapshots(remote_id) {\n    this._wss.send(JSON.stringify({\n      correlation: this._nextId(),\n      type: \"TopOfBookMarketDataUnsubscribe\",\n      symbol: remote_id,\n      topOfBookDepth: this.l2depth\n    }));\n  }\n\n  _sendSubLevel3Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      correlation: this._nextId(),\n      type: \"MarketDataSubscribe\",\n      symbol: remote_id\n    }));\n  }\n\n  _sendUnsubLevel3Snapshots(remote_id) {\n    this._wss.send(JSON.stringify({\n      correlation: this._nextId(),\n      type: \"MarketDataUnsubscribe\",\n      symbol: remote_id\n    }));\n  }\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw); // authentication\n\n    if (msg.type === \"AuthenticationResult\") {\n      if (msg.success) {\n        super._onConnected();\n      } else {\n        this.emit(\"error\", new Error(\"Authentication failed\"));\n      }\n\n      return;\n    } // logout\n\n\n    if (msg.type === \"Logout\") {\n      this.emit(\"error\", new Error(\"Session has been logged out\"));\n      return;\n    } // unsolicited\n\n\n    if (msg.type === \"OFFLINE\") {\n      this.emit(\"error\", new Error(\"Exchange is offline\"));\n      return;\n    } // status\n\n\n    if (msg.type === \"INFO_MESSAGE\") {\n      return;\n    } // securities\n\n\n    if (msg.type === \"SecuritiesResponse\") {\n      this.emit(\"markets\", msg.securities);\n      return;\n    } // trade\n\n\n    if (msg.type === \"MarketDataIncrementalRefreshTrade\") {\n      const market = this._tradeSubs.get(msg.symbol);\n\n      if (!market) return;\n\n      const trades = this._constructTrades(msg, market);\n\n      for (const trade of trades) {\n        this.emit(\"trade\", trade, market);\n      }\n\n      return;\n    } // l2 snapshot\n\n\n    if (msg.type === \"TopOfBookMarketData\") {\n      const market = this._level2SnapshotSubs.get(msg.symbol);\n\n      if (!market) return;\n\n      const snapshot = this._constructLevel2Snapshot(msg, market);\n\n      this.emit(\"l2snapshot\", snapshot, market);\n      return;\n    } // l3\n\n\n    if (msg.type === \"MarketDataIncrementalRefresh\") {\n      const market = this._level3UpdateSubs.get(msg.symbol);\n\n      if (!market) return; // snapshot\n\n      if (msg.endFlag === null) {\n        const snapshot = this._constructLevel3Snapshot(msg, market);\n\n        this.emit(\"l3snapshot\", snapshot, market);\n      } // update\n      else {\n        const update = this._constructLevel3Update(msg, market);\n\n        this.emit(\"l3update\", update, market);\n      }\n\n      return;\n    }\n  }\n  /**\n  {\n    \"correlation\": \"15978410832102\",\n    \"type\": \"MarketDataIncrementalRefreshTrade\",\n    \"symbol\": \"LTC/USD\",\n    \"sendingTime\": \"20200819-12:44:50.896\",\n    \"trades\": [{\n      \"updateAction\": \"NEW\",\n      \"price\": 64.2,\n      \"currency\": \"LTC\",\n      \"tickerType\": \"PAID\",\n      \"transactTime\": \"20200819-12:44:50.872994129\",\n      \"size\": 2.0,\n      \"symbol\": \"LTC/USD\",\n      \"numberOfOrders\": 1\n    }],\n    \"endFlag\":  \"END_OF_TRADE\"\n  }\n  */\n\n\n  _constructTrades(msg, market) {\n    return msg.trades.map(p => this._constructTrade(p, market));\n  }\n  /**\n  {\n    \"updateAction\": \"NEW\",\n    \"price\": 64.2,\n    \"currency\": \"LTC\",\n    \"tickerType\": \"PAID\",\n    \"transactTime\": \"20200819-12:44:50.872994129\",\n    \"size\": 2.0,\n    \"symbol\": \"LTC/USD\",\n    \"numberOfOrders\": 1\n  }\n  */\n\n\n  _constructTrade(msg, market) {\n    const timestamp = moment.utc(msg.transactTime, \"YYYYMMDD-hh:mm:ss.SSSSSSSSS\");\n    const unix = timestamp.valueOf();\n    const tradeId = msg.transactTime.replace(/[-:.]/g, \"\");\n    const amount = msg.size.toFixed(8);\n    const price = msg.price.toFixed(8);\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId,\n      unix,\n      price,\n      amount,\n      raw: msg\n    });\n  }\n  /**\n  {\n  \"correlation\": \"15978412650812\",\n  \"type\": \"TopOfBookMarketData\",\n  \"bids\": [\n      {\n          \"action\": \"NEW\",\n          \"count\": 1,\n          \"totalVolume\": 1.0,\n          \"price\": 413.2,\n          \"lastUpdate\": \"20200819-12:47:49.975\"\n      },\n      {\n          \"action\": \"UPDATE\",\n          \"count\": 2,\n          \"totalVolume\": 2.00,\n          \"price\": 412.9,\n          \"lastUpdate\": \"20200819-12:47:39.984\"\n      }\n  ],\n  \"offers\": [\n      {\n          \"action\": \"NO CHANGE\",\n          \"count\": 1,\n          \"totalVolume\": 1.00,\n          \"price\": 413.3,\n          \"lastUpdate\": \"20200819-12:47:40.166\"\n      },\n      {\n          \"action\": \"NO CHANGE\",\n          \"count\": 1,\n          \"totalVolume\": 1.56,\n          \"price\": 413.4,\n          \"lastUpdate\": \"20200819-12:47:20.196\"\n      }\n  ],\n  \"symbol\": \"ETH/USD\"\n  }\n  */\n\n\n  _constructLevel2Snapshot(msg, market) {\n    const map = p => new Level2Point_1.Level2Point(p.price.toFixed(8), p.totalVolume.toFixed(8), p.count, undefined, moment.utc(p.lastUpdate, \"YYYYMMDD-hh:mm:ss.SSSSSSSSS\").valueOf());\n\n    const bids = msg.bids.map(map);\n    const asks = msg.offers.map(map);\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      asks,\n      bids\n    });\n  }\n  /**\n  {\n    \"correlation\": \"4\",\n    \"type\": \"MarketDataIncrementalRefresh\",\n    \"symbol\": \"BTC/USD\",\n    \"sendingTime\": \"20201007-17:37:40.588\",\n    \"bids\": [\n        {\n            \"id\": \"1000000fd05b8\",\n            \"updateAction\": \"NEW\",\n            \"price\": 10632.2,\n            \"amount\": 1.6,\n            \"symbol\": \"BTC/USD\"\n        },\n        {\n            \"id\": \"1000000fd05a0\",\n            \"updateAction\": \"NEW\",\n            \"price\": 10629.4,\n            \"amount\": 1.6,\n            \"symbol\": \"BTC/USD\"\n        },\n        {\n            \"id\": \"1000000fc7402\",\n            \"updateAction\": \"NEW\",\n            \"price\": 10623.4,\n            \"amount\": 0.99,\n            \"symbol\": \"BTC/USD\"\n        }\n    ],\n    \"offers\": [\n        {\n            \"id\": \"1000000fd0522\",\n            \"updateAction\": \"NEW\",\n            \"price\": 10633.5,\n            \"amount\": 1.6,\n            \"symbol\": \"BTC/USD\"\n        },\n        {\n            \"id\": \"1000000fd05b7\",\n            \"updateAction\": \"NEW\",\n            \"price\": 10637,\n            \"amount\": 1.6,\n            \"symbol\": \"BTC/USD\"\n        },\n        {\n            \"id\": \"1000000fc7403\",\n            \"updateAction\": \"NEW\",\n            \"price\": 10638.4,\n            \"amount\": 0.99,\n            \"symbol\": \"BTC/USD\"\n        }\n    ],\n    \"transactTime\": \"20201007-17:37:40.587917127\",\n    \"endFlag\": null\n  }\n  */\n\n\n  _constructLevel3Snapshot(msg, market) {\n    const timestampMs = moment.utc(msg.transactTime, \"YYYYMMDD-hh:mm:ss.SSSSSSSSS\").valueOf();\n    const asks = msg.offers.map(p => new Level3Point_1.Level3Point(p.id, p.price.toFixed(8), p.amount.toFixed(8), {\n      type: p.updateAction\n    }));\n    const bids = msg.bids.map(p => new Level3Point_1.Level3Point(p.id, p.price.toFixed(8), p.amount.toFixed(8), {\n      type: p.updateAction\n    }));\n    return new Level3Snapshot_1.Level3Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestampMs,\n      asks,\n      bids\n    });\n  }\n  /**\n  {\n    \"correlation\": \"4\",\n    \"type\": \"MarketDataIncrementalRefresh\",\n    \"symbol\": \"BTC/USD\",\n    \"sendingTime\": \"20201007-17:37:42.931\",\n    \"bids\": [\n        {\n            \"id\": \"1000000fc7402\",\n            \"updateAction\": \"NEW\",\n            \"price\": 10625,\n            \"amount\": 0.99,\n            \"symbol\": \"BTC/USD\"\n        }\n    ],\n    \"offers\": [],\n    \"transactTime\": \"20201007-17:37:42.930970367\",\n    \"endFlag\": \"END_OF_EVENT\"\n  }\n  */\n\n\n  _constructLevel3Update(msg, market) {\n    const timestampMs = moment.utc(msg.transactTime, \"YYYYMMDD-hh:mm:ss.SSSSSSSSS\").valueOf();\n    const asks = msg.bids.map(p => new Level3Point_1.Level3Point(p.id, p.price.toFixed(8), p.amount.toFixed(8), {\n      type: p.updateAction\n    }));\n    const bids = msg.offers.map(p => new Level3Point_1.Level3Point(p.id, p.price.toFixed(8), p.amount.toFixed(8), {\n      type: p.updateAction\n    }));\n    return new Level3Update_1.Level3Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestampMs,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.ErisXClient = ErisXClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/ErisxClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport moment = require(\"moment\");\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport * as jwt from \"../Jwt\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level3Point } from \"../Level3Point\";\nimport { Level3Snapshot } from \"../Level3Snapshot\";\nimport { Level3Update } from \"../Level3Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Trade } from \"../Trade\";\n\nexport type ErisXClientOptions = ClientOptions & {\n    apiKey?: string;\n    apiSecret?: string;\n    l2depth?: number;\n};\n\n/**\n * ErisX has limited market data and presently only supports trades and\n * level3 order books. It requires authenticating with a token to view\n * the market data, which is performed on initial connection. ErisX also\n * requires a unique \"correlationId\" for each request sent to the server.\n * Requests are limited to 40 per second.\n */\nexport class ErisXClient extends BasicClient {\n    public apiKey: string;\n    public apiSecret: string;\n    public l2depth: number;\n    protected _messageId: number;\n\n    constructor({\n        wssPath = \"wss://trade-api.erisx.com/\",\n        watcherMs = 600000,\n        apiKey,\n        apiSecret,\n        l2depth = 20,\n    }: ErisXClientOptions = {}) {\n        super(wssPath, \"ErisX\", undefined, watcherMs);\n\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        this.hasTrades = true;\n        this.hasLevel2Snapshots = true;\n        this.hasLevel3Updates = true;\n        this.l2depth = l2depth;\n        this._messageId = 0;\n    }\n\n    public fetchSecurities() {\n        this._wss.send(\n            JSON.stringify({\n                correlation: \"SecurityList\",\n                type: \"SecurityList\",\n                securityGroup: \"ALL\",\n            }),\n        );\n    }\n\n    protected _onConnected() {\n        this._sendAuthentication();\n    }\n\n    protected _sendAuthentication() {\n        this._wss.send(\n            JSON.stringify({\n                correlation: this._nextId(),\n                type: \"AuthenticationRequest\",\n                token: this._createToken(),\n            }),\n        );\n    }\n\n    protected _nextId() {\n        return (++this._messageId).toString();\n    }\n\n    protected _createToken() {\n        const payload = {\n            iat: Date.now(),\n            sub: this.apiKey,\n        };\n        return jwt.hs256(payload, this.apiSecret);\n    }\n\n    protected _sendSubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                correlation: this._nextId(),\n                type: \"MarketDataSubscribe\",\n                symbol: remote_id,\n                tradeOnly: true,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                correlation: this._nextId(),\n                type: \"MarketDataUnsubscribe\",\n                symbol: remote_id,\n                tradeOnly: true,\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Snapshots(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                correlation: this._nextId(),\n                type: \"TopOfBookMarketDataSubscribe\",\n                symbol: remote_id,\n                topOfBookDepth: this.l2depth,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Snapshots(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                correlation: this._nextId(),\n                type: \"TopOfBookMarketDataUnsubscribe\",\n                symbol: remote_id,\n                topOfBookDepth: this.l2depth,\n            }),\n        );\n    }\n\n    protected _sendSubLevel3Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                correlation: this._nextId(),\n                type: \"MarketDataSubscribe\",\n                symbol: remote_id,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel3Snapshots(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                correlation: this._nextId(),\n                type: \"MarketDataUnsubscribe\",\n                symbol: remote_id,\n            }),\n        );\n    }\n\n    protected _sendSubTicker = NotImplementedFn;\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendUnsubTicker = NotImplementedFn;\n    protected _sendSubLevel2Updates = NotImplementedFn;\n    protected _sendUnsubLevel2Updates = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(raw) {\n        const msg: any = JSON.parse(raw);\n\n        // authentication\n        if (msg.type === \"AuthenticationResult\") {\n            if (msg.success) {\n                super._onConnected();\n            } else {\n                this.emit(\"error\", new Error(\"Authentication failed\"));\n            }\n            return;\n        }\n\n        // logout\n        if (msg.type === \"Logout\") {\n            this.emit(\"error\", new Error(\"Session has been logged out\"));\n            return;\n        }\n\n        // unsolicited\n        if (msg.type === \"OFFLINE\") {\n            this.emit(\"error\", new Error(\"Exchange is offline\"));\n            return;\n        }\n\n        // status\n        if (msg.type === \"INFO_MESSAGE\") {\n            return;\n        }\n\n        // securities\n        if (msg.type === \"SecuritiesResponse\") {\n            this.emit(\"markets\", msg.securities);\n            return;\n        }\n\n        // trade\n        if (msg.type === \"MarketDataIncrementalRefreshTrade\") {\n            const market = this._tradeSubs.get(msg.symbol);\n            if (!market) return;\n\n            const trades = this._constructTrades(msg, market);\n            for (const trade of trades) {\n                this.emit(\"trade\", trade, market);\n            }\n            return;\n        }\n\n        // l2 snapshot\n        if (msg.type === \"TopOfBookMarketData\") {\n            const market = this._level2SnapshotSubs.get(msg.symbol);\n            if (!market) return;\n\n            const snapshot = this._constructLevel2Snapshot(msg, market);\n            this.emit(\"l2snapshot\", snapshot, market);\n            return;\n        }\n\n        // l3\n        if (msg.type === \"MarketDataIncrementalRefresh\") {\n            const market = this._level3UpdateSubs.get(msg.symbol);\n            if (!market) return;\n\n            // snapshot\n            if (msg.endFlag === null) {\n                const snapshot = this._constructLevel3Snapshot(msg, market);\n                this.emit(\"l3snapshot\", snapshot, market);\n            }\n            // update\n            else {\n                const update = this._constructLevel3Update(msg, market);\n                this.emit(\"l3update\", update, market);\n            }\n            return;\n        }\n    }\n\n    /**\n   {\n      \"correlation\": \"15978410832102\",\n      \"type\": \"MarketDataIncrementalRefreshTrade\",\n      \"symbol\": \"LTC/USD\",\n      \"sendingTime\": \"20200819-12:44:50.896\",\n      \"trades\": [{\n        \"updateAction\": \"NEW\",\n        \"price\": 64.2,\n        \"currency\": \"LTC\",\n        \"tickerType\": \"PAID\",\n        \"transactTime\": \"20200819-12:44:50.872994129\",\n        \"size\": 2.0,\n        \"symbol\": \"LTC/USD\",\n        \"numberOfOrders\": 1\n      }],\n      \"endFlag\":  \"END_OF_TRADE\"\n    }\n   */\n    protected _constructTrades(msg, market) {\n        return msg.trades.map(p => this._constructTrade(p, market));\n    }\n\n    /**\n   {\n      \"updateAction\": \"NEW\",\n      \"price\": 64.2,\n      \"currency\": \"LTC\",\n      \"tickerType\": \"PAID\",\n      \"transactTime\": \"20200819-12:44:50.872994129\",\n      \"size\": 2.0,\n      \"symbol\": \"LTC/USD\",\n      \"numberOfOrders\": 1\n   }\n   */\n    protected _constructTrade(msg, market) {\n        const timestamp = moment.utc(msg.transactTime, \"YYYYMMDD-hh:mm:ss.SSSSSSSSS\");\n        const unix = timestamp.valueOf();\n        const tradeId = msg.transactTime.replace(/[-:.]/g, \"\");\n        const amount = msg.size.toFixed(8);\n        const price = msg.price.toFixed(8);\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId,\n            unix,\n            price,\n            amount,\n            raw: msg,\n        });\n    }\n\n    /**\n   {\n    \"correlation\": \"15978412650812\",\n    \"type\": \"TopOfBookMarketData\",\n    \"bids\": [\n        {\n            \"action\": \"NEW\",\n            \"count\": 1,\n            \"totalVolume\": 1.0,\n            \"price\": 413.2,\n            \"lastUpdate\": \"20200819-12:47:49.975\"\n        },\n        {\n            \"action\": \"UPDATE\",\n            \"count\": 2,\n            \"totalVolume\": 2.00,\n            \"price\": 412.9,\n            \"lastUpdate\": \"20200819-12:47:39.984\"\n        }\n    ],\n    \"offers\": [\n        {\n            \"action\": \"NO CHANGE\",\n            \"count\": 1,\n            \"totalVolume\": 1.00,\n            \"price\": 413.3,\n            \"lastUpdate\": \"20200819-12:47:40.166\"\n        },\n        {\n            \"action\": \"NO CHANGE\",\n            \"count\": 1,\n            \"totalVolume\": 1.56,\n            \"price\": 413.4,\n            \"lastUpdate\": \"20200819-12:47:20.196\"\n        }\n    ],\n    \"symbol\": \"ETH/USD\"\n    }\n   */\n    protected _constructLevel2Snapshot(msg, market) {\n        const map = p =>\n            new Level2Point(\n                p.price.toFixed(8),\n                p.totalVolume.toFixed(8),\n                p.count,\n                undefined,\n                moment.utc(p.lastUpdate, \"YYYYMMDD-hh:mm:ss.SSSSSSSSS\").valueOf(),\n            );\n        const bids = msg.bids.map(map);\n        const asks = msg.offers.map(map);\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            asks,\n            bids,\n        });\n    }\n\n    /**\n   {\n      \"correlation\": \"4\",\n      \"type\": \"MarketDataIncrementalRefresh\",\n      \"symbol\": \"BTC/USD\",\n      \"sendingTime\": \"20201007-17:37:40.588\",\n      \"bids\": [\n          {\n              \"id\": \"1000000fd05b8\",\n              \"updateAction\": \"NEW\",\n              \"price\": 10632.2,\n              \"amount\": 1.6,\n              \"symbol\": \"BTC/USD\"\n          },\n          {\n              \"id\": \"1000000fd05a0\",\n              \"updateAction\": \"NEW\",\n              \"price\": 10629.4,\n              \"amount\": 1.6,\n              \"symbol\": \"BTC/USD\"\n          },\n          {\n              \"id\": \"1000000fc7402\",\n              \"updateAction\": \"NEW\",\n              \"price\": 10623.4,\n              \"amount\": 0.99,\n              \"symbol\": \"BTC/USD\"\n          }\n      ],\n      \"offers\": [\n          {\n              \"id\": \"1000000fd0522\",\n              \"updateAction\": \"NEW\",\n              \"price\": 10633.5,\n              \"amount\": 1.6,\n              \"symbol\": \"BTC/USD\"\n          },\n          {\n              \"id\": \"1000000fd05b7\",\n              \"updateAction\": \"NEW\",\n              \"price\": 10637,\n              \"amount\": 1.6,\n              \"symbol\": \"BTC/USD\"\n          },\n          {\n              \"id\": \"1000000fc7403\",\n              \"updateAction\": \"NEW\",\n              \"price\": 10638.4,\n              \"amount\": 0.99,\n              \"symbol\": \"BTC/USD\"\n          }\n      ],\n      \"transactTime\": \"20201007-17:37:40.587917127\",\n      \"endFlag\": null\n    }\n   */\n    protected _constructLevel3Snapshot(msg, market) {\n        const timestampMs = moment.utc(msg.transactTime, \"YYYYMMDD-hh:mm:ss.SSSSSSSSS\").valueOf();\n        const asks = msg.offers.map(\n            p =>\n                new Level3Point(p.id, p.price.toFixed(8), p.amount.toFixed(8), {\n                    type: p.updateAction,\n                }),\n        );\n        const bids = msg.bids.map(\n            p =>\n                new Level3Point(p.id, p.price.toFixed(8), p.amount.toFixed(8), {\n                    type: p.updateAction,\n                }),\n        );\n        return new Level3Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestampMs,\n            asks,\n            bids,\n        });\n    }\n\n    /**\n   {\n      \"correlation\": \"4\",\n      \"type\": \"MarketDataIncrementalRefresh\",\n      \"symbol\": \"BTC/USD\",\n      \"sendingTime\": \"20201007-17:37:42.931\",\n      \"bids\": [\n          {\n              \"id\": \"1000000fc7402\",\n              \"updateAction\": \"NEW\",\n              \"price\": 10625,\n              \"amount\": 0.99,\n              \"symbol\": \"BTC/USD\"\n          }\n      ],\n      \"offers\": [],\n      \"transactTime\": \"20201007-17:37:42.930970367\",\n      \"endFlag\": \"END_OF_EVENT\"\n    }\n   */\n    protected _constructLevel3Update(msg, market) {\n        const timestampMs = moment.utc(msg.transactTime, \"YYYYMMDD-hh:mm:ss.SSSSSSSSS\").valueOf();\n        const asks = msg.bids.map(\n            p =>\n                new Level3Point(p.id, p.price.toFixed(8), p.amount.toFixed(8), {\n                    type: p.updateAction,\n                }),\n        );\n        const bids = msg.offers.map(\n            p =>\n                new Level3Point(p.id, p.price.toFixed(8), p.amount.toFixed(8), {\n                    type: p.updateAction,\n                }),\n        );\n        return new Level3Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestampMs,\n            asks,\n            bids,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}