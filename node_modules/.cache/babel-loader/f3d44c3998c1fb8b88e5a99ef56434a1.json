{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-misused-promises */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-floating-promises */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BasicMultiClient = void 0;\n\nconst events_1 = require(\"events\");\n\nconst semaphore_1 = __importDefault(require(\"semaphore\"));\n\nconst SubscriptionType_1 = require(\"./SubscriptionType\");\n\nconst Util_1 = require(\"./Util\");\n\nconst NotImplementedFn_1 = require(\"./NotImplementedFn\");\n\nclass BasicMultiClient extends events_1.EventEmitter {\n  constructor() {\n    super();\n    this.subscribeLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this.unsubscribeLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this.subscribeLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.unsubscribeLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._clients = new Map();\n    this.hasTickers = false;\n    this.hasTrades = false;\n    this.hasCandles = false;\n    this.hasLevel2Snapshots = false;\n    this.hasLevel2Updates = false;\n    this.hasLevel3Snapshots = false;\n    this.hasLevel3Updates = false;\n    this.throttleMs = 250;\n    this.sem = (0, semaphore_1.default)(3); // this can be overriden to allow more or less\n  }\n\n  async reconnect() {\n    for (const client of Array.from(this._clients.values())) {\n      (await client).reconnect();\n      await (0, Util_1.wait)(this.throttleMs); // delay the reconnection throttling\n    }\n  }\n\n  async close() {\n    for (const client of Array.from(this._clients.values())) {\n      (await client).close();\n    }\n  } ////// PUBLIC\n\n\n  subscribeTicker(market) {\n    if (!this.hasTickers) return;\n\n    this._subscribe(market, this._clients, SubscriptionType_1.SubscriptionType.ticker);\n  }\n\n  async unsubscribeTicker(market) {\n    if (!this.hasTickers) return;\n\n    if (this._clients.has(market.id)) {\n      const client = await this._clients.get(market.id);\n      client.unsubscribeTicker(market);\n    }\n  }\n\n  subscribeCandles(market) {\n    if (!this.hasCandles) return;\n\n    this._subscribe(market, this._clients, SubscriptionType_1.SubscriptionType.candle);\n  }\n\n  async unsubscribeCandles(market) {\n    if (!this.hasCandles) return;\n\n    if (this._clients.has(market.id)) {\n      const client = await this._clients.get(market.id);\n      client.unsubscribeCandles(market);\n    }\n  }\n\n  subscribeTrades(market) {\n    if (!this.hasTrades) return;\n\n    this._subscribe(market, this._clients, SubscriptionType_1.SubscriptionType.trade);\n  }\n\n  async unsubscribeTrades(market) {\n    if (!this.hasTrades) return;\n\n    if (this._clients.has(market.id)) {\n      const client = await this._clients.get(market.id);\n      client.unsubscribeTrades(market);\n    }\n  }\n\n  subscribeLevel2Updates(market) {\n    if (!this.hasLevel2Updates) return;\n\n    this._subscribe(market, this._clients, SubscriptionType_1.SubscriptionType.level2update);\n  }\n\n  async unsubscribeLevel2Updates(market) {\n    if (!this.hasLevel2Updates) return;\n\n    if (this._clients.has(market.id)) {\n      const client = await this._clients.get(market.id);\n      client.unsubscribeLevel2Updates(market);\n    }\n  }\n\n  subscribeLevel2Snapshots(market) {\n    if (!this.hasLevel2Snapshots) return;\n\n    this._subscribe(market, this._clients, SubscriptionType_1.SubscriptionType.level2snapshot);\n  }\n\n  async unsubscribeLevel2Snapshots(market) {\n    if (!this.hasLevel2Snapshots) return;\n\n    if (this._clients.has(market.id)) {\n      const client = await this._clients.get(market.id);\n      client.unsubscribeLevel2Snapshots(market);\n    }\n  } ////// PROTECTED\n\n\n  _createBasicClientThrottled(clientArgs) {\n    return new Promise(resolve => {\n      this.sem.take(() => {\n        const client = this._createBasicClient(clientArgs);\n\n        client.on(\"connecting\", () => this.emit(\"connecting\", clientArgs.market));\n        client.on(\"connected\", () => this.emit(\"connected\", clientArgs.market));\n        client.on(\"disconnected\", () => this.emit(\"disconnected\", clientArgs.market));\n        client.on(\"reconnecting\", () => this.emit(\"reconnecting\", clientArgs.market));\n        client.on(\"closing\", () => this.emit(\"closing\", clientArgs.market));\n        client.on(\"closed\", () => this.emit(\"closed\", clientArgs.market));\n        client.on(\"error\", err => this.emit(\"error\", err, clientArgs.market));\n\n        const clearSem = async () => {\n          await (0, Util_1.wait)(this.throttleMs);\n          this.sem.leave();\n          resolve(client);\n        };\n\n        client.once(\"connected\", clearSem);\n\n        client._connect();\n      });\n    });\n  }\n\n  async _subscribe(market, map, subscriptionType) {\n    try {\n      const remote_id = market.id;\n      let client = null; // construct a client\n\n      if (!map.has(remote_id)) {\n        const clientArgs = {\n          auth: this.auth,\n          market: market\n        };\n        client = this._createBasicClientThrottled(clientArgs); // we MUST store the promise in here otherwise we will stack up duplicates\n\n        map.set(remote_id, client);\n      } // wait for client to be made!\n\n\n      client = await map.get(remote_id);\n\n      if (subscriptionType === SubscriptionType_1.SubscriptionType.ticker) {\n        const subscribed = client.subscribeTicker(market);\n\n        if (subscribed) {\n          client.on(\"ticker\", (ticker, market) => {\n            this.emit(\"ticker\", ticker, market);\n          });\n        }\n      }\n\n      if (subscriptionType === SubscriptionType_1.SubscriptionType.candle) {\n        const subscribed = client.subscribeCandles(market);\n\n        if (subscribed) {\n          client.on(\"candle\", (candle, market) => {\n            this.emit(\"candle\", candle, market);\n          });\n        }\n      }\n\n      if (subscriptionType === SubscriptionType_1.SubscriptionType.trade) {\n        const subscribed = client.subscribeTrades(market);\n\n        if (subscribed) {\n          client.on(\"trade\", (trade, market) => {\n            this.emit(\"trade\", trade, market);\n          });\n        }\n      }\n\n      if (subscriptionType === SubscriptionType_1.SubscriptionType.level2update) {\n        const subscribed = client.subscribeLevel2Updates(market);\n\n        if (subscribed) {\n          client.on(\"l2update\", (l2update, market) => {\n            this.emit(\"l2update\", l2update, market);\n          });\n          client.on(\"l2snapshot\", (l2snapshot, market) => {\n            this.emit(\"l2snapshot\", l2snapshot, market);\n          });\n        }\n      }\n\n      if (subscriptionType === SubscriptionType_1.SubscriptionType.level2snapshot) {\n        const subscribed = client.subscribeLevel2Snapshots(market);\n\n        if (subscribed) {\n          client.on(\"l2snapshot\", (l2snapshot, market) => {\n            this.emit(\"l2snapshot\", l2snapshot, market);\n          });\n        }\n      }\n    } catch (ex) {\n      this.emit(\"error\", ex, market);\n    }\n  }\n\n}\n\nexports.BasicMultiClient = BasicMultiClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/BasicMultiClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-misused-promises */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nimport { EventEmitter } from \"events\";\nimport semaphore from \"semaphore\";\nimport { Market } from \"./Market\";\nimport { IClient } from \"./IClient\";\nimport { SubscriptionType } from \"./SubscriptionType\";\nimport { wait } from \"./Util\";\nimport { NotImplementedFn } from \"./NotImplementedFn\";\n\nexport abstract class BasicMultiClient extends EventEmitter {\n    public name: string;\n    public hasTickers: boolean;\n    public hasTrades: boolean;\n    public hasCandles: boolean;\n    public hasLevel2Snapshots: boolean;\n    public hasLevel2Updates: boolean;\n    public hasLevel3Snapshots: boolean;\n    public hasLevel3Updates: boolean;\n    public throttleMs: number;\n    public sem: semaphore.Semaphore;\n    public auth: any;\n\n    protected _clients: Map<string, Promise<IClient>>;\n\n    constructor() {\n        super();\n        this._clients = new Map();\n\n        this.hasTickers = false;\n        this.hasTrades = false;\n        this.hasCandles = false;\n        this.hasLevel2Snapshots = false;\n        this.hasLevel2Updates = false;\n        this.hasLevel3Snapshots = false;\n        this.hasLevel3Updates = false;\n        this.throttleMs = 250;\n        this.sem = semaphore(3); // this can be overriden to allow more or less\n    }\n\n    public async reconnect() {\n        for (const client of Array.from(this._clients.values())) {\n            (await client).reconnect();\n            await wait(this.throttleMs); // delay the reconnection throttling\n        }\n    }\n\n    public async close(): Promise<void> {\n        for (const client of Array.from(this._clients.values())) {\n            (await client).close();\n        }\n    }\n\n    ////// ABSTRACT\n    protected abstract _createBasicClient(clientArgs: any): IClient;\n\n    ////// PUBLIC\n\n    public subscribeTicker(market: Market) {\n        if (!this.hasTickers) return;\n        this._subscribe(market, this._clients, SubscriptionType.ticker);\n    }\n\n    public async unsubscribeTicker(market: Market) {\n        if (!this.hasTickers) return;\n        if (this._clients.has(market.id)) {\n            const client = await this._clients.get(market.id);\n            client.unsubscribeTicker(market);\n        }\n    }\n\n    public subscribeCandles(market: Market) {\n        if (!this.hasCandles) return;\n        this._subscribe(market, this._clients, SubscriptionType.candle);\n    }\n\n    public async unsubscribeCandles(market: Market) {\n        if (!this.hasCandles) return;\n        if (this._clients.has(market.id)) {\n            const client = await this._clients.get(market.id);\n            client.unsubscribeCandles(market);\n        }\n    }\n\n    public subscribeTrades(market) {\n        if (!this.hasTrades) return;\n        this._subscribe(market, this._clients, SubscriptionType.trade);\n    }\n\n    public async unsubscribeTrades(market: Market) {\n        if (!this.hasTrades) return;\n        if (this._clients.has(market.id)) {\n            const client = await this._clients.get(market.id);\n            client.unsubscribeTrades(market);\n        }\n    }\n\n    public subscribeLevel2Updates(market: Market) {\n        if (!this.hasLevel2Updates) return;\n        this._subscribe(market, this._clients, SubscriptionType.level2update);\n    }\n\n    public async unsubscribeLevel2Updates(market: Market) {\n        if (!this.hasLevel2Updates) return;\n        if (this._clients.has(market.id)) {\n            const client = await this._clients.get(market.id);\n            client.unsubscribeLevel2Updates(market);\n        }\n    }\n\n    public subscribeLevel2Snapshots(market: Market) {\n        if (!this.hasLevel2Snapshots) return;\n        this._subscribe(market, this._clients, SubscriptionType.level2snapshot);\n    }\n\n    public async unsubscribeLevel2Snapshots(market: Market) {\n        if (!this.hasLevel2Snapshots) return;\n        if (this._clients.has(market.id)) {\n            const client = await this._clients.get(market.id);\n            client.unsubscribeLevel2Snapshots(market);\n        }\n    }\n\n    public subscribeLevel3Snapshots = NotImplementedFn;\n    public unsubscribeLevel3Snapshots = NotImplementedFn;\n    public subscribeLevel3Updates = NotImplementedFn;\n    public unsubscribeLevel3Updates = NotImplementedFn;\n\n    ////// PROTECTED\n\n    protected _createBasicClientThrottled(clientArgs: any) {\n        return new Promise(resolve => {\n            this.sem.take(() => {\n                const client: any = this._createBasicClient(clientArgs);\n                client.on(\"connecting\", () => this.emit(\"connecting\", clientArgs.market));\n                client.on(\"connected\", () => this.emit(\"connected\", clientArgs.market));\n                client.on(\"disconnected\", () => this.emit(\"disconnected\", clientArgs.market));\n                client.on(\"reconnecting\", () => this.emit(\"reconnecting\", clientArgs.market));\n                client.on(\"closing\", () => this.emit(\"closing\", clientArgs.market));\n                client.on(\"closed\", () => this.emit(\"closed\", clientArgs.market));\n                client.on(\"error\", err => this.emit(\"error\", err, clientArgs.market));\n                const clearSem = async () => {\n                    await wait(this.throttleMs);\n                    this.sem.leave();\n                    resolve(client);\n                };\n                client.once(\"connected\", clearSem);\n                (client as any)._connect();\n            });\n        });\n    }\n\n    protected async _subscribe(\n        market: Market,\n        map: Map<string, Promise<IClient>>,\n        subscriptionType: SubscriptionType,\n    ) {\n        try {\n            const remote_id = market.id;\n            let client = null;\n\n            // construct a client\n            if (!map.has(remote_id)) {\n                const clientArgs = { auth: this.auth, market: market };\n                client = this._createBasicClientThrottled(clientArgs);\n                // we MUST store the promise in here otherwise we will stack up duplicates\n                map.set(remote_id, client);\n            }\n\n            // wait for client to be made!\n            client = await map.get(remote_id);\n\n            if (subscriptionType === SubscriptionType.ticker) {\n                const subscribed = client.subscribeTicker(market);\n                if (subscribed) {\n                    client.on(\"ticker\", (ticker, market) => {\n                        this.emit(\"ticker\", ticker, market);\n                    });\n                }\n            }\n\n            if (subscriptionType === SubscriptionType.candle) {\n                const subscribed = client.subscribeCandles(market);\n                if (subscribed) {\n                    client.on(\"candle\", (candle, market) => {\n                        this.emit(\"candle\", candle, market);\n                    });\n                }\n            }\n\n            if (subscriptionType === SubscriptionType.trade) {\n                const subscribed = client.subscribeTrades(market);\n                if (subscribed) {\n                    client.on(\"trade\", (trade, market) => {\n                        this.emit(\"trade\", trade, market);\n                    });\n                }\n            }\n\n            if (subscriptionType === SubscriptionType.level2update) {\n                const subscribed = client.subscribeLevel2Updates(market);\n                if (subscribed) {\n                    client.on(\"l2update\", (l2update, market) => {\n                        this.emit(\"l2update\", l2update, market);\n                    });\n                    client.on(\"l2snapshot\", (l2snapshot, market) => {\n                        this.emit(\"l2snapshot\", l2snapshot, market);\n                    });\n                }\n            }\n\n            if (subscriptionType === SubscriptionType.level2snapshot) {\n                const subscribed = client.subscribeLevel2Snapshots(market);\n                if (subscribed) {\n                    client.on(\"l2snapshot\", (l2snapshot, market) => {\n                        this.emit(\"l2snapshot\", l2snapshot, market);\n                    });\n                }\n            }\n        } catch (ex) {\n            this.emit(\"error\", ex, market);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}