{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HitBtcClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst moment_1 = __importDefault(require(\"moment\"));\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Candle_1 = require(\"../Candle\");\n\nconst CandlePeriod_1 = require(\"../CandlePeriod\");\n\nconst Throttle_1 = require(\"../flowcontrol/Throttle\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nclass HitBtcClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://api.hitbtc.com/api/2/ws\",\n      throttleMs = 25,\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"HitBTC\", undefined, watcherMs);\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._id = 0;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasCandles = true;\n    this.hasLevel2Updates = true;\n    this.candlePeriod = CandlePeriod_1.CandlePeriod._1m;\n    this._send = (0, Throttle_1.throttle)(this.__send.bind(this), throttleMs);\n  }\n\n  _beforeClose() {\n    this._send.cancel();\n  }\n\n  __send(msg) {\n    this._wss.send(msg);\n  }\n\n  _sendSubTicker(remote_id) {\n    this._send(JSON.stringify({\n      method: \"subscribeTicker\",\n      params: {\n        symbol: remote_id\n      },\n      id: ++this._id\n    }));\n  }\n\n  _sendUnsubTicker(remote_id) {\n    this._send(JSON.stringify({\n      method: \"unsubscribeTicker\",\n      params: {\n        symbol: remote_id\n      }\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    this._send(JSON.stringify({\n      method: \"subscribeTrades\",\n      params: {\n        symbol: remote_id\n      },\n      id: ++this._id\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._send(JSON.stringify({\n      method: \"unsubscribeTrades\",\n      params: {\n        symbol: remote_id\n      }\n    }));\n  }\n\n  _sendSubCandles(remote_id) {\n    this._send(JSON.stringify({\n      method: \"subscribeCandles\",\n      params: {\n        symbol: remote_id,\n        period: candlePeriod(this.candlePeriod)\n      },\n      id: ++this._id\n    }));\n  }\n\n  _sendUnsubCandles(remote_id) {\n    this._send(JSON.stringify({\n      method: \"unsubscribeCandles\",\n      params: {\n        symbol: remote_id,\n        period: candlePeriod(this.candlePeriod)\n      }\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    this._send(JSON.stringify({\n      method: \"subscribeOrderbook\",\n      params: {\n        symbol: remote_id\n      },\n      id: ++this._id\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._send(JSON.stringify({\n      method: \"unsubscribeOrderbook\",\n      params: {\n        symbol: remote_id\n      }\n    }));\n  }\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw); // The payload for a subscribe confirm will include the id that\n    // was attached in the JSON-RPC call creation.  For example:\n    // { jsonrpc: '2.0', result: true, id: 7 }\n\n    if (msg.result === true && msg.id) {// console.log(msg);\n      // return;\n    } // For unsubscribe calls, we are not including an id\n    // so we can ignore messages that do not can an id value:\n    // { jsonrpc: '2.0', result: true, id: null }\n\n\n    if (msg.result !== undefined && msg.id) {\n      return;\n    }\n\n    const remote_id = msg.params && msg.params.symbol;\n\n    if (msg.method === \"ticker\") {\n      const market = this._tickerSubs.get(remote_id);\n\n      if (!market) return;\n\n      const ticker = this._constructTicker(msg.params, market);\n\n      this.emit(\"ticker\", ticker, market);\n    }\n\n    if (msg.method === \"updateTrades\") {\n      const market = this._tradeSubs.get(remote_id);\n\n      if (!market) return;\n\n      for (const datum of msg.params.data) {\n        const trade = this._constructTradesFromMessage(datum, market);\n\n        this.emit(\"trade\", trade, market);\n      }\n\n      return;\n    }\n\n    if (msg.method === \"updateCandles\") {\n      const market = this._candleSubs.get(remote_id);\n\n      if (!market) return;\n\n      for (const datum of msg.params.data) {\n        const candle = this._constructCandle(datum);\n\n        this.emit(\"candle\", candle, market);\n      }\n    }\n\n    if (msg.method === \"snapshotOrderbook\") {\n      const market = this._level2UpdateSubs.get(remote_id); // coming from l2update sub\n\n\n      if (!market) return;\n\n      const result = this._constructLevel2Snapshot(msg.params, market);\n\n      this.emit(\"l2snapshot\", result, market);\n      return;\n    }\n\n    if (msg.method === \"updateOrderbook\") {\n      const market = this._level2UpdateSubs.get(remote_id);\n\n      if (!market) return;\n\n      const result = this._constructLevel2Update(msg.params, market);\n\n      this.emit(\"l2update\", result, market);\n      return;\n    }\n  }\n\n  _constructTicker(param, market) {\n    const {\n      ask,\n      bid,\n      last,\n      open,\n      low,\n      high,\n      volume,\n      volumeQuote,\n      timestamp\n    } = param;\n    const change = (parseFloat(last) - parseFloat(open)).toFixed(8);\n    const changePercent = ((parseFloat(last) - parseFloat(open)) / parseFloat(open) * 100).toFixed(8);\n    return new Ticker_1.Ticker({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      timestamp: moment_1.default.utc(timestamp).valueOf(),\n      last,\n      open,\n      high,\n      low,\n      volume,\n      quoteVolume: volumeQuote,\n      ask,\n      bid,\n      change,\n      changePercent\n    });\n  }\n\n  _constructTradesFromMessage(datum, market) {\n    const {\n      id,\n      price,\n      quantity,\n      side,\n      timestamp\n    } = datum;\n    const unix = (0, moment_1.default)(timestamp).valueOf();\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: id.toFixed(),\n      side,\n      unix,\n      price,\n      amount: quantity\n    });\n  }\n\n  _constructCandle(datum) {\n    const unix = (0, moment_1.default)(datum.timestamp).valueOf();\n    return new Candle_1.Candle(unix, datum.open, datum.max, datum.min, datum.close, datum.volume);\n  }\n\n  _constructLevel2Snapshot(data, market) {\n    const {\n      ask,\n      bid,\n      sequence\n    } = data;\n    const asks = ask.map(p => new Level2Point_1.Level2Point(p.price, p.size));\n    const bids = bid.map(p => new Level2Point_1.Level2Point(p.price, p.size));\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: sequence,\n      asks,\n      bids\n    });\n  }\n\n  _constructLevel2Update(data, market) {\n    const {\n      ask,\n      bid,\n      sequence\n    } = data;\n    const asks = ask.map(p => new Level2Point_1.Level2Point(p.price, p.size, p.count));\n    const bids = bid.map(p => new Level2Point_1.Level2Point(p.price, p.size, p.count));\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      sequenceId: sequence,\n      asks,\n      bids\n    });\n  }\n\n}\n\nexports.HitBtcClient = HitBtcClient;\n\nfunction candlePeriod(period) {\n  switch (period) {\n    case CandlePeriod_1.CandlePeriod._1m:\n      return \"M1\";\n\n    case CandlePeriod_1.CandlePeriod._3m:\n      return \"M3\";\n\n    case CandlePeriod_1.CandlePeriod._5m:\n      return \"M5\";\n\n    case CandlePeriod_1.CandlePeriod._15m:\n      return \"M15\";\n\n    case CandlePeriod_1.CandlePeriod._30m:\n      return \"M30\";\n\n    case CandlePeriod_1.CandlePeriod._1h:\n      return \"H1\";\n\n    case CandlePeriod_1.CandlePeriod._4h:\n      return \"H4\";\n\n    case CandlePeriod_1.CandlePeriod._1d:\n      return \"D1\";\n\n    case CandlePeriod_1.CandlePeriod._1w:\n      return \"D7\";\n\n    case CandlePeriod_1.CandlePeriod._1M:\n      return \"1M\";\n  }\n}","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/HitBtcClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport moment from \"moment\";\nimport { BasicClient } from \"../BasicClient\";\nimport { Candle } from \"../Candle\";\nimport { CandlePeriod } from \"../CandlePeriod\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { CancelableFn } from \"../flowcontrol/Fn\";\nimport { throttle } from \"../flowcontrol/Throttle\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\nexport class HitBtcClient extends BasicClient {\n    public candlePeriod: CandlePeriod;\n\n    protected _id: number;\n    protected _send: CancelableFn;\n\n    constructor({\n        wssPath = \"wss://api.hitbtc.com/api/2/ws\",\n        throttleMs = 25,\n        watcherMs,\n    }: ClientOptions = {}) {\n        super(wssPath, \"HitBTC\", undefined, watcherMs);\n        this._id = 0;\n\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasCandles = true;\n        this.hasLevel2Updates = true;\n        this.candlePeriod = CandlePeriod._1m;\n        this._send = throttle(this.__send.bind(this), throttleMs);\n    }\n\n    protected _beforeClose() {\n        this._send.cancel();\n    }\n\n    protected __send(msg) {\n        this._wss.send(msg);\n    }\n\n    protected _sendSubTicker(remote_id: string) {\n        this._send(\n            JSON.stringify({\n                method: \"subscribeTicker\",\n                params: {\n                    symbol: remote_id,\n                },\n                id: ++this._id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker(remote_id: string) {\n        this._send(\n            JSON.stringify({\n                method: \"unsubscribeTicker\",\n                params: {\n                    symbol: remote_id,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id: string) {\n        this._send(\n            JSON.stringify({\n                method: \"subscribeTrades\",\n                params: {\n                    symbol: remote_id,\n                },\n                id: ++this._id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id: string) {\n        this._send(\n            JSON.stringify({\n                method: \"unsubscribeTrades\",\n                params: {\n                    symbol: remote_id,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubCandles(remote_id: string) {\n        this._send(\n            JSON.stringify({\n                method: \"subscribeCandles\",\n                params: {\n                    symbol: remote_id,\n                    period: candlePeriod(this.candlePeriod),\n                },\n                id: ++this._id,\n            }),\n        );\n    }\n\n    protected _sendUnsubCandles(remote_id: string) {\n        this._send(\n            JSON.stringify({\n                method: \"unsubscribeCandles\",\n                params: {\n                    symbol: remote_id,\n                    period: candlePeriod(this.candlePeriod),\n                },\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id: string) {\n        this._send(\n            JSON.stringify({\n                method: \"subscribeOrderbook\",\n                params: {\n                    symbol: remote_id,\n                },\n                id: ++this._id,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id: string) {\n        this._send(\n            JSON.stringify({\n                method: \"unsubscribeOrderbook\",\n                params: {\n                    symbol: remote_id,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(raw: string) {\n        const msg = JSON.parse(raw);\n\n        // The payload for a subscribe confirm will include the id that\n        // was attached in the JSON-RPC call creation.  For example:\n        // { jsonrpc: '2.0', result: true, id: 7 }\n        if (msg.result === true && msg.id) {\n            // console.log(msg);\n            // return;\n        }\n\n        // For unsubscribe calls, we are not including an id\n        // so we can ignore messages that do not can an id value:\n        // { jsonrpc: '2.0', result: true, id: null }\n        if (msg.result !== undefined && msg.id) {\n            return;\n        }\n\n        const remote_id = msg.params && msg.params.symbol;\n\n        if (msg.method === \"ticker\") {\n            const market = this._tickerSubs.get(remote_id);\n            if (!market) return;\n\n            const ticker = this._constructTicker(msg.params, market);\n            this.emit(\"ticker\", ticker, market);\n        }\n\n        if (msg.method === \"updateTrades\") {\n            const market = this._tradeSubs.get(remote_id);\n            if (!market) return;\n\n            for (const datum of msg.params.data) {\n                const trade = this._constructTradesFromMessage(datum, market);\n                this.emit(\"trade\", trade, market);\n            }\n            return;\n        }\n\n        if (msg.method === \"updateCandles\") {\n            const market = this._candleSubs.get(remote_id);\n            if (!market) return;\n\n            for (const datum of msg.params.data) {\n                const candle = this._constructCandle(datum);\n                this.emit(\"candle\", candle, market);\n            }\n        }\n\n        if (msg.method === \"snapshotOrderbook\") {\n            const market = this._level2UpdateSubs.get(remote_id); // coming from l2update sub\n            if (!market) return;\n\n            const result = this._constructLevel2Snapshot(msg.params, market);\n            this.emit(\"l2snapshot\", result, market);\n            return;\n        }\n\n        if (msg.method === \"updateOrderbook\") {\n            const market = this._level2UpdateSubs.get(remote_id);\n            if (!market) return;\n\n            const result = this._constructLevel2Update(msg.params, market);\n            this.emit(\"l2update\", result, market);\n            return;\n        }\n    }\n\n    protected _constructTicker(param, market) {\n        const { ask, bid, last, open, low, high, volume, volumeQuote, timestamp } = param;\n        const change = (parseFloat(last) - parseFloat(open)).toFixed(8);\n        const changePercent = (\n            ((parseFloat(last) - parseFloat(open)) / parseFloat(open)) *\n            100\n        ).toFixed(8);\n        return new Ticker({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            timestamp: moment.utc(timestamp).valueOf(),\n            last,\n            open,\n            high,\n            low,\n            volume,\n            quoteVolume: volumeQuote,\n            ask,\n            bid,\n            change,\n            changePercent,\n        });\n    }\n\n    protected _constructTradesFromMessage(datum, market) {\n        const { id, price, quantity, side, timestamp } = datum;\n\n        const unix = moment(timestamp).valueOf();\n\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: id.toFixed(),\n            side,\n            unix,\n            price,\n            amount: quantity,\n        });\n    }\n\n    protected _constructCandle(datum) {\n        const unix = moment(datum.timestamp).valueOf();\n        return new Candle(unix, datum.open, datum.max, datum.min, datum.close, datum.volume);\n    }\n\n    protected _constructLevel2Snapshot(data, market) {\n        const { ask, bid, sequence } = data;\n        const asks = ask.map(p => new Level2Point(p.price, p.size));\n        const bids = bid.map(p => new Level2Point(p.price, p.size));\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: sequence,\n            asks,\n            bids,\n        });\n    }\n\n    protected _constructLevel2Update(data, market) {\n        const { ask, bid, sequence } = data;\n        const asks = ask.map(p => new Level2Point(p.price, p.size, p.count));\n        const bids = bid.map(p => new Level2Point(p.price, p.size, p.count));\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            sequenceId: sequence,\n            asks,\n            bids,\n        });\n    }\n}\n\nfunction candlePeriod(period: CandlePeriod): string {\n    switch (period) {\n        case CandlePeriod._1m:\n            return \"M1\";\n        case CandlePeriod._3m:\n            return \"M3\";\n        case CandlePeriod._5m:\n            return \"M5\";\n        case CandlePeriod._15m:\n            return \"M15\";\n        case CandlePeriod._30m:\n            return \"M30\";\n        case CandlePeriod._1h:\n            return \"H1\";\n        case CandlePeriod._4h:\n            return \"H4\";\n        case CandlePeriod._1d:\n            return \"D1\";\n        case CandlePeriod._1w:\n            return \"D7\";\n        case CandlePeriod._1M:\n            return \"1M\";\n    }\n}\n"]},"metadata":{},"sourceType":"script"}