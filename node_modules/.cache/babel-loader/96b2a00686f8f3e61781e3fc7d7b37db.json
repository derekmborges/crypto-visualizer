{"ast":null,"code":"var _jsxFileName = \"/Users/Derek/workspace/crypto-visualizer-wip/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Canvas from './components/Canvas/Canvas';\nimport Menu from './components/Menu/Menu';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Initiate WebSocket connection\n  const wsBase = process.env.REACT_APP_WS_BASE_URL;\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const {\n    lastMessage,\n    sendMessage,\n    readyState\n  } = useWebSocket(`${wsBase}?api_key=${apiKey}`);\n  const [initialCount, setInitialCount] = useState(0);\n  const [nextKey, setNextKey] = useState(0);\n  const [transactions, setTransactions] = useState({}); // const deleteTransaction = (key: string) => {\n  //   if (Object.keys(transactions).includes(key)) {\n  //     delete transactions[key]\n  //   }\n  //   setTransactions({...transactions})\n  // }\n\n  const addTransaction = t => {\n    transactions[nextKey.toString()] = t; // setTimeout(() => deleteTransaction(nextKey.toString()), 25000)\n\n    setNextKey(nextKey + 1);\n  }; // Respond to new messages coming in from the data provider\n\n\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const data = JSON.parse(lastMessage.data); // If the welcome message is received, the app is ready\n      // to request trade updates over the socket\n      // e.g. BTC-USD on Coinbase\n\n      if ((data === null || data === void 0 ? void 0 : data.MESSAGE) === 'STREAMERWELCOME') {\n        console.log('subscribing to channel...');\n        var subRequest = {\n          \"action\": \"SubAdd\",\n          \"subs\": [\"0~Coinbase~BTC~USD\"] // Hardcoded for now\n\n        };\n        sendMessage(JSON.stringify(subRequest));\n      } // If the app receives a trade update,\n      // create a Transaction and add it to the list\n      else if ((data === null || data === void 0 ? void 0 : data.TYPE) === '0') {\n        // We want to ignore the first 20 trades that the Websocket sends over\n        // cause they're old   \n        if (initialCount >= 20) {\n          const transaction = {\n            exchange: data.M,\n            coin: data.FSYM,\n            price: data.P,\n            amount: data.Q\n          };\n          addTransaction(transaction);\n        } else {\n          setInitialCount(initialCount + 1);\n        }\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [lastMessage]); // React to the state of the WebSocket connection\n  // and just log it to the console for now\n\n  useEffect(() => {\n    console.log('Connection is', readyState === ReadyState.OPEN ? 'ACTIVE' : 'INACTIVE');\n  }, [readyState]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      transactions: transactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"okQTDf0VA08Ju2ei9vat7udTh/M=\", false, function () {\n  return [useWebSocket];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer-wip/src/App.tsx"],"names":["Canvas","Menu","useWebSocket","ReadyState","useEffect","useState","App","wsBase","process","env","REACT_APP_WS_BASE_URL","apiKey","REACT_APP_API_KEY","lastMessage","sendMessage","readyState","initialCount","setInitialCount","nextKey","setNextKey","transactions","setTransactions","addTransaction","t","toString","data","JSON","parse","MESSAGE","console","log","subRequest","stringify","TYPE","transaction","exchange","M","coin","FSYM","price","P","amount","Q","OPEN"],"mappings":"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","sourcesContent":["import './App.css';\nimport Canvas from './components/Canvas/Canvas';\nimport Menu from './components/Menu/Menu';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { useEffect, useState } from 'react';\nimport { Transaction } from './models/transaction';\n\nfunction App() {\n  // Initiate WebSocket connection\n  const wsBase = process.env.REACT_APP_WS_BASE_URL\n  const apiKey = process.env.REACT_APP_API_KEY\n  const {\n    lastMessage,\n    sendMessage,\n    readyState\n  } = useWebSocket(`${wsBase}?api_key=${apiKey}`)\n\n  const [initialCount, setInitialCount] = useState(0)\n  const [nextKey, setNextKey] = useState(0)\n  const [transactions, setTransactions] = useState({} as {[key: string]: Transaction})\n\n  // const deleteTransaction = (key: string) => {\n  //   if (Object.keys(transactions).includes(key)) {\n  //     delete transactions[key]\n  //   }\n  //   setTransactions({...transactions})\n  // }\n\n\n  const addTransaction = (t: Transaction) => {\n    transactions[nextKey.toString()] = t\n    // setTimeout(() => deleteTransaction(nextKey.toString()), 25000)\n    setNextKey(nextKey + 1)\n  }\n\n  // Respond to new messages coming in from the data provider\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const data = JSON.parse(lastMessage.data)\n\n      // If the welcome message is received, the app is ready\n      // to request trade updates over the socket\n      // e.g. BTC-USD on Coinbase\n      if (data?.MESSAGE === 'STREAMERWELCOME') {\n        console.log('subscribing to channel...')\n        var subRequest = {\n          \"action\": \"SubAdd\",\n          \"subs\": [\"0~Coinbase~BTC~USD\"] // Hardcoded for now\n        };\n        sendMessage(JSON.stringify(subRequest))\n      }\n\n      // If the app receives a trade update,\n      // create a Transaction and add it to the list\n      else if (data?.TYPE === '0') {\n        // We want to ignore the first 20 trades that the Websocket sends over\n        // cause they're old   \n        if (initialCount >= 20) {\n          const transaction: Transaction = {\n            exchange: data.M,\n            coin: data.FSYM,\n            price: data.P,\n            amount: data.Q\n          }\n          addTransaction(transaction)\n        } else {\n          setInitialCount(initialCount + 1)\n        }\n      }\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lastMessage])\n\n  // React to the state of the WebSocket connection\n  // and just log it to the console for now\n  useEffect(() => {\n    console.log('Connection is', readyState === ReadyState.OPEN ? 'ACTIVE' : 'INACTIVE')\n  }, [readyState])\n\n  return (\n    <>\n      <Canvas transactions={transactions} />\n      <Menu />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}