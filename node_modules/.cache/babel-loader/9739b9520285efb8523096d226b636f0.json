{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.post = exports.getResponse = exports.get = void 0;\n\nconst https_1 = __importDefault(require(\"https\"));\n\nconst url_1 = __importDefault(require(\"url\"));\n/**\n * Maks an HTTPS GET request to the specified URI and returns the parsed JSON\n * body data.\n */\n\n\nasync function get(uri) {\n  const result = await getResponse(uri);\n  return result.data;\n}\n\nexports.get = get;\n/**\n * Make an HTTPS GET request to the specified URI and returns the parsed JSON\n * body data as well as the full response.\n */\n\nasync function getResponse(uri) {\n  return new Promise((resolve, reject) => {\n    const req = https_1.default.get(url_1.default.parse(uri), res => {\n      const results = [];\n      res.on(\"error\", reject);\n      res.on(\"data\", data => results.push(data));\n      res.on(\"end\", () => {\n        const finalResults = Buffer.concat(results).toString();\n\n        if (res.statusCode !== 200) {\n          return reject(new Error(results.toString()));\n        } else {\n          const resultsParsed = JSON.parse(finalResults);\n          return resolve({\n            data: resultsParsed,\n            response: res\n          });\n        }\n      });\n    });\n    req.on(\"error\", reject);\n    req.end();\n  });\n}\n\nexports.getResponse = getResponse;\n\nasync function post(uri) {\n  let postData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return new Promise((resolve, reject) => {\n    const {\n      hostname,\n      port,\n      pathname\n    } = url_1.default.parse(uri);\n    const req = https_1.default.request({\n      host: hostname,\n      port,\n      path: pathname,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": postData.length\n      }\n    }, res => {\n      const results = [];\n      res.on(\"error\", reject);\n      res.on(\"data\", data => results.push(data));\n      res.on(\"end\", () => {\n        const finalResults = Buffer.concat(results).toString();\n\n        if (res.statusCode !== 200) {\n          return reject(results.toString());\n        } else {\n          return resolve(JSON.parse(finalResults));\n        }\n      });\n    });\n    req.on(\"error\", reject);\n    req.write(postData);\n    req.end();\n  });\n}\n\nexports.post = post;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/Https.ts"],"names":[],"mappings":"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","sourcesContent":["import { IncomingMessage } from \"http\";\nimport https from \"https\";\nimport url from \"url\";\n\n/**\n * Maks an HTTPS GET request to the specified URI and returns the parsed JSON\n * body data.\n */\nexport async function get<T>(uri: string): Promise<T> {\n    const result = await getResponse<T>(uri);\n    return result.data;\n}\n\n/**\n * Make an HTTPS GET request to the specified URI and returns the parsed JSON\n * body data as well as the full response.\n */\nexport async function getResponse<T>(uri: string): Promise<{ data: T; response: IncomingMessage }> {\n    return new Promise((resolve, reject) => {\n        const req = https.get(url.parse(uri), res => {\n            const results: Buffer[] = [];\n            res.on(\"error\", reject);\n            res.on(\"data\", (data: Buffer) => results.push(data));\n            res.on(\"end\", () => {\n                const finalResults = Buffer.concat(results).toString();\n                if (res.statusCode !== 200) {\n                    return reject(new Error(results.toString()));\n                } else {\n                    const resultsParsed = JSON.parse(finalResults) as T;\n                    return resolve({\n                        data: resultsParsed,\n                        response: res,\n                    });\n                }\n            });\n        });\n        req.on(\"error\", reject);\n        req.end();\n    });\n}\n\nexport async function post<T>(uri: string, postData: string = \"\"): Promise<T> {\n    return new Promise((resolve, reject) => {\n        const { hostname, port, pathname } = url.parse(uri);\n\n        const req = https.request(\n            {\n                host: hostname,\n                port,\n                path: pathname,\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Content-Length\": postData.length,\n                },\n            },\n            res => {\n                const results: Buffer[] = [];\n                res.on(\"error\", reject);\n                res.on(\"data\", data => results.push(data));\n                res.on(\"end\", () => {\n                    const finalResults = Buffer.concat(results).toString();\n                    if (res.statusCode !== 200) {\n                        return reject(results.toString());\n                    } else {\n                        return resolve(JSON.parse(finalResults));\n                    }\n                });\n            },\n        );\n        req.on(\"error\", reject);\n        req.write(postData);\n        req.end();\n    });\n}\n"]},"metadata":{},"sourceType":"script"}