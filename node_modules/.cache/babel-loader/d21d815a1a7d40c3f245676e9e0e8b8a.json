{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitstampClient = void 0;\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable @typescript-eslint/no-misused-promises */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nconst semaphore = require(\"semaphore\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Util_1 = require(\"../Util\");\n\nconst https = __importStar(require(\"../Https\"));\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst Trade_1 = require(\"../Trade\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n/**\n * BistampClient v2 no longer uses Pusher. We can leverage the\n * BasicClient now instead of performing custom actions.\n *\n * Documentation for Version 2\n * https://www.bitstamp.net/websocket/v2/\n */\n\n\nclass BitstampClient extends BasicClient_1.BasicClient {\n  constructor() {\n    let {\n      wssPath = \"wss://ws.bitstamp.net\",\n      watcherMs\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(wssPath, \"Bitstamp\", undefined, watcherMs);\n    this._sendSubTicker = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubTicker = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.requestSnapshot = true;\n    this.hasTrades = true;\n    this.hasLevel2Snapshots = true;\n    this.hasLevel2Updates = true;\n    this._restSem = semaphore(1);\n    this.REST_REQUEST_DELAY_MS = 250;\n  }\n\n  _sendSubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"bts:subscribe\",\n      data: {\n        channel: `live_trades_${remote_id}`\n      }\n    }));\n  }\n\n  _sendUnsubTrades(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"bts:unsubscribe\",\n      data: {\n        channel: `live_trades_${remote_id}`\n      }\n    }));\n  }\n\n  _sendSubLevel2Snapshots(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"bts:subscribe\",\n      data: {\n        channel: `order_book_${remote_id}`\n      }\n    }));\n  }\n\n  _sendUnsubLevel2Snapshots(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"bts:unsubscribe\",\n      data: {\n        channel: `order_book_${remote_id}`\n      }\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    if (this.requestSnapshot) this._requestLevel2Snapshot(this._level2UpdateSubs.get(remote_id));\n\n    this._wss.send(JSON.stringify({\n      event: \"bts:subscribe\",\n      data: {\n        channel: `diff_order_book_${remote_id}`\n      }\n    }));\n  }\n\n  _sendUnsubLevel2Updates(remote_id) {\n    this._wss.send(JSON.stringify({\n      event: \"bts:unsubscribe\",\n      data: {\n        channel: `diff_order_book_${remote_id}`\n      }\n    }));\n  } /////////////////////////////////////////////\n\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw);\n\n    if (msg.event === \"trade\" && msg.channel.startsWith(\"live_trades\")) {\n      this._onTrade(msg);\n\n      return;\n    }\n\n    if (msg.event === \"data\" && msg.channel.startsWith(\"order_book\")) {\n      this._onLevel2Snapshot(msg);\n\n      return;\n    }\n\n    if (msg.event === \"data\" && msg.channel.startsWith(\"diff_order_book\")) {\n      this._onLevel2Update(msg);\n\n      return;\n    } // Handle forced reconnection events which may be triggered by\n    // maintenance. Upon reconnection, the request will transition\n    // to a new server.\n\n\n    if (msg.event === \"bts.request_reconnect\") {\n      this.reconnect();\n      return;\n    }\n  }\n  /**\n  Process trade events\n  {\n    \"data\": {\n      \"microtimestamp\": \"1560180218394137\",\n      \"amount\": 0.0063150000000000003,\n      \"buy_order_id\": 3486145418,\n      \"sell_order_id\": 3486144483,\n      \"amount_str\": \"0.00631500\",\n      \"price_str\": \"7917.13\",\n      \"timestamp\": \"1560180218\",\n      \"price\": 7917.1300000000001,\n      \"type\": 0,\n      \"id\": 90350862\n    },\n    \"event\": \"trade\",\n    \"channel\": \"live_trades_btcusd\"\n  }\n  */\n\n\n  _onTrade(msg) {\n    const remote_id = msg.channel.substr(msg.channel.lastIndexOf(\"_\") + 1);\n\n    const market = this._tradeSubs.get(remote_id);\n\n    if (!market) return;\n    const data = msg.data;\n    const trade = new Trade_1.Trade({\n      exchange: \"Bitstamp\",\n      base: market.base,\n      quote: market.quote,\n      tradeId: data.id.toFixed(),\n      unix: Math.round(parseInt(data.microtimestamp) / 1000),\n      side: data.type === 1 ? \"sell\" : \"buy\",\n      price: data.price_str,\n      amount: data.amount_str,\n      buyOrderId: data.buy_order_id,\n      sellOrderId: data.sell_order_id\n    });\n    this.emit(\"trade\", trade, market);\n  }\n  /**\n  Process level2 snapshot message\n  {\n    \"data\": {\n      \"timestamp\": \"1560181957\",\n      \"microtimestamp\": \"1560181957623999\",\n      \"bids\": [\n        [\"7929.20\", \"1.10000000\"],\n        [\"7927.07\", \"1.14028647\"],\n        [\"7926.92\", \"0.02000000\"],\n        [\"7926.31\", \"3.35799775\"],\n        [\"7926.30\", \"0.10000000\"]\n      ],\n      \"asks\": [\n        [\"7936.73\", \"0.50000000\"],\n        [\"7937.10\", \"1.00000000\"],\n        [\"7937.12\", \"0.02000000\"],\n        [\"7937.13\", \"0.20101742\"],\n        [\"7937.15\", \"0.06000000\"]\n      ]\n    },\n    \"event\": \"data\",\n    \"channel\": \"order_book_btcusd\"\n  }\n  */\n\n\n  _onLevel2Snapshot(msg) {\n    const remote_id = msg.channel.substr(msg.channel.lastIndexOf(\"_\") + 1);\n\n    const market = this._level2SnapshotSubs.get(remote_id);\n\n    if (!market) return;\n    let {\n      bids,\n      asks,\n      microtimestamp\n    } = msg.data;\n    bids = bids.map(_ref => {\n      let [price, size] = _ref;\n      return new Level2Point_1.Level2Point(price, size);\n    });\n    asks = asks.map(_ref2 => {\n      let [price, size] = _ref2;\n      return new Level2Point_1.Level2Point(price, size);\n    });\n    const spot = new Level2Snapshots_1.Level2Snapshot({\n      exchange: \"Bitstamp\",\n      base: market.base,\n      quote: market.quote,\n      timestampMs: Math.round(parseInt(microtimestamp) / 1000),\n      bids,\n      asks\n    });\n    this.emit(\"l2snapshot\", spot, market);\n  }\n  /**\n  Process level2 update message\n   {\n    \"data\": {\n      \"timestamp\": \"1560182488\",\n      \"microtimestamp\": \"1560182488522670\",\n      \"bids\": [\n        [\"7937.24\", \"0.00000000\"],\n        [\"7937.10\", \"0.00000000\"],\n        [\"7935.33\", \"3.14680000\"],\n        [\"7935.01\", \"0.00000000\"],\n        [\"7934.55\", \"0.00000000\"]\n      ],\n      \"asks\": [\n        [\"7945.54\", \"0.10000000\"],\n        [\"7945.64\", \"0.06000000\"],\n        [\"7946.48\", \"4.00000000\"],\n        [\"7947.75\", \"3.14700000\"],\n        [\"7948.10\", \"0.00000000\"]\n      ]\n    },\n    \"event\": \"data\",\n    \"channel\": \"diff_order_book_btcusd\"\n  }\n  */\n\n\n  _onLevel2Update(msg) {\n    const remote_id = msg.channel.substr(msg.channel.lastIndexOf(\"_\") + 1);\n\n    const market = this._level2UpdateSubs.get(remote_id);\n\n    if (!market) return;\n    let {\n      bids,\n      asks,\n      microtimestamp\n    } = msg.data;\n    bids = bids.map(_ref3 => {\n      let [price, size] = _ref3;\n      return new Level2Point_1.Level2Point(price, size);\n    });\n    asks = asks.map(_ref4 => {\n      let [price, size] = _ref4;\n      return new Level2Point_1.Level2Point(price, size);\n    });\n    const update = new Level2Update_1.Level2Update({\n      exchange: \"Bitstamp\",\n      base: market.base,\n      quote: market.quote,\n      timestampMs: Math.round(parseInt(microtimestamp) / 1000),\n      bids,\n      asks\n    });\n    this.emit(\"l2update\", update, market);\n  } /////////////////////////////////////////////\n  // SNAPSHOTS\n  /////////////////////////////////////////////\n\n\n  _requestLevel2Snapshots() {\n    if (this.requestSnapshot) {\n      for (const market of Array.from(this._level2UpdateSubs.values())) {\n        this._requestLevel2Snapshot(market);\n      }\n    }\n  }\n\n  _requestLevel2Snapshot(market) {\n    this._restSem.take(async () => {\n      try {\n        const remote_id = market.id;\n        const uri = `https://www.bitstamp.net/api/v2/order_book/${remote_id}?group=1`;\n        const raw = await https.get(uri);\n        const timestampMs = raw.timestamp * 1000;\n        const asks = raw.asks.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n        const bids = raw.bids.map(p => new Level2Point_1.Level2Point(p[0], p[1]));\n        const snapshot = new Level2Snapshots_1.Level2Snapshot({\n          exchange: \"Bitstamp\",\n          base: market.base,\n          quote: market.quote,\n          timestampMs,\n          asks,\n          bids\n        });\n        this.emit(\"l2snapshot\", snapshot, market);\n      } catch (ex) {\n        this.emit(\"error\", ex);\n\n        this._requestLevel2Snapshot(market);\n      } finally {\n        await (0, Util_1.wait)(this.REST_REQUEST_DELAY_MS);\n\n        this._restSem.leave();\n      }\n    });\n  }\n\n}\n\nexports.BitstampClient = BitstampClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/BitstampClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-misused-promises */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport semaphore = require(\"semaphore\");\nimport { Level2Point } from \"../Level2Point\";\nimport { BasicClient } from \"../BasicClient\";\nimport { ClientOptions } from \"../ClientOptions\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Market } from \"../Market\";\nimport { wait } from \"../Util\";\nimport * as https from \"../Https\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { Trade } from \"../Trade\";\nimport { Level2Update } from \"../Level2Update\";\n\n/**\n * BistampClient v2 no longer uses Pusher. We can leverage the\n * BasicClient now instead of performing custom actions.\n *\n * Documentation for Version 2\n * https://www.bitstamp.net/websocket/v2/\n */\nexport class BitstampClient extends BasicClient {\n    public requestSnapshot: boolean;\n    public REST_REQUEST_DELAY_MS: number;\n\n    protected _restSem: semaphore.Semaphore;\n\n    protected _sendSubTicker = NotImplementedFn;\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendUnsubTicker = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    constructor({ wssPath = \"wss://ws.bitstamp.net\", watcherMs }: ClientOptions = {}) {\n        super(wssPath, \"Bitstamp\", undefined, watcherMs);\n        this.requestSnapshot = true;\n        this.hasTrades = true;\n        this.hasLevel2Snapshots = true;\n        this.hasLevel2Updates = true;\n        this._restSem = semaphore(1);\n        this.REST_REQUEST_DELAY_MS = 250;\n    }\n\n    protected _sendSubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"bts:subscribe\",\n                data: {\n                    channel: `live_trades_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"bts:unsubscribe\",\n                data: {\n                    channel: `live_trades_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Snapshots(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"bts:subscribe\",\n                data: {\n                    channel: `order_book_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Snapshots(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"bts:unsubscribe\",\n                data: {\n                    channel: `order_book_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id) {\n        if (this.requestSnapshot)\n            this._requestLevel2Snapshot(this._level2UpdateSubs.get(remote_id));\n        this._wss.send(\n            JSON.stringify({\n                event: \"bts:subscribe\",\n                data: {\n                    channel: `diff_order_book_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates(remote_id) {\n        this._wss.send(\n            JSON.stringify({\n                event: \"bts:unsubscribe\",\n                data: {\n                    channel: `diff_order_book_${remote_id}`,\n                },\n            }),\n        );\n    }\n\n    /////////////////////////////////////////////\n\n    protected _onMessage(raw: any) {\n        const msg = JSON.parse(raw);\n\n        if (msg.event === \"trade\" && msg.channel.startsWith(\"live_trades\")) {\n            this._onTrade(msg);\n            return;\n        }\n\n        if (msg.event === \"data\" && msg.channel.startsWith(\"order_book\")) {\n            this._onLevel2Snapshot(msg);\n            return;\n        }\n\n        if (msg.event === \"data\" && msg.channel.startsWith(\"diff_order_book\")) {\n            this._onLevel2Update(msg);\n            return;\n        }\n\n        // Handle forced reconnection events which may be triggered by\n        // maintenance. Upon reconnection, the request will transition\n        // to a new server.\n        if (msg.event === \"bts.request_reconnect\") {\n            this.reconnect();\n            return;\n        }\n    }\n\n    /**\n   Process trade events\n    {\n      \"data\": {\n        \"microtimestamp\": \"1560180218394137\",\n        \"amount\": 0.0063150000000000003,\n        \"buy_order_id\": 3486145418,\n        \"sell_order_id\": 3486144483,\n        \"amount_str\": \"0.00631500\",\n        \"price_str\": \"7917.13\",\n        \"timestamp\": \"1560180218\",\n        \"price\": 7917.1300000000001,\n        \"type\": 0,\n        \"id\": 90350862\n      },\n      \"event\": \"trade\",\n      \"channel\": \"live_trades_btcusd\"\n    }\n\n   */\n    protected _onTrade(msg) {\n        const remote_id = msg.channel.substr(msg.channel.lastIndexOf(\"_\") + 1);\n\n        const market = this._tradeSubs.get(remote_id);\n        if (!market) return;\n\n        const data = msg.data;\n        const trade = new Trade({\n            exchange: \"Bitstamp\",\n            base: market.base,\n            quote: market.quote,\n            tradeId: data.id.toFixed(),\n            unix: Math.round(parseInt(data.microtimestamp) / 1000), // convert to milli\n            side: data.type === 1 ? \"sell\" : \"buy\",\n            price: data.price_str,\n            amount: data.amount_str,\n            buyOrderId: data.buy_order_id,\n            sellOrderId: data.sell_order_id,\n        });\n\n        this.emit(\"trade\", trade, market);\n    }\n\n    /**\n    Process level2 snapshot message\n    {\n      \"data\": {\n        \"timestamp\": \"1560181957\",\n        \"microtimestamp\": \"1560181957623999\",\n        \"bids\": [\n          [\"7929.20\", \"1.10000000\"],\n          [\"7927.07\", \"1.14028647\"],\n          [\"7926.92\", \"0.02000000\"],\n          [\"7926.31\", \"3.35799775\"],\n          [\"7926.30\", \"0.10000000\"]\n        ],\n        \"asks\": [\n          [\"7936.73\", \"0.50000000\"],\n          [\"7937.10\", \"1.00000000\"],\n          [\"7937.12\", \"0.02000000\"],\n          [\"7937.13\", \"0.20101742\"],\n          [\"7937.15\", \"0.06000000\"]\n        ]\n      },\n      \"event\": \"data\",\n      \"channel\": \"order_book_btcusd\"\n    }\n   */\n    protected _onLevel2Snapshot(msg) {\n        const remote_id = msg.channel.substr(msg.channel.lastIndexOf(\"_\") + 1);\n\n        const market = this._level2SnapshotSubs.get(remote_id);\n        if (!market) return;\n\n        let { bids, asks, microtimestamp } = msg.data;\n        bids = bids.map(([price, size]) => new Level2Point(price, size));\n        asks = asks.map(([price, size]) => new Level2Point(price, size));\n\n        const spot = new Level2Snapshot({\n            exchange: \"Bitstamp\",\n            base: market.base,\n            quote: market.quote,\n            timestampMs: Math.round(parseInt(microtimestamp) / 1000), // convert to milli\n            bids,\n            asks,\n        });\n\n        this.emit(\"l2snapshot\", spot, market);\n    }\n\n    /**\n    Process level2 update message\n\n    {\n      \"data\": {\n        \"timestamp\": \"1560182488\",\n        \"microtimestamp\": \"1560182488522670\",\n        \"bids\": [\n          [\"7937.24\", \"0.00000000\"],\n          [\"7937.10\", \"0.00000000\"],\n          [\"7935.33\", \"3.14680000\"],\n          [\"7935.01\", \"0.00000000\"],\n          [\"7934.55\", \"0.00000000\"]\n        ],\n        \"asks\": [\n          [\"7945.54\", \"0.10000000\"],\n          [\"7945.64\", \"0.06000000\"],\n          [\"7946.48\", \"4.00000000\"],\n          [\"7947.75\", \"3.14700000\"],\n          [\"7948.10\", \"0.00000000\"]\n        ]\n      },\n      \"event\": \"data\",\n      \"channel\": \"diff_order_book_btcusd\"\n    }\n   */\n    protected _onLevel2Update(msg) {\n        const remote_id = msg.channel.substr(msg.channel.lastIndexOf(\"_\") + 1);\n\n        const market = this._level2UpdateSubs.get(remote_id);\n        if (!market) return;\n\n        let { bids, asks, microtimestamp } = msg.data;\n        bids = bids.map(([price, size]) => new Level2Point(price, size));\n        asks = asks.map(([price, size]) => new Level2Point(price, size));\n\n        const update = new Level2Update({\n            exchange: \"Bitstamp\",\n            base: market.base,\n            quote: market.quote,\n            timestampMs: Math.round(parseInt(microtimestamp) / 1000), // convert to milli\n            bids,\n            asks,\n        });\n\n        this.emit(\"l2update\", update, market);\n    }\n\n    /////////////////////////////////////////////\n    // SNAPSHOTS\n    /////////////////////////////////////////////\n\n    protected _requestLevel2Snapshots() {\n        if (this.requestSnapshot) {\n            for (const market of Array.from(this._level2UpdateSubs.values())) {\n                this._requestLevel2Snapshot(market);\n            }\n        }\n    }\n\n    protected _requestLevel2Snapshot(market: Market) {\n        this._restSem.take(async () => {\n            try {\n                const remote_id = market.id;\n                const uri = `https://www.bitstamp.net/api/v2/order_book/${remote_id}?group=1`;\n                const raw: any = await https.get(uri);\n                const timestampMs = raw.timestamp * 1000;\n                const asks = raw.asks.map(p => new Level2Point(p[0], p[1]));\n                const bids = raw.bids.map(p => new Level2Point(p[0], p[1]));\n                const snapshot = new Level2Snapshot({\n                    exchange: \"Bitstamp\",\n                    base: market.base,\n                    quote: market.quote,\n                    timestampMs,\n                    asks,\n                    bids,\n                });\n                this.emit(\"l2snapshot\", snapshot, market);\n            } catch (ex) {\n                this.emit(\"error\", ex);\n                this._requestLevel2Snapshot(market);\n            } finally {\n                await wait(this.REST_REQUEST_DELAY_MS);\n                this._restSem.leave();\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}