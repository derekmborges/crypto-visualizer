{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinexSingleClient = exports.CoinexClient = void 0;\n/* eslint-disable @typescript-eslint/member-ordering */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\n/* eslint-disable @typescript-eslint/no-implied-eval */\n\nconst moment = require(\"moment\");\n\nconst BasicClient_1 = require(\"../BasicClient\");\n\nconst BasicMultiClient_1 = require(\"../BasicMultiClient\");\n\nconst CandlePeriod_1 = require(\"../CandlePeriod\");\n\nconst Level2Point_1 = require(\"../Level2Point\");\n\nconst Level2Snapshots_1 = require(\"../Level2Snapshots\");\n\nconst Level2Update_1 = require(\"../Level2Update\");\n\nconst NotImplementedFn_1 = require(\"../NotImplementedFn\");\n\nconst SubscriptionType_1 = require(\"../SubscriptionType\");\n\nconst Ticker_1 = require(\"../Ticker\");\n\nconst Trade_1 = require(\"../Trade\");\n\nclass CoinexClient extends BasicMultiClient_1.BasicMultiClient {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.options = options;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasCandles = false;\n    this.hasLevel2Updates = true;\n    this.candlePeriod = CandlePeriod_1.CandlePeriod._1m;\n  }\n\n  _createBasicClient() {\n    return new CoinexSingleClient({ ...this.options,\n      parent: this\n    });\n  }\n\n}\n\nexports.CoinexClient = CoinexClient;\n\nclass CoinexSingleClient extends BasicClient_1.BasicClient {\n  constructor(_ref) {\n    let {\n      wssPath = \"wss://socket.coinex.com/\",\n      watcherMs = 900 * 1000,\n      parent\n    } = _ref;\n    super(wssPath, \"Coinex\", undefined, watcherMs);\n    this._sendSubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubCandles = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel2Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Snapshots = NotImplementedFn_1.NotImplementedFn;\n    this._sendSubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this._sendUnsubLevel3Updates = NotImplementedFn_1.NotImplementedFn;\n    this.hasTickers = true;\n    this.hasTrades = true;\n    this.hasCandles = false;\n    this.hasLevel2Updates = true;\n    this.retryErrorTimeout = 15000;\n    this._id = 0;\n    this._idSubMap = new Map();\n    this.parent = parent;\n  }\n\n  get candlePeriod() {\n    return this.parent.candlePeriod;\n  }\n\n  _beforeConnect() {\n    this._wss.on(\"connected\", this._startPing.bind(this));\n\n    this._wss.on(\"disconnected\", this._stopPing.bind(this));\n\n    this._wss.on(\"closed\", this._stopPing.bind(this));\n  }\n\n  _startPing() {\n    clearInterval(this._pingInterval);\n    this._pingInterval = setInterval(this._sendPing.bind(this), 30000);\n  }\n\n  _stopPing() {\n    clearInterval(this._pingInterval);\n  }\n\n  _sendPing() {\n    if (this._wss) {\n      this._wss.send(JSON.stringify({\n        method: \"server.ping\",\n        params: [],\n        id: ++this._id\n      }));\n    }\n  }\n\n  _failSubscription(id) {\n    // find the subscription\n    const sub = this._idSubMap.get(id);\n\n    if (!sub) return; // // unsubscribe from the appropriate event\n    // const { type, remote_id } = sub;\n    // // unsubscribe from the appropriate thiing\n    // switch (type) {\n    //     case SubscriptionType.ticker:\n    //         this.unsubscribeTicker(remote_id);\n    //         break;\n    //     case SubscriptionType.trade:\n    //         this.unsubscribeTrades(remote_id);\n    //         break;\n    //     case SubscriptionType.level2update:\n    //         this.unsubscribeLevel2Updates(remote_id);\n    //         break;\n    // }\n    // remove the value\n\n    this._idSubMap.delete(id);\n  } // unsubscribeTicker(remote_id: any) {\n  //     throw new Error(\"Method not implemented.\");\n  // }\n  // unsubscribeTrades(remote_id: any) {\n  //     throw new Error(\"Method not implemented.\");\n  // }\n  // unsubscribeLevel2Updates(remote_id: any) {\n  //     throw new Error(\"Method not implemented.\");\n  // }\n\n\n  _sendSubTicker(remote_id) {\n    const id = this._id++;\n\n    this._idSubMap.set(id, {\n      remote_id,\n      type: SubscriptionType_1.SubscriptionType.ticker\n    });\n\n    this._wss.send(JSON.stringify({\n      method: \"state.subscribe\",\n      params: [remote_id],\n      id\n    }));\n  }\n\n  _sendUnsubTicker() {\n    this._wss.send(JSON.stringify({\n      method: \"state.unsubscribe\"\n    }));\n  }\n\n  _sendSubTrades(remote_id) {\n    const id = this._id++;\n\n    this._idSubMap.set(id, {\n      remote_id,\n      type: SubscriptionType_1.SubscriptionType.trade\n    });\n\n    this._wss.send(JSON.stringify({\n      method: \"deals.subscribe\",\n      params: [remote_id],\n      id\n    }));\n  }\n\n  _sendUnsubTrades() {\n    this._wss.send(JSON.stringify({\n      method: \"deals.unsubscribe\"\n    }));\n  }\n\n  _sendSubLevel2Updates(remote_id) {\n    const id = this._id++;\n\n    this._idSubMap.set(id, {\n      remote_id,\n      type: SubscriptionType_1.SubscriptionType.level2update\n    });\n\n    this._wss.send(JSON.stringify({\n      method: \"depth.subscribe\",\n      params: [remote_id, 50, \"0\"],\n      id\n    }));\n  }\n\n  _sendUnsubLevel2Updates() {\n    this._wss.send(JSON.stringify({\n      method: \"depth.unsubscribe\"\n    }));\n  }\n\n  _onMessage(raw) {\n    const msg = JSON.parse(raw);\n    const {\n      error,\n      method,\n      params,\n      id\n    } = msg; // unsubscribe on failures\n\n    if (error) {\n      this.emit(\"error\", msg);\n\n      this._failSubscription(id);\n\n      return;\n    } // if params is not defined, then this is a response to an event\n    // that we don't care about (like the initial connection event)\n\n\n    if (!params) return;\n\n    if (method === \"state.update\") {\n      const marketId = Object.keys(params[0])[0];\n\n      const market = this._tickerSubs.get(marketId);\n\n      if (!market) return;\n\n      const ticker = this._constructTicker(params[0][marketId], market);\n\n      this.emit(\"ticker\", ticker, market);\n      return;\n    }\n\n    if (method === \"deals.update\") {\n      const marketId = params[0];\n\n      const market = this._tradeSubs.get(marketId);\n\n      if (!market) return;\n\n      for (const t of params[1].reverse()) {\n        const trade = this._constructTrade(t, market);\n\n        this.emit(\"trade\", trade, market);\n      }\n\n      return;\n    }\n\n    if (method === \"depth.update\") {\n      const marketId = params[2];\n\n      const market = this._level2UpdateSubs.get(marketId);\n\n      if (!market) return;\n      const isLevel2Snapshot = params[0];\n\n      if (isLevel2Snapshot) {\n        const l2snapshot = this._constructLevel2Snapshot(params[1], market);\n\n        this.emit(\"l2snapshot\", l2snapshot, market);\n      } else {\n        const l2update = this._constructLevel2Update(params[1], market);\n\n        this.emit(\"l2update\", l2update, market);\n      }\n\n      return;\n    }\n  }\n\n  _constructTicker(rawTick, market) {\n    let {\n      last,\n      open,\n      high,\n      low,\n      volume,\n      deal\n    } = rawTick,\n        change = parseFloat(last) - parseFloat(open),\n        changePercent = (parseFloat(last) - parseFloat(open)) / parseFloat(open) * 100;\n    return new Ticker_1.Ticker({\n      exchange: \"Coinex\",\n      base: market.base,\n      quote: market.quote,\n      timestamp: Date.now(),\n      last: last,\n      open: open,\n      high: high,\n      low: low,\n      volume: volume,\n      quoteVolume: deal,\n      change: change.toFixed(8),\n      changePercent: changePercent.toFixed(8)\n    });\n  }\n\n  _constructTrade(rawTrade, market) {\n    const {\n      id,\n      time,\n      type,\n      price,\n      amount\n    } = rawTrade;\n    const unix = moment.utc(time * 1000).valueOf();\n    return new Trade_1.Trade({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      tradeId: id.toFixed(),\n      unix: unix,\n      side: type,\n      price,\n      amount,\n      buyOrderId: undefined,\n      sellOrderId: undefined\n    });\n  }\n\n  _constructLevel2Snapshot(rawUpdate, market) {\n    let {\n      bids,\n      asks\n    } = rawUpdate,\n        structuredBids = bids ? bids.map(_ref2 => {\n      let [price, size] = _ref2;\n      return new Level2Point_1.Level2Point(price, size);\n    }) : [],\n        structuredAsks = asks ? asks.map(_ref3 => {\n      let [price, size] = _ref3;\n      return new Level2Point_1.Level2Point(price, size);\n    }) : [];\n    return new Level2Snapshots_1.Level2Snapshot({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      bids: structuredBids,\n      asks: structuredAsks\n    });\n  }\n\n  _constructLevel2Update(rawUpdate, market) {\n    let {\n      bids,\n      asks\n    } = rawUpdate,\n        structuredBids = bids ? bids.map(_ref4 => {\n      let [price, size] = _ref4;\n      return new Level2Point_1.Level2Point(price, size);\n    }) : [],\n        structuredAsks = asks ? asks.map(_ref5 => {\n      let [price, size] = _ref5;\n      return new Level2Point_1.Level2Point(price, size);\n    }) : [];\n    return new Level2Update_1.Level2Update({\n      exchange: this.name,\n      base: market.base,\n      quote: market.quote,\n      bids: structuredBids,\n      asks: structuredAsks\n    });\n  }\n\n}\n\nexports.CoinexSingleClient = CoinexSingleClient;","map":{"version":3,"sources":["/Users/Derek/workspace/crypto-visualizer/node_modules/ccxws/src/exchanges/CoinexClient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-implied-eval */\nimport moment = require(\"moment\");\nimport { BasicClient } from \"../BasicClient\";\nimport { BasicMultiClient } from \"../BasicMultiClient\";\nimport { Candle } from \"../Candle\";\nimport { CandlePeriod } from \"../CandlePeriod\";\nimport { IClient } from \"../IClient\";\nimport { Level2Point } from \"../Level2Point\";\nimport { Level2Snapshot } from \"../Level2Snapshots\";\nimport { Level2Update } from \"../Level2Update\";\nimport { NotImplementedFn } from \"../NotImplementedFn\";\nimport { SubscriptionType } from \"../SubscriptionType\";\nimport { Ticker } from \"../Ticker\";\nimport { Trade } from \"../Trade\";\n\nexport type CoinexClientOptions = {\n    //\n};\n\nexport class CoinexClient extends BasicMultiClient {\n    public options: CoinexClientOptions;\n    public candlePeriod: CandlePeriod;\n\n    constructor(options: CoinexClientOptions = {}) {\n        super();\n        this.options = options;\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasCandles = false;\n        this.hasLevel2Updates = true;\n        this.candlePeriod = CandlePeriod._1m;\n    }\n\n    protected _createBasicClient(): IClient {\n        return new CoinexSingleClient({ ...this.options, parent: this });\n    }\n}\n\nexport class CoinexSingleClient extends BasicClient {\n    public retryErrorTimeout: number;\n    public parent: CoinexClient;\n\n    protected _id: number;\n    protected _idSubMap: Map<any, any>;\n    protected _pingInterval: NodeJS.Timeout;\n\n    constructor({ wssPath = \"wss://socket.coinex.com/\", watcherMs = 900 * 1000, parent }) {\n        super(wssPath, \"Coinex\", undefined, watcherMs);\n        this.hasTickers = true;\n        this.hasTrades = true;\n        this.hasCandles = false;\n        this.hasLevel2Updates = true;\n        this.retryErrorTimeout = 15000;\n        this._id = 0;\n        this._idSubMap = new Map();\n        this.parent = parent;\n    }\n\n    public get candlePeriod() {\n        return this.parent.candlePeriod;\n    }\n\n    protected _beforeConnect() {\n        this._wss.on(\"connected\", this._startPing.bind(this));\n        this._wss.on(\"disconnected\", this._stopPing.bind(this));\n        this._wss.on(\"closed\", this._stopPing.bind(this));\n    }\n\n    protected _startPing() {\n        clearInterval(this._pingInterval);\n        this._pingInterval = setInterval(this._sendPing.bind(this), 30000);\n    }\n\n    protected _stopPing() {\n        clearInterval(this._pingInterval);\n    }\n\n    protected _sendPing() {\n        if (this._wss) {\n            this._wss.send(\n                JSON.stringify({\n                    method: \"server.ping\",\n                    params: [],\n                    id: ++this._id,\n                }),\n            );\n        }\n    }\n\n    protected _failSubscription(id) {\n        // find the subscription\n        const sub = this._idSubMap.get(id);\n        if (!sub) return;\n\n        // // unsubscribe from the appropriate event\n        // const { type, remote_id } = sub;\n\n        // // unsubscribe from the appropriate thiing\n        // switch (type) {\n        //     case SubscriptionType.ticker:\n        //         this.unsubscribeTicker(remote_id);\n        //         break;\n        //     case SubscriptionType.trade:\n        //         this.unsubscribeTrades(remote_id);\n        //         break;\n        //     case SubscriptionType.level2update:\n        //         this.unsubscribeLevel2Updates(remote_id);\n        //         break;\n        // }\n\n        // remove the value\n        this._idSubMap.delete(id);\n    }\n\n    // unsubscribeTicker(remote_id: any) {\n    //     throw new Error(\"Method not implemented.\");\n    // }\n    // unsubscribeTrades(remote_id: any) {\n    //     throw new Error(\"Method not implemented.\");\n    // }\n    // unsubscribeLevel2Updates(remote_id: any) {\n    //     throw new Error(\"Method not implemented.\");\n    // }\n\n    protected _sendSubTicker(remote_id) {\n        const id = this._id++;\n        this._idSubMap.set(id, { remote_id, type: SubscriptionType.ticker });\n        this._wss.send(\n            JSON.stringify({\n                method: \"state.subscribe\",\n                params: [remote_id],\n                id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTicker() {\n        this._wss.send(\n            JSON.stringify({\n                method: \"state.unsubscribe\",\n            }),\n        );\n    }\n\n    protected _sendSubTrades(remote_id) {\n        const id = this._id++;\n        this._idSubMap.set(id, { remote_id, type: SubscriptionType.trade });\n        this._wss.send(\n            JSON.stringify({\n                method: \"deals.subscribe\",\n                params: [remote_id],\n                id,\n            }),\n        );\n    }\n\n    protected _sendUnsubTrades() {\n        this._wss.send(\n            JSON.stringify({\n                method: \"deals.unsubscribe\",\n            }),\n        );\n    }\n\n    protected _sendSubLevel2Updates(remote_id) {\n        const id = this._id++;\n        this._idSubMap.set(id, { remote_id, type: SubscriptionType.level2update });\n        this._wss.send(\n            JSON.stringify({\n                method: \"depth.subscribe\",\n                params: [remote_id, 50, \"0\"],\n                id,\n            }),\n        );\n    }\n\n    protected _sendUnsubLevel2Updates() {\n        this._wss.send(\n            JSON.stringify({\n                method: \"depth.unsubscribe\",\n            }),\n        );\n    }\n\n    protected _sendSubCandles = NotImplementedFn;\n    protected _sendUnsubCandles = NotImplementedFn;\n    protected _sendSubLevel2Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel2Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Snapshots = NotImplementedFn;\n    protected _sendUnsubLevel3Snapshots = NotImplementedFn;\n    protected _sendSubLevel3Updates = NotImplementedFn;\n    protected _sendUnsubLevel3Updates = NotImplementedFn;\n\n    protected _onMessage(raw) {\n        const msg = JSON.parse(raw);\n\n        const { error, method, params, id } = msg;\n\n        // unsubscribe on failures\n        if (error) {\n            this.emit(\"error\", msg);\n            this._failSubscription(id);\n            return;\n        }\n\n        // if params is not defined, then this is a response to an event\n        // that we don't care about (like the initial connection event)\n        if (!params) return;\n\n        if (method === \"state.update\") {\n            const marketId = Object.keys(params[0])[0];\n            const market = this._tickerSubs.get(marketId);\n            if (!market) return;\n\n            const ticker = this._constructTicker(params[0][marketId], market);\n            this.emit(\"ticker\", ticker, market);\n            return;\n        }\n\n        if (method === \"deals.update\") {\n            const marketId = params[0];\n            const market = this._tradeSubs.get(marketId);\n            if (!market) return;\n\n            for (const t of params[1].reverse()) {\n                const trade = this._constructTrade(t, market);\n                this.emit(\"trade\", trade, market);\n            }\n            return;\n        }\n\n        if (method === \"depth.update\") {\n            const marketId = params[2];\n            const market = this._level2UpdateSubs.get(marketId);\n            if (!market) return;\n\n            const isLevel2Snapshot = params[0];\n            if (isLevel2Snapshot) {\n                const l2snapshot = this._constructLevel2Snapshot(params[1], market);\n                this.emit(\"l2snapshot\", l2snapshot, market);\n            } else {\n                const l2update = this._constructLevel2Update(params[1], market);\n                this.emit(\"l2update\", l2update, market);\n            }\n            return;\n        }\n    }\n\n    protected _constructTicker(rawTick, market) {\n        let { last, open, high, low, volume, deal } = rawTick,\n            change = parseFloat(last) - parseFloat(open),\n            changePercent = ((parseFloat(last) - parseFloat(open)) / parseFloat(open)) * 100;\n\n        return new Ticker({\n            exchange: \"Coinex\",\n            base: market.base,\n            quote: market.quote,\n            timestamp: Date.now(),\n            last: last,\n            open: open,\n            high: high,\n            low: low,\n            volume: volume,\n            quoteVolume: deal,\n            change: change.toFixed(8),\n            changePercent: changePercent.toFixed(8),\n        });\n    }\n\n    protected _constructTrade(rawTrade, market) {\n        const { id, time, type, price, amount } = rawTrade;\n\n        const unix = moment.utc(time * 1000).valueOf();\n\n        return new Trade({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            tradeId: id.toFixed(),\n            unix: unix,\n            side: type,\n            price,\n            amount,\n            buyOrderId: undefined,\n            sellOrderId: undefined,\n        });\n    }\n\n    protected _constructLevel2Snapshot(rawUpdate, market) {\n        let { bids, asks } = rawUpdate,\n            structuredBids = bids ? bids.map(([price, size]) => new Level2Point(price, size)) : [],\n            structuredAsks = asks ? asks.map(([price, size]) => new Level2Point(price, size)) : [];\n\n        return new Level2Snapshot({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            bids: structuredBids,\n            asks: structuredAsks,\n        });\n    }\n\n    protected _constructLevel2Update(rawUpdate, market) {\n        let { bids, asks } = rawUpdate,\n            structuredBids = bids ? bids.map(([price, size]) => new Level2Point(price, size)) : [],\n            structuredAsks = asks ? asks.map(([price, size]) => new Level2Point(price, size)) : [];\n\n        return new Level2Update({\n            exchange: this.name,\n            base: market.base,\n            quote: market.quote,\n            bids: structuredBids,\n            asks: structuredAsks,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"script"}